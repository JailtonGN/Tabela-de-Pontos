#!/usr/bin/env node

/**
 * Script de verifica√ß√£o para deploy no Render
 * Verifica se todas as configura√ß√µes est√£o corretas
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICANDO CONFIGURA√á√ÉO PARA DEPLOY');
console.log('======================================\n');

let allGood = true;

// 1. Verificar package.json
console.log('1. üì¶ Verificando package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (!packageJson.scripts.start) {
    console.log('‚ùå ERRO: Script "start" n√£o encontrado em package.json');
    allGood = false;
  } else {
    console.log('‚úÖ Script start configurado:', packageJson.scripts.start);
  }
  
  if (!packageJson.main) {
    console.log('‚ùå ERRO: Campo "main" n√£o encontrado em package.json');
    allGood = false;
  } else {
    console.log('‚úÖ Arquivo principal:', packageJson.main);
  }
  
  if (!packageJson.engines || !packageJson.engines.node) {
    console.log('‚ö†Ô∏è  AVISO: Vers√£o do Node.js n√£o especificada em engines');
  } else {
    console.log('‚úÖ Vers√£o Node.js:', packageJson.engines.node);
  }
  
} catch (error) {
  console.log('‚ùå ERRO: N√£o foi poss√≠vel ler package.json');
  allGood = false;
}

// 2. Verificar arquivo principal
console.log('\n2. üöÄ Verificando arquivo principal...');
let packageJson;
try {
  packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
} catch (error) {
  packageJson = {};
}
const mainFile = packageJson?.main || 'server.js';
if (fs.existsSync(mainFile)) {
  console.log('‚úÖ Arquivo principal existe:', mainFile);
} else {
  console.log('‚ùå ERRO: Arquivo principal n√£o encontrado:', mainFile);
  allGood = false;
}

// 3. Verificar render.yaml
console.log('\n3. ‚öôÔ∏è  Verificando render.yaml...');
if (fs.existsSync('render.yaml')) {
  console.log('‚úÖ Arquivo render.yaml encontrado');
  const renderConfig = fs.readFileSync('render.yaml', 'utf8');
  if (renderConfig.includes('tabela-pontos-app')) {
    console.log('‚úÖ Nome do servi√ßo configurado corretamente');
  } else {
    console.log('‚ö†Ô∏è  AVISO: Nome do servi√ßo pode n√£o estar correto');
  }
} else {
  console.log('‚ùå ERRO: Arquivo render.yaml n√£o encontrado');
  allGood = false;
}

// 4. Verificar depend√™ncias
console.log('\n4. üìö Verificando depend√™ncias...');
if (fs.existsSync('package-lock.json')) {
  console.log('‚úÖ package-lock.json encontrado');
} else {
  console.log('‚ö†Ô∏è  AVISO: package-lock.json n√£o encontrado');
}

if (fs.existsSync('node_modules')) {
  console.log('‚úÖ node_modules encontrado');
} else {
  console.log('‚ö†Ô∏è  AVISO: node_modules n√£o encontrado (ser√° instalado no deploy)');
}

// 5. Verificar estrutura de pastas
console.log('\n5. üìÅ Verificando estrutura de pastas...');
const requiredDirs = ['public', 'src', 'models'];
requiredDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    console.log(`‚úÖ Pasta ${dir} encontrada`);
  } else {
    console.log(`‚ö†Ô∏è  AVISO: Pasta ${dir} n√£o encontrada`);
  }
});

// 6. Verificar arquivos est√°ticos
console.log('\n6. üåê Verificando arquivos est√°ticos...');
if (fs.existsSync('public/index.html')) {
  console.log('‚úÖ index.html encontrado');
} else {
  console.log('‚ùå ERRO: public/index.html n√£o encontrado');
  allGood = false;
}

if (fs.existsSync('public/script.js')) {
  console.log('‚úÖ script.js encontrado');
} else {
  console.log('‚ùå ERRO: public/script.js n√£o encontrado');
  allGood = false;
}

// Resultado final
console.log('\n' + '='.repeat(50));
if (allGood) {
  console.log('üéâ TUDO PRONTO PARA DEPLOY!');
  console.log('\nüìã PR√ìXIMOS PASSOS:');
  console.log('1. Configure MongoDB Atlas');
  console.log('2. Acesse: https://dashboard.render.com');
  console.log('3. Conecte seu GitHub');
  console.log('4. Configure as vari√°veis de ambiente');
  console.log('5. Deploy!');
} else {
  console.log('‚ùå CORRIJA OS ERROS ACIMA ANTES DO DEPLOY');
}
console.log('='.repeat(50));

process.exit(allGood ? 0 : 1); 