/**
 * üîß ApiService - Centraliza√ß√£o de todas as chamadas de API
 * 
 * Elimina duplica√ß√£o de c√≥digo nas 16+ chamadas fetch identificadas
 * Fornece tratamento consistente de responses, errors e fallback offline
 * 
 * @author Refatora√ß√£o DRY - Tabela de Pontos
 * @version 1.0.0
 */

class ApiService {
    /**
     * Configura√ß√µes padr√£o para requisi√ß√µes
     */
    static defaultHeaders = {
        'Content-Type': 'application/json'
    };

    /**
     * Timeout padr√£o para requisi√ß√µes (10 segundos)
     */
    static defaultTimeout = 10000;

    /**
     * Executa opera√ß√£o de pontos (adicionar ou remover)
     * @param {string} operation - 'adicionar' ou 'remover'
     * @param {Object} data - Dados da opera√ß√£o {nome, pontos, atividade}
     * @returns {Promise<Object>} Resultado da opera√ß√£o
     */
    static async pontosOperation(operation, data) {
        console.log(`üîç DEBUG: ApiService.pontosOperation(${operation})`, data);
        return this.post(`/api/pontos/${operation}`, data);
    }

    /**
     * Salva hist√≥rico no servidor - TEMPORARIAMENTE DESABILITADO
     * @param {Object} historico - Dados do hist√≥rico
     * @returns {Promise<Object>} Resultado da opera√ß√£o
     */
    static async salvarHistorico(historico) {
        // ‚ú® REFATORADO: Salvamento individual com mapeamento correto de campos
        return this.post('/api/historico', {
            action: historico.tipo || 'adicionar',
            crianca: historico.nome || historico.crianca,
            pontos: historico.pontos,
            motivo: historico.motivo || historico.atividade,
            data: new Date().toISOString()
        });
    }

    /**
     * Carrega dados do servidor
     * @returns {Promise<Object>} Dados carregados
     */
    static async carregarDados() {
        console.log('üîç DEBUG: ApiService.carregarDados()');
        return this.get('/api/dados');
    }

    /**
     * Executa requisi√ß√£o POST
     * @param {string} endpoint - Endpoint da API
     * @param {Object} data - Dados a serem enviados
     * @returns {Promise<Object>} Resultado da requisi√ß√£o
     */
    static async post(endpoint, data) {
        try {
            console.log(`üì° API POST: ${endpoint}`, data);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: this.defaultHeaders,
                body: JSON.stringify(data),
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return await this.handleResponse(response);
            
        } catch (error) {
            return this.handleError(error);
        }
    }

    /**
     * Executa requisi√ß√£o GET
     * @param {string} endpoint - Endpoint da API
     * @returns {Promise<Object>} Resultado da requisi√ß√£o
     */
    static async get(endpoint) {
        try {
            console.log(`üì° API GET: ${endpoint}`);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);

            const response = await fetch(endpoint, {
                method: 'GET',
                headers: this.defaultHeaders,
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return await this.handleResponse(response);
            
        } catch (error) {
            return this.handleError(error);
        }
    }

    /**
     * Executa requisi√ß√£o PUT
     * @param {string} endpoint - Endpoint da API
     * @param {Object} data - Dados a serem enviados
     * @returns {Promise<Object>} Resultado da requisi√ß√£o
     */
    static async put(endpoint, data) {
        try {
            console.log(`üì° API PUT: ${endpoint}`, data);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);

            const response = await fetch(endpoint, {
                method: 'PUT',
                headers: this.defaultHeaders,
                body: JSON.stringify(data),
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return await this.handleResponse(response);
            
        } catch (error) {
            return this.handleError(error);
        }
    }

    /**
     * Executa requisi√ß√£o DELETE
     * @param {string} endpoint - Endpoint da API
     * @returns {Promise<Object>} Resultado da requisi√ß√£o
     */
    static async delete(endpoint) {
        try {
            console.log(`üì° API DELETE: ${endpoint}`);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);

            const response = await fetch(endpoint, {
                method: 'DELETE',
                headers: this.defaultHeaders,
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return await this.handleResponse(response);
            
        } catch (error) {
            return this.handleError(error);
        }
    }

    /**
     * Processa resposta da API de forma padronizada
     * @param {Response} response - Resposta fetch
     * @returns {Promise<Object>} Dados processados
     */
    static async handleResponse(response) {
        try {
            const data = await response.json();
            
            if (response.ok) {
                console.log('‚úÖ API Success:', data);
                
                // Notifica√ß√£o autom√°tica de sucesso se mensagem fornecida
                if (data.message && typeof mostrarNotificacao === 'function') {
                    mostrarNotificacao(`‚úÖ ${data.message}`, 'success');
                }
                
                return {
                    success: true,
                    data: data.data || data,
                    message: data.message,
                    online: true
                };
            } else {
                console.warn('‚ö†Ô∏è API Error:', data);
                
                // Notifica√ß√£o autom√°tica de erro
                if (typeof mostrarNotificacao === 'function') {
                    mostrarNotificacao(`‚ùå ${data.message || 'Erro na opera√ß√£o'}`, 'error');
                }
                
                return {
                    success: false,
                    error: data.message || 'Erro na opera√ß√£o',
                    online: true
                };
            }
        } catch (parseError) {
            console.error('‚ùå JSON Parse Error:', parseError);
            return this.handleError(parseError);
        }
    }

    /**
     * Trata erros de forma padronizada com fallback offline
     * @param {Error} error - Erro capturado
     * @returns {Object} Resultado com fallback offline
     */
    static handleError(error) {
        console.error('‚ùå API Error:', error);
        
        let errorMessage = 'Erro de conex√£o';
        
        if (error.name === 'AbortError') {
            errorMessage = 'Timeout na requisi√ß√£o';
        } else if (error.message.includes('fetch')) {
            errorMessage = 'Servidor indispon√≠vel';
        }
        
        // Notifica√ß√£o de fallback offline
        if (typeof mostrarNotificacao === 'function') {
            mostrarNotificacao(`‚ö†Ô∏è ${errorMessage} - Opera√ß√£o realizada offline`, 'warning');
        }
        
        return {
            success: false,
            error: errorMessage,
            online: false,
            fallbackOffline: true
        };
    }

    /**
     * Verifica se o servidor est√° online
     * @returns {Promise<boolean>} Status da conex√£o
     */
    static async isOnline() {
        try {
            const response = await fetch('/api/health', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            return response.ok;
        } catch {
            return false;
        }
    }

    /**
     * Executa opera√ß√£o com retry autom√°tico
     * @param {Function} operation - Fun√ß√£o da opera√ß√£o
     * @param {number} maxRetries - M√°ximo de tentativas
     * @returns {Promise<Object>} Resultado da opera√ß√£o
     */
    static async withRetry(operation, maxRetries = 3) {
        let lastError;
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`üîÑ Tentativa ${attempt}/${maxRetries}`);
                return await operation();
            } catch (error) {
                lastError = error;
                
                if (attempt < maxRetries) {
                    // Espera progressiva: 1s, 2s, 3s
                    await new Promise(resolve => setTimeout(resolve, attempt * 1000));
                }
            }
        }
        
        return this.handleError(lastError);
    }
}

// Exportar para uso global
window.ApiService = ApiService;

console.log('üîß ApiService carregado - Duplica√ß√£o de API eliminada!');
