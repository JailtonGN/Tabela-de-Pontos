// Sistema de Pontos - JavaScript Simples e Funcional

// Verifica√ß√£o de autentica√ß√£o ao carregar a p√°gina
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Aplica√ß√£o carregando...');
    
    // Verificar se AuthUtils est√° dispon√≠vel
    if (typeof AuthUtils === 'undefined') {
        console.error('‚ùå AuthUtils n√£o carregado, redirecionando para login...');
        window.location.href = '/login.html';
        return;
    }
    
    console.log('‚úÖ AuthUtils carregado');
    
    // Verificar se usu√°rio est√° logado
    let isLoggedIn = AuthUtils.isLoggedIn();
    console.log('üîê Status de autentica√ß√£o:', isLoggedIn);
    
    // Obter dados do usu√°rio se logado, sen√£o redirecionar para login
    let currentUser;
    if (!isLoggedIn) {
        // Se n√£o estiver logado, redirecionar para p√°gina de login
        console.log('üîê Usu√°rio n√£o logado, redirecionando para login...');
        window.location.href = '/login.html';
        return;
    } else {
        currentUser = AuthUtils.getCurrentUser();
    }

    // Obter dados do usu√°rio
    console.log('üë§ Usu√°rio logado:', currentUser);

    if (!currentUser) {
        console.error('‚ùå Dados do usu√°rio inv√°lidos, redirecionando para login...');
        if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
            window.location.href = 'https://tabela-de-pontos.onrender.com/login';
        } else {
            window.location.href = '/login.html';
        }
        return;
    }

    console.log('üë§ Tipo de usu√°rio:', currentUser.type);
    console.log('üîë Permiss√µes:', currentUser.permissions);

    // Configurar interface baseado nas permiss√µes
    configurarInterfacePorPermissao(currentUser);

    // ‚ú® NOVA: Migrar dados antigos se necess√°rio
    migrarDadosAntigos();

    // ‚ú® NOVA: Verificar e limpar dados corrompidos
    verificarELimparDadosCorrompidos();
    
    // ‚ú® NOVA: Verificar integridade dos dados
    verificarIntegridadeDados();

    // ‚ú® NOVO: Carregar opera√ß√µes pendentes
    carregarOperacoesPendentes();

    // Inicializar aplica√ß√£o
    inicializarApp();
});

// ‚ú® NOVAS FUN√á√ïES: Gerenciamento de bloqueio de sincroniza√ß√£o
function bloquearSincronizacaoComTimeout() {
    bloqueiarSincronizacao = true;
    console.log('üîí Sincroniza√ß√£o bloqueada (com timeout de seguran√ßa)');
    
    // Timeout de seguran√ßa: 2 minutos m√°ximo
    setTimeout(() => {
        if (bloqueiarSincronizacao) {
            bloqueiarSincronizacao = false;
            console.log('‚è∞ Timeout: Sincroniza√ß√£o desbloqueada automaticamente ap√≥s 2 minutos');
        }
    }, 120000); // 2 minutos
}

function desbloquearSincronizacao() {
    bloqueiarSincronizacao = false;
    console.log('üîì Sincroniza√ß√£o desbloqueada');
}

// Configurar interface baseado no tipo de usu√°rio
function configurarInterfacePorPermissao(user) {
    const { type, permissions } = user;

    // Mostrar informa√ß√µes do usu√°rio no cabe√ßalho
    const headerTitle = DomUtils.getElement('.header-title p');
    if (headerTitle) {
        const tipoTexto = type === 'admin' ? 'üîß Administrador' : 
                         type === 'pai' ? `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ${user.nome}` : 
                         'üëÄ Visualiza√ß√£o';
        headerTitle.innerHTML = `${tipoTexto} - Gerenciando os pontos dos filhos`;
    }
    
    // Verificar permiss√µes para bot√£o de configura√ß√µes - Movido para cima para priorizar
    const configBtn = DomUtils.getElement('btn-configuracoes');
    if (configBtn) {
        if (type === 'guest') {
            // Sempre esconder bot√£o de configura√ß√µes para visitantes
            configBtn.style.display = 'none';
            console.log('üö´ Bot√£o de configura√ß√µes escondido para visitante');
        } else if (!permissions.includes('manage_children') || !permissions.includes('manage_activities')) {
            // Pais podem ver configura√ß√µes mas com limita√ß√µes
            configBtn.title = 'Configura√ß√µes (Limitadas)';
        }
    }

    // Adicionar bot√£o de logout
    const headerControls = DomUtils.getElement('.header-controls');
    if (headerControls) {
        const logoutBtn = document.createElement('button');
        logoutBtn.className = 'btn-logout';
        
        if (type === 'guest') {
            logoutBtn.innerHTML = 'ÔøΩ Fazer Login';
            logoutBtn.title = 'Fazer login para gerenciar pontos';
            logoutBtn.style.cssText = `
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 600;
                margin-left: 10px;
                transition: all 0.3s ease;
            `;
        } else {
            logoutBtn.innerHTML = 'üö™ Sair';
            logoutBtn.title = 'Fazer logout';
            logoutBtn.style.cssText = `
                background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 600;
                margin-left: 10px;
                transition: all 0.3s ease;
            `;
        }
        
        // Bot√£o para trocar usu√°rio
        const trocarUsuarioBtn = document.createElement('button');
        trocarUsuarioBtn.textContent = 'üîÑ Trocar Usu√°rio';
        trocarUsuarioBtn.className = 'btn-trocar-usuario';
        trocarUsuarioBtn.style.cssText = `
            background: linear-gradient(135deg, #FFA726 0%, #FF7043 100%);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            margin-left: 10px;
            transition: all 0.3s ease;
        `;
        trocarUsuarioBtn.onclick = () => {
            // ‚ú® NOVO: Adicionar log de logout/troca de usu√°rio
            const session = JSON.parse(localStorage.getItem('userSession') || '{}');
            adicionarLog('trocar_usuario', {
                perfil_anterior: session.type,
                nome_anterior: session.nome,
                timestamp_logout: new Date().toISOString()
            });
            
            localStorage.removeItem('userSession');
            location.reload();
        };
        
        logoutBtn.onclick = () => AuthUtils.logout();
        headerControls.appendChild(trocarUsuarioBtn);
        headerControls.appendChild(logoutBtn);
    }

    // Configurar visibilidade dos elementos baseado nas permiss√µes
    if (!permissions.includes('add_points')) {
        // Esconder se√ß√£o de adicionar pontos
        const addSection = document.querySelector('.acao-card:has(#filho-adicionar)');
        if (addSection) addSection.style.display = 'none';
    }

    if (!permissions.includes('remove_points')) {
        // Esconder se√ß√£o de remover pontos
        const removeSection = document.querySelector('.acao-card:has(#filho-remover)');
        if (removeSection) removeSection.style.display = 'none';
    }

    // Controlar visibilidade de elementos admin-only
    controlarElementosAdmin(type);

    // Para visitantes, mostrar apenas a visualiza√ß√£o
    if (type === 'guest') {
        console.log('üëÄ Configurando modo visitante...');
        
        // Esconder TODA a se√ß√£o de a√ß√µes (adicionar/remover pontos)
        const acoesSection = document.querySelector('.acoes-section');
        if (acoesSection) {
            acoesSection.style.display = 'none';
            console.log('üö´ Se√ß√£o de a√ß√µes escondida');
        }
        
        // ‚ú® NOVO: Mostrar hist√≥rico para visitantes (vers√£o simplificada)
        const historicoSection = document.querySelector('.historico-section');
        if (historicoSection) {
            // Manter a se√ß√£o vis√≠vel, mas simplificar para visitantes
            console.log('‚úÖ Se√ß√£o de hist√≥rico mantida para visitantes');
            
            // Esconder bot√µes de compartilhamento para visitantes
            const botoesCompartilhar = historicoSection.querySelector('.botoes-compartilhar');
            if (botoesCompartilhar) {
                botoesCompartilhar.style.display = 'none';
                console.log('üö´ Bot√µes de compartilhamento escondidos para visitantes');
            }
            
            // Modificar o t√≠tulo para indicar que √© modo visualiza√ß√£o
            const historicoTitulo = historicoSection.querySelector('h2');
            if (historicoTitulo) {
                historicoTitulo.innerHTML = 'üìù Hist√≥rico Recente - Modo Visualiza√ß√£o';
                historicoTitulo.style.color = '#4a5568';
            }
            
            // Adicionar aviso no hist√≥rico para visitantes
            const historicoCard = historicoSection.querySelector('.historico-card');
            if (historicoCard) {
                const avisoHistorico = document.createElement('div');
                avisoHistorico.className = 'aviso-historico-visitante';
                avisoHistorico.style.cssText = `
                    margin: 10px 0;
                    padding: 10px;
                    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                    border-radius: 8px;
                    color: #1976d2;
                    text-align: center;
                    font-size: 0.9em;
                    border-left: 4px solid #2196f3;
                `;
                avisoHistorico.innerHTML = `
                    <strong>üëÄ Modo Visualiza√ß√£o:</strong> Voc√™ pode visualizar o hist√≥rico, mas n√£o pode compartilhar ou exportar dados.
                `;
                
                // Inserir ap√≥s o t√≠tulo
                const historicoHeader = historicoSection.querySelector('.historico-header');
                if (historicoHeader) {
                    historicoCard.insertBefore(avisoHistorico, historicoHeader);
                }
            }
        }
        
        // O bot√£o de configura√ß√µes j√° foi escondido na verifica√ß√£o de permiss√µes acima
        // N√£o precisamos escond√™-lo novamente aqui
        
        // Adicionar aviso para visitantes
        const mainContent = document.querySelector('.main-content');
        if (mainContent) {
            const avisoDiv = document.createElement('div');
            avisoDiv.className = 'aviso-visitante';
            avisoDiv.style.cssText = `
                margin: 20px 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 15px;
                color: white;
                text-align: center;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            `;
            avisoDiv.innerHTML = `
                <h3 style="margin: 0 0 10px 0; font-size: 1.4em; color: white;">üëÄ Modo Visitante</h3>
                <p style="margin: 0; color: white; opacity: 0.9;">Voc√™ pode visualizar os pontos atuais e o hist√≥rico recente. Para gerenciar pontos, fa√ßa login como respons√°vel.</p>
            `;
            
            // Inserir ap√≥s o dashboard
            const dashboardSection = document.querySelector('.dashboard-section');
            if (dashboardSection && dashboardSection.nextSibling) {
                mainContent.insertBefore(avisoDiv, dashboardSection.nextSibling);
            } else {
                mainContent.appendChild(avisoDiv);
            }
            console.log('‚úÖ Aviso de visitante adicionado');
        }
        
        // Melhorar o dashboard para visitantes
        const dashboardCard = document.querySelector('.pontos-card');
        if (dashboardCard) {
            dashboardCard.style.cssText += `
                background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                border: 2px solid #e0e6ed;
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            `;
            
            const titulo = dashboardCard.querySelector('h2');
            if (titulo) {
                titulo.innerHTML = 'üëÄ üìä Pontos Atuais - Modo Visualiza√ß√£o';
                titulo.style.color = '#4a5568';
            }
        }
        
        // ‚ú® NOVO: Configurar interface de lembretes por tipo de usu√°rio
        configurarInterfaceLembretes(user);
        document.body.classList.add('modo-visualizacao'); // Ativa cor diferenciada
    } else {
        document.body.classList.remove('modo-visualizacao'); // Remove se n√£o for visitante
        // Configurar interface de lembretes para pais/admin
        configurarInterfaceLembretes(user);
    }
}

// ‚ú® NOVA: Fun√ß√£o para configurar interface de lembretes
function configurarInterfaceLembretes(user) {
    const { type } = user;
    
    // Elementos da se√ß√£o de lembretes
    const lembretesSection = document.querySelector('.lembretes-section');
    const areaCriancas = document.getElementById('area-lembretes-criancas');
    const areaPais = document.getElementById('area-lembretes-pais');
    
    if (!lembretesSection) {
        console.log('‚ö†Ô∏è Se√ß√£o de lembretes n√£o encontrada');
        return;
    }
    
    if (type === 'guest') {
        // Modo Visitante: Mostrar √°rea para crian√ßas escreverem lembretes
        console.log('üëÄ Configurando lembretes para visitante...');
        
        if (areaCriancas) {
            areaCriancas.style.display = 'block';
            console.log('‚úÖ √Årea de lembretes para crian√ßas ativada');
        }
        
        if (areaPais) {
            areaPais.style.display = 'none';
            console.log('üö´ √Årea de lembretes para pais escondida');
        }
        
        // ‚ú® CORRE√á√ÉO: Aguardar carregamento das crian√ßas antes de preencher o select
        if (filhos.length > 0) {
            carregarSelectCriancas();
        } else {
            // Se as crian√ßas ainda n√£o foram carregadas, aguardar
            console.log('‚è≥ Aguardando carregamento das crian√ßas...');
            setTimeout(() => {
                if (filhos.length > 0) {
                    carregarSelectCriancas();
                } else {
                    console.log('‚ö†Ô∏è Crian√ßas ainda n√£o carregadas, tentando novamente...');
                    // Tentar novamente ap√≥s mais tempo
                    setTimeout(carregarSelectCriancas, 2000);
                }
            }, 1000);
        }
        
        // Configurar eventos para crian√ßas
        configurarEventosLembretesCriancas();
        
    } else {
        // Modo Pais/Admin: Mostrar √°rea para visualizar e gerenciar lembretes
        console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Configurando lembretes para pais/admin...');
        
        if (areaCriancas) {
            areaCriancas.style.display = 'none';
            console.log('üö´ √Årea de lembretes para crian√ßas escondida');
        }
        
        if (areaPais) {
            areaPais.style.display = 'block';
            console.log('‚úÖ √Årea de lembretes para pais ativada');
            
            // Verificar se o elemento lista-lembretes existe dentro da √°rea de pais
            const listaLembretes = areaPais.querySelector('#lista-lembretes');
            console.log('üéØ Elemento lista-lembretes encontrado na √°rea de pais:', !!listaLembretes);
        } else {
            console.error('‚ùå √Årea de lembretes para pais n√£o encontrada!');
        }
        
        // Carregar lembretes do servidor com pequeno delay para garantir que a √°rea esteja vis√≠vel
        console.log('‚è∞ Agendando carregamento de lembretes...');
        setTimeout(() => {
            console.log('üîç Executando carregarLembretes()...');
            carregarLembretes();
        }, 100);
        
        // Configurar eventos para pais/admin
        configurarEventosLembretesPais();
    }
}

// ‚ú® NOVAS FUN√á√ïES: Gerenciamento de Lembretes

// Carregar lista de crian√ßas no select para visitantes
function carregarSelectCriancas() {
    const selectCrianca = document.getElementById('lembrete-crianca');
    if (!selectCrianca) {
        console.log('‚ö†Ô∏è Select de crian√ßas n√£o encontrado');
        return;
    }
    
    // Verificar se h√° crian√ßas dispon√≠veis
    if (!filhos || filhos.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma crian√ßa dispon√≠vel para carregar no select');
        selectCrianca.innerHTML = '<option value="">Nenhuma crian√ßa cadastrada...</option>';
        return;
    }
    
    // Limpar op√ß√µes existentes
    selectCrianca.innerHTML = '<option value="">Selecione uma crian√ßa...</option>';
    
    // Adicionar op√ß√µes baseadas nas crian√ßas dispon√≠veis
    filhos.forEach(filho => {
        const option = document.createElement('option');
        option.value = filho.nome;
        option.textContent = `${filho.emoji} ${filho.nome}`;
        selectCrianca.appendChild(option);
    });
    
    console.log('‚úÖ Select de crian√ßas carregado:', filhos.length, 'crian√ßas');
    
    // Atualizar estado do bot√£o de enviar
    const btnEnviar = document.getElementById('btn-enviar-lembrete');
    const textareaMensagem = document.getElementById('lembrete-mensagem');
    if (btnEnviar && textareaMensagem) {
        const temCrianca = selectCrianca.value;
        const temMensagem = textareaMensagem.value.length > 0;
        btnEnviar.disabled = !(temCrianca && temMensagem);
    }
}

// Configurar eventos para crian√ßas (modo visitante)
function configurarEventosLembretesCriancas() {
    const btnEnviar = document.getElementById('btn-enviar-lembrete');
    const textareaMensagem = document.getElementById('lembrete-mensagem');
    const charCount = document.querySelector('.char-count');
    
    if (btnEnviar) {
        btnEnviar.addEventListener('click', handleEnviarLembrete);
    }
    
    if (textareaMensagem && charCount) {
        textareaMensagem.addEventListener('input', function() {
            const length = this.value.length;
            charCount.textContent = `${length}/500 caracteres`;
            
            // Desabilitar bot√£o se n√£o h√° texto ou crian√ßa selecionada
            const selectCrianca = document.getElementById('lembrete-crianca');
            const temCrianca = selectCrianca && selectCrianca.value;
            const temMensagem = length > 0;
            
            if (btnEnviar) {
                btnEnviar.disabled = !(temCrianca && temMensagem);
            }
        });
    }
    
    // Atualizar bot√£o quando crian√ßa for selecionada
    const selectCrianca = document.getElementById('lembrete-crianca');
    if (selectCrianca) {
        selectCrianca.addEventListener('change', function() {
            if (btnEnviar && textareaMensagem) {
                const temCrianca = this.value;
                const temMensagem = textareaMensagem.value.length > 0;
                btnEnviar.disabled = !(temCrianca && temMensagem);
            }
        });
    }
    
    console.log('‚úÖ Eventos de lembretes para crian√ßas configurados');
}

// Enviar lembrete (modo visitante)
async function handleEnviarLembrete() {
    const selectCrianca = document.getElementById('lembrete-crianca');
    const textareaMensagem = document.getElementById('lembrete-mensagem');
    const btnEnviar = document.getElementById('btn-enviar-lembrete');
    
    if (!selectCrianca || !textareaMensagem) return;
    
    const crianca = selectCrianca.value;
    const mensagem = textareaMensagem.value.trim();
    
    if (!crianca || !mensagem) {
        mostrarNotificacao('‚ùå Selecione uma crian√ßa e escreva uma mensagem!', 'error');
        return;
    }
    
    if (mensagem.length > 500) {
        mostrarNotificacao('‚ùå A mensagem deve ter no m√°ximo 500 caracteres!', 'error');
        return;
    }
    
    try {
        // Desabilitar bot√£o durante envio
        if (btnEnviar) {
            btnEnviar.disabled = true;
            btnEnviar.textContent = 'üì§ Enviando...';
        }
        
        const response = await ApiService.post('/api/lembretes', {
            crianca: crianca,
            mensagem: mensagem
        });
        
        if (response && response.success) {
            mostrarNotificacao('‚úÖ Lembrete enviado com sucesso!', 'success');
            
            // Limpar formul√°rio
            selectCrianca.value = '';
            textareaMensagem.value = '';
            document.querySelector('.char-count').textContent = '0/500 caracteres';
            
            // Reabilitar bot√£o
            if (btnEnviar) {
                btnEnviar.disabled = true; // Desabilitado at√© preencher novamente
                btnEnviar.textContent = 'üì§ Enviar Lembrete';
            }
        } else {
            throw new Error(response?.error || 'Erro ao enviar lembrete');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao enviar lembrete:', error);
        mostrarNotificacao(`‚ùå Erro ao enviar lembrete: ${error.message}`, 'error');
        
        // Reabilitar bot√£o
        if (btnEnviar) {
            btnEnviar.disabled = false;
            btnEnviar.textContent = 'üì§ Enviar Lembrete';
        }
    }
}

// Carregar lembretes do servidor (modo pais/admin)
async function carregarLembretes() {
    console.log('üöÄ FUN√á√ÉO carregarLembretes() INICIADA');
    try {
        console.log('üîç Carregando lembretes do servidor...');
        const response = await ApiService.get('/api/lembretes');
        
        console.log('üì° Resposta da API de lembretes:', response);
        
        console.log('üîç Verificando resposta...');
        console.log('üì° Response completo:', response);
        console.log('üì° Response.success:', response?.success);
        console.log('üì° Response.data:', response?.data);
        console.log('üì° Response.lembretes:', response?.lembretes);
        
        // Verificar se os lembretes est√£o em response.data ou response.lembretes
        let lembretesData = null;
        if (response?.data?.lembretes) {
            lembretesData = response.data.lembretes;
            console.log('üìù Lembretes encontrados em response.data.lembretes');
        } else if (response?.lembretes) {
            lembretesData = response.lembretes;
            console.log('üìù Lembretes encontrados em response.lembretes');
        }
        
        if (response && response.success && lembretesData) {
            lembretes = lembretesData;
            console.log('üìù Lembretes carregados:', lembretes.length);
            console.log('üìä Dados dos lembretes:', lembretes);
            renderizarLembretes();
            atualizarContadorLembretes();
        } else {
            console.error('‚ùå Erro ao carregar lembretes:', response?.error || 'Estrutura de resposta inv√°lida');
            console.log('‚ùå Response n√£o tem success ou lembretes v√°lidos');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar lembretes:', error);
    }
}

// Renderizar lista de lembretes
function renderizarLembretes() {
    console.log('üîç Renderizando lembretes...');
    console.log('üìä Estado atual dos lembretes:', lembretes);
    
    const listaLembretes = document.getElementById('lista-lembretes');
    console.log('üéØ Elemento lista-lembretes encontrado:', !!listaLembretes);
    
    if (!listaLembretes) {
        console.error('‚ùå Elemento #lista-lembretes n√£o encontrado no DOM');
        return;
    }
    
    if (lembretes.length === 0) {
        console.log('üìù Nenhum lembrete para renderizar');
        listaLembretes.innerHTML = `
            <div class="lembrete-vazio">
                <p>üìù Nenhum lembrete encontrado</p>
                <small>As crian√ßas ainda n√£o enviaram lembretes</small>
            </div>
        `;
        return;
    }
    
    console.log('üé® Renderizando', lembretes.length, 'lembretes...');
    
    // Ordenar lembretes: n√£o lidos primeiro, depois por data (mais recente primeiro)
    const lembretesOrdenados = [...lembretes].sort((a, b) => {
        if (a.lido !== b.lido) return a.lido ? 1 : -1; // N√£o lidos primeiro
        return new Date(b.dataEnvio) - new Date(a.dataEnvio); // Mais recente primeiro
    });
    
    listaLembretes.innerHTML = lembretesOrdenados.map(lembrete => {
        const data = new Date(lembrete.dataEnvio);
        const dataFormatada = data.toLocaleDateString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        const statusClass = lembrete.lido ? 'lido' : '';
        const statusText = lembrete.lido ? '‚úÖ Lido' : 'üìù Novo';
        const statusIcon = lembrete.lido ? '‚úÖ' : 'üìù';
        
        return `
            <div class="lembrete-item ${statusClass}" data-id="${lembrete.id}">
                <div class="lembrete-header">
                    <div class="lembrete-info">
                        <div class="lembrete-crianca">${lembrete.crianca}</div>
                        <div class="lembrete-data">${dataFormatada}</div>
                    </div>
                    <div class="lembrete-acoes">
                        <button class="btn btn-marcar-lido ${lembrete.lido ? 'lido' : ''}" 
                                onclick="marcarLembreteComoLido(${lembrete.id})" 
                                ${lembrete.lido ? 'disabled' : ''}>
                            ${statusIcon} ${statusText}
                        </button>
                    </div>
                </div>
                <div class="lembrete-mensagem">${lembrete.mensagem}</div>
            </div>
        `;
    }).join('');
    
    console.log('‚úÖ Lista de lembretes renderizada:', lembretesOrdenados.length);
}

// Atualizar contador de lembretes n√£o lidos
function atualizarContadorLembretes() {
    const contador = document.getElementById('contador-lembretes');
    if (!contador) return;
    
    const naoLidos = lembretes.filter(l => !l.lido).length;
    contador.textContent = `${naoLidos} n√£o lidos`;
    
    // Adicionar anima√ß√£o se h√° lembretes n√£o lidos
    if (naoLidos > 0) {
        contador.style.animation = 'pulse 2s infinite';
    } else {
        contador.style.animation = 'none';
    }
}

// Marcar lembrete como lido
async function marcarLembreteComoLido(id) {
    try {
        const response = await ApiService.put(`/api/lembretes/${id}/lido`, {
            lidoPor: 'Respons√°vel'
        });
        
        if (response && response.success) {
            // Atualizar lembrete local
            const lembrete = lembretes.find(l => l.id === id);
            if (lembrete) {
                lembrete.lido = true;
                lembrete.dataLeitura = new Date();
                lembrete.lidoPor = 'Respons√°vel';
            }
            
            mostrarNotificacao('‚úÖ Lembrete marcado como lido!', 'success');
            renderizarLembretes();
            atualizarContadorLembretes();
        } else {
            throw new Error(response?.error || 'Erro ao marcar como lido');
        }
    } catch (error) {
        console.error('‚ùå Erro ao marcar lembrete como lido:', error);
        mostrarNotificacao(`‚ùå Erro: ${error.message}`, 'error');
    }
}

// Limpar lembretes lidos
async function limparLembretesLidos() {
    try {
        const response = await ApiService.delete('/api/lembretes/limpar-lidos');
        
        if (response && response.success) {
            // Remover lembretes lidos do array local
            lembretes = lembretes.filter(l => !l.lido);
            
            mostrarNotificacao(`üßπ ${response.removidos} lembretes lidos removidos!`, 'success');
            renderizarLembretes();
            atualizarContadorLembretes();
        } else {
            throw new Error(response?.error || 'Erro ao limpar lembretes');
        }
    } catch (error) {
        console.error('‚ùå Erro ao limpar lembretes:', error);
        mostrarNotificacao(`‚ùå Erro: ${error.message}`, 'error');
    }
}

// Configurar eventos para pais/admin
function configurarEventosLembretesPais() {
    const btnLimpar = document.getElementById('btn-limpar-lembretes');
    
    if (btnLimpar) {
        btnLimpar.addEventListener('click', limparLembretesLidos);
    }
    
    console.log('‚úÖ Eventos de lembretes para pais configurados');
}

// ‚ú® NOVA: Fun√ß√£o global para for√ßar atualiza√ß√£o do select de crian√ßas
window.atualizarSelectLembretes = function() {
    console.log('üîÑ For√ßando atualiza√ß√£o do select de crian√ßas para lembretes...');
    carregarSelectCriancas();
};

// Fun√ß√£o para controlar elementos admin-only
function controlarElementosAdmin(userType) {
    const isAdmin = userType === 'admin';
    const adminElements = document.querySelectorAll('.admin-only');
    
    console.log(`üîê CONTROLE ADMIN-ONLY:`);
    console.log(`- Tipo de usu√°rio: ${userType}`);
    console.log(`- √â admin: ${isAdmin}`);
    console.log(`- Elementos encontrados: ${adminElements.length}`);
    
    adminElements.forEach((element, index) => {
        const elementInfo = element.id || element.textContent?.trim() || `elemento-${index}`;
        
        if (isAdmin) {
            element.classList.add('visible');
            element.style.display = 'inline-block';
            console.log(`‚úÖ LIBERADO: ${elementInfo}`);
        } else {
            element.classList.remove('visible');
            element.style.display = 'none';
            console.log(`‚ùå BLOQUEADO: ${elementInfo}`);
        }
    });
    
    console.log(`üîê Controle finalizado para usu√°rio tipo: ${userType}`);
}

// Fun√ß√£o para solicitar tipo de usu√°rio
// ‚ú® NOVO: Utilit√°rio de autentica√ß√£o
window.AuthUtils = {
    isLoggedIn: function() {
        const session = localStorage.getItem('userSession');
        if (!session) return false;
        
        try {
            const userData = JSON.parse(session);
            return userData && userData.type && userData.nome;
        } catch (error) {
            console.error('‚ùå Erro ao verificar sess√£o:', error);
            return false;
        }
    },
    
    getSession: function() {
        const session = localStorage.getItem('userSession');
        if (!session) return null;
        
        try {
            return JSON.parse(session);
        } catch (error) {
            console.error('‚ùå Erro ao obter sess√£o:', error);
            return null;
        }
    },
    
    getCurrentUser: function() {
        return this.getSession();
    },
    
    logout: function() {
        // Adicionar log de logout
        const session = JSON.parse(localStorage.getItem('userSession') || '{}');
        adicionarLog('logout', {
            perfil: session.type,
            nome_usuario: session.nome,
            timestamp_logout: new Date().toISOString()
        });
        
        // Remover sess√£o e redirecionar para login
        localStorage.removeItem('userSession');
        window.location.href = '/login.html';
    }
};

// Estado global
let filhos = []; // Array din√¢mico de filhos
let atividadesPositivas = []; // Atividades que ganham pontos
let atividadesNegativas = []; // Atividades que perdem pontos
let historico = [];
let pontos = {}; // Objeto para armazenar pontos dos filhos
let logs = []; // Sistema de log para todas as a√ß√µes
let lembretes = []; // ‚ú® NOVO: Array para lembretes das crian√ßas

// ‚ú® NOVO: Flag para controlar sincroniza√ß√£o
let bloqueiarSincronizacao = false;

// ‚ú® NOVO: Sistema de controle de notifica√ß√µes para evitar spam
let ultimaSincronizacao = 0;
let ultimoSalvamento = 0;
const INTERVALO_MINIMO_LOGS = 30000; // 30 segundos entre logs similares

// Sistema de Sincroniza√ß√£o com Backend
const API_BASE = window.location.origin;

// Fun√ß√£o para fazer requisi√ß√µes ao backend
// Sincronizar dados com o servidor
async function sincronizarDados() {
    // ‚ú® NOVO: N√£o sincronizar se h√° mudan√ßas pendentes
    if (bloqueiarSincronizacao) {
        console.log('üö´ Sincroniza√ß√£o pausada - editando configura√ß√µes');
        return;
    }

    try {
        const agora = Date.now();
        // ‚ú® Log controlado para sincroniza√ß√£o
        const mostrarLogs = agora - ultimaSincronizacao > INTERVALO_MINIMO_LOGS;
        
        if (mostrarLogs) {
            console.log('üîÑ Iniciando sincroniza√ß√£o de dados...');
        }
        
        // Carregar pontos do servidor
        const pontosServidor = await ApiService.get('/api/pontos');
        if (pontosServidor) {
            pontos = pontosServidor;
            if (mostrarLogs) {
                console.log('üìä Pontos carregados do servidor:', pontos);
            }
        }
        
        // Carregar e sincronizar crian√ßas baseadas nos pontos
        const criancasServidor = await ApiService.get('/api/sincronizar-criancas');
        if (mostrarLogs) {
            console.log('üîç Resposta do servidor para crian√ßas:', criancasServidor);
        }
        
        // ‚ú® CORRE√á√ÉO CR√çTICA: Verificar estrutura correta da resposta da API
        let criancasData = null;
        if (criancasServidor && criancasServidor.success) {
            // ApiService retorna {success: true, data: {...}}
            if (criancasServidor.data && criancasServidor.data.criancas) {
                criancasData = criancasServidor.data.criancas;
            } else if (criancasServidor.data && Array.isArray(criancasServidor.data)) {
                criancasData = criancasServidor.data;
            } else if (criancasServidor.criancas) {
                // Fallback: resposta direta do servidor
                criancasData = criancasServidor.criancas;
            }
        }
        
        if (criancasData && criancasData.length > 0) {
            if (mostrarLogs) {
                console.log('üîç Crian√ßas encontradas no servidor:', criancasData.length);
            }
            
            // ‚ú® CORRE√á√ÉO CR√çTICA: Merge inteligente preservando mudan√ßas locais
            const filhosAnteriores = [...filhos];
            const filhosServidor = criancasData.map(crianca => {
                // Se a cor for uma string simples, criar o objeto cor completo
                if (typeof crianca.cor === 'string') {
                    const corObj = coresDisponiveis.find(c => c.valor === crianca.cor) || 
                                   coresDisponiveis[0]; // fallback para primeira cor
                    
                    return {
                        ...crianca,
                        cor: corObj
                    };
                }
                return crianca;
            });
            
            // Usar apenas dados do servidor - sem preservar dados locais
            
            // Usar apenas dados do servidor - sem preservar dados locais
            if (mostrarLogs) {
                console.log('üìä Usando apenas dados do MongoDB');
            }
            
            // Usar apenas dados do servidor (MongoDB)
            filhos = [...filhosServidor];
            
            if (mostrarLogs) {
                console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Crian√ßas do servidor (MongoDB):', filhos.length);
            }
            
            // N√£o salvar no localStorage - usar apenas MongoDB
            if (mostrarLogs) {
                console.log('üíæ Crian√ßas salvas no localStorage');
            }
            
            // ‚ú® NOVO: Atualizar select de crian√ßas para lembretes se necess√°rio
            if (typeof carregarSelectCriancas === 'function') {
                carregarSelectCriancas();
            }
        } else {
            if (mostrarLogs) {
                console.log('‚ö†Ô∏è Nenhuma crian√ßa retornada do servidor ou erro na resposta');
                console.log('üîç Debug - resposta completa:', criancasServidor);
            }
            
            // Usar apenas dados do servidor - sem fallback local
            filhos = [];
            if (mostrarLogs) {
                console.log('üì± Nenhum dado no servidor - lista vazia');
            }
        }
        
        if (mostrarLogs) {
            console.log('‚úÖ Dados sincronizados com o servidor');
        }
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao sincronizar dados:', error);
        return false;
    }
}

// ‚ú® NOVA FUN√á√ÉO: Sincroniza√ß√£o manual com feedback visual
async function sincronizarManualmente() {
    console.log('üîÑ === INICIANDO SINCRONIZA√á√ÉO MANUAL ===');
    
    // ‚ú® REFATORADO: Usar DomUtils para acesso DOM
    const btnAtualizar = DomUtils.getElement('btn-atualizar');
    console.log('üîç Elemento btn-atualizar encontrado:', !!btnAtualizar);
    
    try {
        // ‚ú® VISUAL: Feedback no bot√£o se existir
        if (btnAtualizar) {
            btnAtualizar.classList.add('sincronizando');
            btnAtualizar.innerHTML = 'üîÑ Sincronizando...';
            btnAtualizar.disabled = true;
        }
        
        mostrarNotificacao('üîÑ Sincronizando dados...', 'info');
        
        // For√ßar sincroniza√ß√£o completa
        console.log('üîÑ === SINCRONIZA√á√ÉO MANUAL INICIADA ===');
        const sincronizado = await sincronizarDados();
        
        if (sincronizado) {
            // Atualizar interface
            atualizarInterface();
            
            // Salvar dados tamb√©m
            await salvarDados();
            
            mostrarNotificacao('‚úÖ Dados sincronizados com sucesso!', 'success');
            console.log('‚úÖ === SINCRONIZA√á√ÉO MANUAL CONCLU√çDA ===');
        } else {
            mostrarNotificacao('‚ùå Erro na sincroniza√ß√£o', 'error');
        }
        
    } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o manual:', error);
        mostrarNotificacao('‚ùå Erro na sincroniza√ß√£o', 'error');
    } finally {
        // ‚ú® LIMPEZA: Restaurar bot√£o se existir
        if (btnAtualizar) {
            btnAtualizar.classList.remove('sincronizando');
            btnAtualizar.innerHTML = 'üîÑ Atualizar';
            btnAtualizar.disabled = false;
        }
        
        console.log('üîÑ === SINCRONIZA√á√ÉO MANUAL FINALIZADA ===');
    }
}

// ‚ú® NOVA FUN√á√ÉO: Gerenciamento de opera√ß√µes pendentes
// ‚ú® REMOVIDO: Sistema de opera√ß√µes pendentes - tudo na nuvem agora
let operacoesPendentes = [];

function adicionarOperacaoPendente(operacao) {
    // Opera√ß√µes s√£o processadas imediatamente na nuvem
    console.log(`‚òÅÔ∏è Opera√ß√£o processada na nuvem: ${operacao.tipo} ${operacao.pontos} pontos para ${operacao.nome}`);
}

function limparOperacoesPendentes() {
    operacoesPendentes = [];
    console.log('üßπ Opera√ß√µes pendentes limpas');
}

function carregarOperacoesPendentes() {
    // N√£o h√° opera√ß√µes pendentes - tudo √© processado na nuvem
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - sem opera√ß√µes pendentes');
}

// ‚ú® NOVA FUN√á√ÉO: Verificar status do servidor
async function verificarStatusServidor() {
    try {
        const response = await fetch('/api/status');
        const status = await response.json();
        
        console.log('üîç Status do servidor:', status);
        
        // Atualizar indicador de status na interface
        atualizarIndicadorStatus(status.online);
        
        return status.online;
    } catch (error) {
        console.error('‚ùå Erro ao verificar status:', error);
        atualizarIndicadorStatus(false);
        return false;
    }
}

// ‚ú® NOVA FUN√á√ÉO: Atualizar indicador de status
function atualizarIndicadorStatus(online) {
    const statusIndicator = document.getElementById('status-indicator');
    const statusText = document.getElementById('status-text');
    
    if (statusIndicator && statusText) {
        if (online) {
            statusIndicator.className = 'status-indicator online';
            statusText.textContent = 'üü¢ Online';
            statusText.className = 'status-text online';
        } else {
            statusIndicator.className = 'status-indicator offline';
            statusText.textContent = 'üî¥ Offline';
            statusText.className = 'status-text offline';
        }
    }
}

// ‚ú® NOVA FUN√á√ÉO: Sincroniza√ß√£o inteligente ap√≥s cada a√ß√£o
async function sincronizarAposAcao(acao) {
    try {
        // Verificar status primeiro
        const online = await verificarStatusServidor();
        
        if (!online) {
            console.log('‚ö†Ô∏è Servidor offline - opera√ß√£o salva localmente');
            return;
        }
        
        // N√£o sincronizar se j√° est√° sincronizando ou se h√° bloqueio
        if (bloqueiarSincronizacao) {
            console.log('üö´ Sincroniza√ß√£o p√≥s-a√ß√£o cancelada - j√° em andamento');
            return;
        }
        
        // Log controlado para a√ß√µes
        console.log(`üîÑ Sincronizando ap√≥s: ${acao}`);
        
        // Primeiro, tentar sincronizar opera√ß√µes pendentes
        if (operacoesPendentes.length > 0) {
            await sincronizarOperacoesPendentes();
        }
        
        // Depois, sincronizar dados gerais
        const resultado = await sincronizarDados();
        
        if (resultado) {
            // Atualizar interface apenas se a sincroniza√ß√£o foi bem-sucedida
            atualizarInterface();
            console.log(`‚úÖ Sincroniza√ß√£o p√≥s-a√ß√£o conclu√≠da: ${acao}`);
        } else {
            console.log(`‚ö†Ô∏è Sincroniza√ß√£o p√≥s-a√ß√£o falhou: ${acao}`);
        }
        
    } catch (error) {
        console.error(`‚ùå Erro na sincroniza√ß√£o p√≥s-a√ß√£o (${acao}):`, error);
    }
}

// ‚ú® NOVA FUN√á√ÉO: Sincronizar opera√ß√µes pendentes
async function sincronizarOperacoesPendentes() {
    if (operacoesPendentes.length === 0) return true;
    
    try {
        console.log(`üîÑ Sincronizando ${operacoesPendentes.length} opera√ß√µes pendentes...`);
        
        const response = await fetch('/api/sincronizar-pendentes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ operacoesPendentes })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log(`‚úÖ ${result.data.sincronizadas} opera√ß√µes sincronizadas com sucesso`);
            
            // Limpar opera√ß√µes sincronizadas
            limparOperacoesPendentes();
            
            // Mostrar notifica√ß√£o se houve falhas
            if (result.data.falharam > 0) {
                mostrarNotificacao(`‚ö†Ô∏è ${result.data.falharam} opera√ß√µes falharam na sincroniza√ß√£o`, 'warning');
            }
            
            return true;
        } else {
            console.error('‚ùå Erro na sincroniza√ß√£o de opera√ß√µes pendentes:', result.message);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao sincronizar opera√ß√µes pendentes:', error);
        return false;
    }
}

// Salvar dados no servidor
async function salvarNoServidor() {
    try {
        // ‚ú® PROTE√á√ÉO CR√çTICA: N√£o salvar se n√£o h√° filhos carregados
        if (!filhos || filhos.length === 0) {
            console.log('‚ö†Ô∏è Nenhum filho carregado, n√£o h√° dados para salvar');
            return true; // Retornar sucesso para n√£o bloquear o fluxo
        }
        
        // ‚ú® CORRE√á√ÉO CR√çTICA: Sincronizar pontos dos filhos para objeto global
        const pontosLimpos = {};
        
        // Primeiro, atualizar objeto pontos global com dados dos filhos
        filhos.forEach(filho => {
            if (filho.nome && typeof filho.pontos === 'number') {
                pontos[filho.nome.toLowerCase()] = filho.pontos;
                pontosLimpos[filho.nome.toLowerCase()] = filho.pontos;
            }
        });
        
        // Se ainda n√£o temos dados dos filhos, usar dados do objeto pontos
        if (Object.keys(pontosLimpos).length === 0) {
            for (const [nome, valor] of Object.entries(pontos)) {
                // Apenas incluir se for um nome v√°lido e valor num√©rico
                if (typeof nome === 'string' && typeof valor === 'number' && nome !== 'success') {
                    pontosLimpos[nome] = valor;
                }
            }
        }
        
        // ‚ú® PROTE√á√ÉO: N√£o enviar se n√£o temos dados v√°lidos
        if (Object.keys(pontosLimpos).length === 0) {
            console.log('‚ö†Ô∏è Nenhum dado v√°lido para salvar no servidor');
            return true; // Retornar sucesso para n√£o bloquear o fluxo
        }
        
        console.log('üíæ Salvando dados v√°lidos:', pontosLimpos);
        
        // Salvar pontos limpos
        await ApiService.post('/api/pontos', pontosLimpos);
        
        // ‚úÖ IMPLEMENTADO: Salvamento individual de hist√≥rico via ApiService.salvarHistorico()
        // (Chamado automaticamente nas opera√ß√µes de pontos)
        
        console.log('‚úÖ Dados salvos no servidor');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao salvar no servidor:', error);
        return false;
    }
}

// Sistema de Log
function adicionarLog(acao, detalhes = {}) {
    // Obter informa√ß√µes da sess√£o do usu√°rio
    const session = JSON.parse(localStorage.getItem('userSession') || '{}');
    
    // Criar timestamp detalhado
    const agora = new Date();
    const timestamp = agora.toISOString();
    const dataFormatada = agora.toLocaleDateString('pt-BR');
    const horaFormatada = agora.toLocaleTimeString('pt-BR');
    
    // Determinar perfil e respons√°vel
    let perfil = 'Visitante';
    let responsavel = 'N√£o identificado';
    
    if (session.type) {
        perfil = session.type === 'admin' ? 'Administrador' : 
                session.type === 'pai' ? 'Pai/M√£e' : 
                session.type === 'crianca' ? 'Crian√ßa' : 'Visitante';
        
        responsavel = session.nome || session.type || 'Usu√°rio sem nome';
    }
    
    const log = {
        id: Date.now() + Math.floor(Math.random() * 1000),
        timestamp: timestamp,
        data: dataFormatada,
        horario: horaFormatada,
        data_completa: agora.toLocaleString('pt-BR'),
        acao: acao,
        perfil: perfil,
        responsavel: responsavel,
        usuario_id: session.userId || null,
        detalhes: detalhes,
        ip: 'local', // Para app local
        versao_app: '2.0',
        dispositivo: navigator.userAgent || 'Desconhecido'
    };
    
    logs.push(log);
    
    // ‚ú® NOVO: Salvar logs localmente e no MongoDB
    salvarLogs();
    
    console.log('üìã Log detalhado adicionado:', {
        acao: log.acao,
        perfil: log.perfil,
        responsavel: log.responsavel,
        data: log.data,
        horario: log.horario
    });
}

// ‚ú® REMOVIDO: salvarLogs() e carregarLogs() antigos (substitu√≠dos pelas vers√µes MongoDB)

// ‚ú® CORRE√á√ÉO: Sincroniza√ß√£o autom√°tica mais inteligente (executa a cada 2 minutos)
let intervalId = null;

function iniciarSincronizacaoAutomatica() {
    // Evitar m√∫ltiplos intervalos
    if (intervalId) {
        clearInterval(intervalId);
    }
    
    intervalId = setInterval(async () => {
        // ‚ú® NOVO: N√£o sincronizar se h√° mudan√ßas pendentes ou se est√° editando
        if (bloqueiarSincronizacao) {
            console.log('üö´ Sincroniza√ß√£o autom√°tica pausada - editando dados');
            return;
        }
        
        if (navigator.onLine) {
            const agora = Date.now();
            // ‚ú® Log controlado para sincroniza√ß√£o autom√°tica
            if (agora - ultimaSincronizacao > INTERVALO_MINIMO_LOGS) {
                console.log('üîÑ Sincroniza√ß√£o autom√°tica iniciada...');
                ultimaSincronizacao = agora;
            }
            
            const sincronizado = await sincronizarDados();
            if (sincronizado) {
                // Atualizar pontos dos filhos com dados do servidor
                filhos.forEach(filho => {
                    if (pontos[filho.nome] !== undefined && pontos[filho.nome] !== filho.pontos) {
                        filho.pontos = pontos[filho.nome];
                    }
                });
                atualizarInterface();
                
                // ‚ú® Log controlado para conclus√£o
                if (agora - ultimaSincronizacao <= INTERVALO_MINIMO_LOGS) {
                    console.log('‚úÖ Sincroniza√ß√£o autom√°tica conclu√≠da');
                }
            }
        } else {
            console.log('üì± Offline - sincroniza√ß√£o autom√°tica pulada');
        }
    }, 120000); // 2 minutos ao inv√©s de 30 segundos
}

// Detectar quando volta a ter internet
window.addEventListener('online', async () => {
    console.log('üåê Conex√£o restaurada, sincronizando dados...');
    mostrarNotificacao('üåê Sincronizando dados...', 'info');
    await sincronizarDados();
    await salvarDados();
    mostrarNotificacao('‚úÖ Dados sincronizados!', 'success');
}, 'Conex√£o online restaurada');

window.addEventListener('offline', () => {
    console.log('üì± Modo offline - dados salvos localmente');
    // Removida notifica√ß√£o redundante de modo offline
}, 'Modo offline');

// Cores dispon√≠veis para os filhos
const coresDisponiveis = [
    { nome: 'Azul', valor: '#4facfe', gradiente: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)' },
    { nome: 'Rosa', valor: '#f093fb', gradiente: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' },
    { nome: 'Verde', valor: '#4ecdc4', gradiente: 'linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%)' },
    { nome: 'Laranja', valor: '#ffecd2', gradiente: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)' },
    { nome: 'Roxo', valor: '#a8edea', gradiente: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)' },
    { nome: 'Vermelho', valor: '#ff9a9e', gradiente: 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)' },
    { nome: 'Amarelo', valor: '#ffeaa7', gradiente: 'linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%)' },
    { nome: 'Ciano', valor: '#74b9ff', gradiente: 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)' }
];

// Fun√ß√£o para inicializar a aplica√ß√£o (chamada ap√≥s verifica√ß√£o de autentica√ß√£o)
async function inicializarApp() {
    console.log('üöÄ Inicializando aplica√ß√£o...');
    
    try {
        await carregarDados();
        console.log('üìä Dados carregados, filhos encontrados:', filhos.length);
        
        configurarEventos();
        console.log('‚öôÔ∏è Eventos configurados');

        // Controlar elementos admin-only
        const currentUser = JSON.parse(localStorage.getItem('userSession') || '{}');
        controlarElementosAdmin(currentUser.type || 'guest');
        console.log('üîê Controle de elementos admin aplicado');

        await atualizarTela();
        console.log('üì∫ Interface atualizada');
        
        // ‚ú® CORRE√á√ÉO: Logs j√° s√£o carregados na fun√ß√£o carregarDados() via sincronizarLogs()
        console.log('üìã Logs j√° sincronizados na inicializa√ß√£o');
        
        // Inicializar sincroniza√ß√£o autom√°tica inteligente
        setTimeout(() => {
            console.log('üîå Inicializando sincroniza√ß√£o autom√°tica...');
            iniciarSincronizacaoAutomatica();
        }, 5000); // Delay de 5 segundos para evitar conflitos na inicializa√ß√£o
        
        // Comentado para evitar inicializa√ß√£o duplicada do WebSocket
        // O WebSocket j√° √© inicializado pelo websocket-sync.js
        // setTimeout(() => {
        //     console.log('üîå Inicializando WebSocket...');
        //     inicializarWebSocket();
        // }, 6000);
        
        // ‚ú® NOVO: Sincroniza√ß√£o inicial autom√°tica ap√≥s login
        setTimeout(async () => {
            console.log('üîÑ Sincroniza√ß√£o inicial ap√≥s login...');
            await sincronizarAposAcao('login inicial');
        }, 7000);
        
        console.log('‚úÖ Aplica√ß√£o inicializada com sucesso!');
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
    }
}

// Inicializa√ß√£o original (ser√° removida pela nova estrutura de autentica√ß√£o)
// Inicializa√ß√£o original (desativada - agora controlada por autentica√ß√£o)
// ‚ú® ATUALIZADA: Carregar dados com verifica√ß√£o de status
async function carregarDados() {
    console.log('üîç Carregando dados...');
    
    // Verificar status do servidor primeiro
    const online = await verificarStatusServidor();
    
    if (online) {
        // Servidor online - carregar apenas do MongoDB
        console.log('üü¢ Servidor online - carregando do MongoDB');
        const sincronizado = await sincronizarDados();
        
        if (sincronizado) {
            console.log('‚úÖ Dados sincronizados com o servidor');
        } else {
            console.log('‚ö†Ô∏è Falha na sincroniza√ß√£o, usando dados locais');
            carregarDoLocalStorage();
        }
    } else {
        // Servidor offline - usar dados locais
        console.log('üî¥ Servidor offline - usando dados locais');
        carregarDoLocalStorage();
    }
    
    // ‚ú® NOVA: Carregar atividades do MongoDB ou localStorage
    await sincronizarAtividades();
    
    // ‚ú® NOVA: Carregar logs do MongoDB ou localStorage
    await sincronizarLogs();
    
    // Ordem alfab√©tica para atividades
    atividadesPositivas.sort((a, b) => a.nome.localeCompare(b.nome));
    atividadesNegativas.sort((a, b) => a.nome.localeCompare(b.nome));
    
    // Atualizar interface
    atualizarInterface();
    atualizarListaAtividades();
    atualizarSelectsAtividades();
    console.log('üìä Tabela de pontos carregada');
}

// ‚ú® REMOVIDO: Carregamento do localStorage - tudo na nuvem agora
function carregarDoLocalStorage() {
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - sem localStorage');
    // Todos os dados s√£o carregados diretamente do MongoDB
}

// ‚ú® REFATORADO: Salvar dados apenas na nuvem
async function salvarDados(forcado = false) {
    const agora = Date.now();
    
    // Atualizar pontos baseado nos filhos (SEMPRE usar min√∫sculo para consist√™ncia)
    filhos.forEach(filho => {
        pontos[filho.nome.toLowerCase()] = filho.pontos || 0;
    });
    
    // Salvar apenas no servidor (MongoDB)
    const salvouServidor = await salvarNoServidor();
    if (salvouServidor && (forcado || agora - ultimoSalvamento > INTERVALO_MINIMO_LOGS)) {
        console.log('‚òÅÔ∏è Dados salvos na nuvem (MongoDB)');
        ultimoSalvamento = agora;
    } else if (!salvouServidor && (forcado || agora - ultimoSalvamento > INTERVALO_MINIMO_LOGS)) {
        console.log('‚ùå Erro ao salvar na nuvem - verifique a conex√£o');
        mostrarNotificacao('Erro ao salvar na nuvem. Verifique sua conex√£o.', 'error');
    }
}

// Atualizar tela quando necess√°rio
async function atualizarTela() {
    console.log('üì∫ Executando atualizarTela()');
    
    // Carregar pontos do servidor se dispon√≠vel
    try {
        await carregarPontosServidor();
    } catch (error) {
        console.log('‚ö†Ô∏è Servidor n√£o dispon√≠vel, usando dados locais');
    }
    
    // Atualizar interface completa
    console.log('üìù Atualizando interface...');
    atualizarInterface();
    
    // Carregar e atualizar atividades se existirem
    if (typeof carregarAtividades === 'function') {
        carregarAtividades();
    }
    console.log('üéØ Chamando atualizarSelectsAtividades()...');
    atualizarSelectsAtividades();
    
    // ‚ú® CORRE√á√ÉO: Hist√≥rico j√° √© carregado via sincronizarLogs() na inicializa√ß√£o
    // Apenas aplicar filtros se necess√°rio
    aplicarFiltrosHistorico();
}

// Carregar pontos do servidor
async function carregarPontosServidor() {
    try {
        const data = await ApiService.get('/api/pontos');
        
        // Atualizar pontos dos filhos baseado nos dados do servidor
        filhos.forEach(filho => {
            // Tentar encontrar os pontos no servidor pelo nome do filho
            const nomeKey = filho.nome.toLowerCase();
            if (data[nomeKey] !== undefined) {
                filho.pontos = data[nomeKey];
            }
        });
        
        salvarDados();
        
        console.log('‚úÖ Pontos carregados do servidor');
    } catch (error) {
        console.log('‚ö†Ô∏è Servidor n√£o dispon√≠vel, usando dados locais');
        // N√£o √© um erro cr√≠tico, apenas significa que o servidor n√£o est√° dispon√≠vel
    }
}

// Carregar hist√≥rico do servidor
// Flag para controlar carregamento do hist√≥rico
let carregandoHistorico = false;

async function carregarHistoricoServidor() {
    if (carregandoHistorico) {
        console.log('üîÑ Carregamento de hist√≥rico j√° em andamento, ignorando...');
        return;
    }
    
    carregandoHistorico = true;
    
    try {
        const data = await ApiService.get('/api/historico');
        
        // ‚ú® CORRE√á√ÉO: Verificar estrutura correta da resposta da API
        let historicoData = null;
        if (data && data.success && data.data) {
            // ApiService retorna {success: true, data: [...]}
            historicoData = data.data;
        } else if (Array.isArray(data)) {
            // Resposta direta como array
            historicoData = data;
        } else if (data && data.historico && Array.isArray(data.historico)) {
            // Resposta com propriedade historico
            historicoData = data.historico;
        } else {
            console.warn('‚ö†Ô∏è Formato de hist√≥rico inesperado:', data);
            historicoData = [];
        }
        
        if (Array.isArray(historicoData)) {
            historico = historicoData.map(item => ({
                id: item.id || Date.now(),
                data: new Date(item.data).toLocaleString('pt-BR'),
                nome: item.nome,
                pontos: item.pontos,
                motivo: item.motivo,
                tipo: item.tipo
            }));
        } else {
            historico = [];
        }
        
        console.log('‚úÖ Hist√≥rico carregado do servidor:', historico.length, 'itens');
        
        // Salvar localmente
        localStorage.setItem('historico', JSON.stringify(historico));
        
    } catch (error) {
        console.log('‚ö†Ô∏è Servidor n√£o dispon√≠vel para hist√≥rico, usando dados locais');
        // Carregar do localStorage se servidor n√£o estiver dispon√≠vel
        const historicoLocal = localStorage.getItem('historico');
        if (historicoLocal) {
            historico = JSON.parse(historicoLocal);
        } else {
            historico = [];
        }
    } finally {
        carregandoHistorico = false;
    }
}

// Fun√ß√µes do Modal de Configura√ß√µes
function abrirModalConfiguracoes() {
    console.log('üîß Abrindo modal de configura√ß√µes...');
    
    // Verificar se o usu√°rio √© do tipo 'guest' (visitante)
    const currentUser = JSON.parse(localStorage.getItem('userSession') || '{}');
    const userType = currentUser.type || 'guest';
    
    // Bloquear acesso para visitantes
    if (userType === 'guest') {
        console.log('üö´ Acesso ao modal de configura√ß√µes bloqueado para visitantes');
        mostrarNotificacao('üö´ Acesso n√£o permitido no modo visitante', 'error');
        return;
    }
    
    const modal = DomUtils.getElementById('modal-configuracoes');
    
    if (modal) {
        // ‚ú® FOR√áAR: Usar display diretamente se a classe n√£o funcionar
        modal.classList.add('show');
        
        console.log('üîç Estado do modal:', {
            classes: modal.classList.toString(),
            visible: modal.offsetWidth > 0 && modal.offsetHeight > 0
        });
        
        carregarConfiguracoesNoModal();
        
        // Garantir que elementos admin-only sejam controlados ao abrir o modal
        setTimeout(() => {
            controlarElementosAdmin(userType);
        }, 100); // Pequeno delay para garantir que o DOM esteja renderizado
        
        console.log('‚úÖ Modal de configura√ß√µes aberto');
    } else {
        console.error('‚ùå Modal n√£o encontrado no DOM!');
    }
}

function fecharModalConfiguracoes() {
    console.log('üîÑ fecharModalConfiguracoes() chamada');
    const modal = DomUtils.getElementById('modal-configuracoes');
    console.log('üìã Modal encontrado:', modal);
    if (modal) {
        console.log('üìã Classes antes de remover:', modal.className);
        modal.classList.remove('show');
        console.log('üìã Classes ap√≥s remover:', modal.className);
        console.log('‚úÖ Modal de configura√ß√µes fechado');
    } else {
        console.error('‚ùå Modal de configura√ß√µes n√£o encontrado!');
    }
}

function carregarConfiguracoesNoModal() {
    console.log('üîß carregarConfiguracoesNoModal() chamada');
    
    // ‚ú® CORRE√á√ÉO: Garantir que os dados dos filhos estejam carregados primeiro
    if (!filhos || filhos.length === 0) {
        console.log('‚ö†Ô∏è Filhos n√£o carregados, for√ßando carregamento...');
        carregarDoLocalStorage();
    }
    
    console.log('üìä Filhos dispon√≠veis para renderiza√ß√£o:', filhos.length);
    
    // Renderizar lista de filhos na aba de filhos
    renderizarListaFilhos();
    
    // ‚ú® NOVO: Carregar atividades do localStorage/servidor primeiro
    carregarAtividades();
    
    // ‚ú® DESABILITADO: N√£o adicionar atividades padr√£o automaticamente
    // garantirAtividadesPadrao();
    
    // ‚ú® CORRE√á√ÉO: Usar timeout maior para garantir DOM renderizado
    setTimeout(() => {
        console.log('üîÑ Atualizando lista de atividades com delay...');
        atualizarListaAtividades();
        console.log('‚úÖ Lista de atividades atualizada');
    }, 500); // Delay maior para garantir DOM renderizado
    
    // Ativar a aba filhos por padr√£o
    ativarTab('filhos');
}

function ativarTab(tabId) {
    console.log('üéØ ativarTab() chamada com ID:', tabId);
    // Remover classe active de todos os bot√µes e conte√∫dos
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // Ativar bot√£o e conte√∫do selecionados
    const tabButton = document.querySelector(`[data-tab="${tabId}"]`);
    const tabContent = DomUtils.getElementById(`tab-${tabId}`);
    
    console.log('üîç Tab button encontrado:', tabButton);
    console.log('üîç Tab content encontrado:', tabContent);
    
    if (tabButton) {
        tabButton.classList.add('active');
        console.log('‚úÖ Tab button ativado');
    } else {
        console.log(`‚ö†Ô∏è Bot√£o da tab "${tabId}" n√£o encontrado`);
    }
    
    if (tabContent) {
        tabContent.classList.add('active');
        console.log('‚úÖ Tab content ativado');
        
        // ‚ú® CORRE√á√ÉO: Atualizar aba atividades quando ela for selecionada
        if (tabId === 'atividades') {
            console.log('üéØ Aba atividades ativada - atualizando lista...');
            setTimeout(() => {
                console.log('üîÑ Executando carregamento de atividades...');
                
                // ‚ú® NOVA: Sempre for√ßar sincroniza√ß√£o para garantir dados atualizados
                console.log('üîÑ For√ßando sincroniza√ß√£o de atividades...');
                    sincronizarAtividades().then(() => {
                        console.log('‚úÖ Sincroniza√ß√£o conclu√≠da - tentando renderizar novamente...');
                        setTimeout(() => {
                        console.log('üîÑ Renderizando lista de atividades...');
                            atualizarListaAtividades();
                        }, 200);
                }).catch(error => {
                    console.error('‚ùå Erro na sincroniza√ß√£o:', error);
                    console.log('üì± Fallback: carregando do localStorage...');
                    carregarAtividadesLocal();
                    atualizarListaAtividades();
                });
                
                console.log('‚úÖ Lista de atividades atualizada');
            }, 300); // Delay para garantir renderiza√ß√£o
        }
        
        // ‚ú® NOVO: Atualizar hist√≥rico quando aba hist√≥rico for ativada
        if (tabId === 'historico') {
            console.log('üéØ Aba hist√≥rico ativada - atualizando hist√≥rico...');
            setTimeout(() => {
                console.log('üîÑ Executando carregamento de hist√≥rico...');
                atualizarHistorico('todos');
                console.log('‚úÖ Hist√≥rico atualizado');
            }, 300); // Delay para garantir renderiza√ß√£o
        }
        
        // ‚ú® NOVO: Atualizar filhos quando aba filhos for ativada
        if (tabId === 'filhos') {
            console.log('üéØ Aba filhos ativada - atualizando lista de filhos...');
            setTimeout(() => {
                console.log('üîÑ Executando carregamento de filhos...');
                
                // Garantir que os dados dos filhos estejam carregados
                if (!filhos || filhos.length === 0) {
                    console.log('‚ö†Ô∏è Filhos n√£o carregados, for√ßando carregamento...');
                    carregarDoLocalStorage();
                }
                
                // For√ßar renderiza√ß√£o
                renderizarListaFilhos();
                console.log('‚úÖ Lista de filhos atualizada');
            }, 300); // Delay para garantir renderiza√ß√£o
        }
    } else {
        console.log(`‚ö†Ô∏è Conte√∫do da tab "${tabId}" n√£o encontrado`);
    }
}

// Renderizar lista de filhos no modal
function renderizarListaFilhos() {
    console.log('üé® renderizarListaFilhos() chamada');
    console.log('üìä Estado atual dos filhos:', filhos);
    console.log('üìä Quantidade de filhos:', filhos.length);
    
    const container = DomUtils.getElementById('lista-filhos');
    console.log('üéØ Container encontrado:', !!container);
    
    if (!container) {
        console.log('üì¶ Container lista-filhos n√£o encontrado');
        
        // Verificar se estamos no modal de configura√ß√µes
        const tabFilhos = DomUtils.getElementById('tab-filhos');
        console.log('üéØ Tab filhos encontrada:', !!tabFilhos);
        
        if (!tabFilhos) {
            console.log('‚ö†Ô∏è Modal n√£o est√° aberto, n√£o √© necess√°rio renderizar lista de filhos');
            return;
        }
        
        console.log('üî® Criando estrutura HTML para lista de filhos...');
        
        // Criar container se n√£o existir
        tabFilhos.innerHTML = `
                <h3>üë• Gerenciar Filhos</h3>
                <div class="config-group">
                    <h4>‚ûï Adicionar Novo Filho</h4>
                    <div class="novo-filho-form">
                        <div class="input-group">
                            <label>Nome:</label>
                            <input type="text" id="novo-filho-nome" class="form-control" placeholder="Nome do filho">
                        </div>
                        <div class="input-group">
                            <label>Emoji:</label>
                            <select id="novo-filho-emoji" class="form-control">
                                <option value="üë¶">üë¶ Menino</option>
                                <option value="üëß">üëß Menina</option>
                                <option value="üë∂">üë∂ Beb√™</option>
                                <option value="üßí">üßí Crian√ßa</option>
                                <option value="üë®">üë® Homem</option>
                                <option value="üë©">üë© Mulher</option>
                                <option value="üéì">üéì Estudante</option>
                                <option value="‚≠ê">‚≠ê Estrela</option>
                                <option value="üåü">üåü Brilhante</option>
                                <option value="üíé">üíé Diamante</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <label>Cor do tema:</label>
                            <select id="novo-filho-cor" class="form-control">
                                ${coresDisponiveis.map((cor, index) => 
                                    `<option value="${index}">${cor.nome}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <button onclick="adicionarNovoFilho()" class="btn btn-success">‚ûï Adicionar Filho</button>
                    </div>
                </div>
                <div class="config-group">
                    <h4>üë• Filhos Cadastrados</h4>
                    <div id="lista-filhos" class="lista-filhos"></div>
                </div>
            `;
        
        // Buscar o novo container criado
        const novoContainer = DomUtils.getElementById('lista-filhos');
        console.log('üéØ Novo container criado:', !!novoContainer);
        
        if (!novoContainer) {
            console.error('‚ùå Erro: N√£o foi poss√≠vel criar container lista-filhos');
            return;
        }
        
        // Continuar com o novo container
        renderizarListaFilhosContainer(novoContainer);
        return;
    }
    
    // Se o container existe, renderizar diretamente
    console.log('‚úÖ Renderizando no container existente');
    renderizarListaFilhosContainer(container);
}

// Fun√ß√£o auxiliar para renderizar conte√∫do na lista de filhos
function renderizarListaFilhosContainer(container) {
    console.log('üé® renderizarListaFilhosContainer() chamada');
    console.log('üéØ Container recebido:', container);
    console.log('üìä Filhos para renderizar:', filhos.length);
    
    container.innerHTML = '';
    
    if (filhos.length === 0) {
        console.log('üìù Nenhum filho para renderizar, mostrando mensagem vazia');
        container.innerHTML = '<p class="texto-vazio">Nenhum filho cadastrado ainda.</p>';
        return;
    }
    
    console.log('üé® Renderizando', filhos.length, 'filhos...');
    
    filhos.forEach((filho, index) => {
        console.log(`üìù Renderizando filho ${index + 1}:`, filho);
        
        const filhoItem = document.createElement('div');
        filhoItem.className = 'filho-item';
        filhoItem.innerHTML = `
            <div class="filho-info" style="border-left: 4px solid ${filho.cor.valor}">
                <div class="filho-avatar" style="background: ${filho.cor.gradiente}">
                    ${filho.emoji}
                </div>
                <div class="filho-dados">
                    <div class="filho-nome">${filho.nome}</div>
                    <div class="filho-pontos">${filho.pontos} pontos</div>
                    <div class="filho-cor">${filho.cor.nome}</div>
                </div>
                <div class="filho-acoes">
                    <button onclick="editarFilho(${filho.id})" class="btn btn-sm btn-primary">‚úèÔ∏è</button>
                    <button onclick="removerFilho(${filho.id})" class="btn btn-sm btn-danger">üóëÔ∏è</button>
                </div>
            </div>
        `;
        container.appendChild(filhoItem);
    });
    
    console.log('‚úÖ Renderiza√ß√£o conclu√≠da,', filhos.length, 'filhos adicionados ao container');
}

// Adicionar novo filho
async function adicionarNovoFilho() {
    console.log('üë∂ Iniciando cadastro de novo filho...');
    
    // 1. Captura dos elementos do formul√°rio
    const nomeInput = DomUtils.getElementById('novo-filho-nome');
    const emojiSelect = DomUtils.getElementById('novo-filho-emoji');
    const corSelect = DomUtils.getElementById('novo-filho-cor');
    
    if (!nomeInput || !emojiSelect || !corSelect) {
        mostrarNotificacao('‚ùå Erro: Formul√°rio n√£o encontrado', 'error');
        return;
    }
    
    const nome = nomeInput.value?.trim();
    const emoji = emojiSelect.value;
    const corIndex = parseInt(corSelect.value);
    
    // 2. Valida√ß√µes
    if (!nome) {
        mostrarNotificacao('‚ùå Por favor, insira um nome para o filho', 'error');
        return;
    }
    
    if (filhos.some(f => f.nome.toLowerCase() === nome.toLowerCase())) {
        mostrarNotificacao('‚ùå J√° existe um filho com este nome', 'error');
        return;
    }
    
    if (isNaN(corIndex) || corIndex < 0 || corIndex >= coresDisponiveis.length) {
        mostrarNotificacao('‚ùå Erro na cor selecionada', 'error');
        return;
    }
    
    // 3. Cria√ß√£o do novo filho
    const novoFilho = {
        id: gerarNovoId(),
        nome: nome,
        emoji: emoji,
        cor: coresDisponiveis[corIndex],
        pontos: 0
    };
    
    console.log('üë∂ Novo filho criado:', novoFilho);
    
    // 4. Bloquear sincroniza√ß√£o durante opera√ß√£o
    bloquearSincronizacaoComTimeout();
    
    try {
        // 5. Salvar no servidor PRIMEIRO
        console.log('‚òÅÔ∏è Salvando no servidor...');
        const response = await ApiService.post('/api/salvar-criancas', { 
            criancas: [...filhos, novoFilho] 
        });
        
        if (response.success) {
            // 6. Se servidor OK, adicionar localmente
            filhos.push(novoFilho);
            console.log('‚úÖ Filho adicionado com sucesso:', nome);
            mostrarNotificacao(`‚úÖ ${nome} foi adicionado com sucesso!`, 'success');
        } else {
            throw new Error('Falha na resposta do servidor');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar no servidor:', error);
        
        // 7. Fallback: salvar apenas localmente
        filhos.push(novoFilho);
        console.log('üì± Filho salvo apenas localmente:', nome);
        mostrarNotificacao(`‚ö†Ô∏è ${nome} adicionado localmente, erro ao sincronizar com servidor!`, 'warning');
    }
    
    // 8. Atualizar interface
    renderizarListaFilhos();
    atualizarInterface();
    
    // 9. Log do cadastro
    adicionarLog('cadastrar_filho', {
        nome_filho: nome,
        emoji: emoji,
        cor: coresDisponiveis[corIndex].nome,
        total_filhos: filhos.length
    });
    
    // 10. Salvar dados localmente
    await salvarDados(true);
    
    // 11. Limpar formul√°rio
    nomeInput.value = '';
    emojiSelect.value = 'üë¶';
    corSelect.value = '0';
    
    // 12. Desbloquear sincroniza√ß√£o
    desbloquearSincronizacao();
    
    // 13. Sincronizar ap√≥s adicionar filho
    await sincronizarAposAcao('adicionar filho');
    
    console.log('üë∂ Cadastro de filho conclu√≠do:', nome);
}

// Editar filho
async function editarFilho(id) {
    const filho = encontrarFilho(id);
    if (!filho) return;
    
    // ‚ú® NOVO: Bloquear sincroniza√ß√£o durante edi√ß√£o
    bloquearSincronizacaoComTimeout();
    
    const novoNome = prompt('Novo nome:', filho.nome);
    if (!novoNome || novoNome.trim() === '') {
        // ‚ú® NOVO: Desbloquear se cancelar
        desbloquearSincronizacao();
        return;
    }
    
    // Verificar se j√° existe outro filho com este nome
    if (filhos.some(f => f.id !== id && f.nome.toLowerCase() === novoNome.toLowerCase())) {
        mostrarNotificacao('‚ùå J√° existe um filho com este nome', 'error');
        // ‚ú® NOVO: Desbloquear se erro
        desbloquearSincronizacao();
        return;
    }
    
    const novoEmoji = prompt('Novo emoji:', filho.emoji);
    if (!novoEmoji) {
        // ‚ú® NOVO: Desbloquear se cancelar
        desbloquearSincronizacao();
        return;
    }
    
    const corOptions = coresDisponiveis.map((cor, index) => `${index}: ${cor.nome}`).join('\n');
    const novaCor = prompt(`Nova cor (0-${coresDisponiveis.length-1}):\n${corOptions}`, coresDisponiveis.findIndex(c => c.nome === filho.cor.nome));
    if (novaCor === null) {
        // ‚ú® NOVO: Desbloquear se cancelar
        desbloquearSincronizacao();
        return;
    }
    
    const corIndex = parseInt(novaCor);
    if (isNaN(corIndex) || corIndex < 0 || corIndex >= coresDisponiveis.length) {
        mostrarNotificacao('‚ùå Cor inv√°lida', 'error');
        // ‚ú® NOVO: Desbloquear se erro
        desbloquearSincronizacao();
        return;
    }
    
    filho.nome = novoNome.trim();
    filho.emoji = novoEmoji;
    filho.cor = coresDisponiveis[corIndex];
    
    // Salvar dados localmente
    await salvarDados();
    
    // Salvar configura√ß√µes no servidor
    try {
        const response = await ApiService.post('/api/salvar-criancas', { criancas: filhos });
        if (response.success) {
            console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Configura√ß√µes das crian√ßas salvas no servidor ap√≥s edi√ß√£o');
            // ‚ú® NOVO: Desbloquear ap√≥s salvar com sucesso
            desbloquearSincronizacao();
        }
    } catch (error) {
        console.error('‚ùå Erro ao salvar configura√ß√µes ap√≥s edi√ß√£o:', error);
        // ‚ú® NOVO: Desbloquear mesmo em caso de erro
        desbloquearSincronizacao();
        // N√£o mostrar erro para o usu√°rio, apenas log
    }
    
    renderizarListaFilhos();
    atualizarInterface();
    
    // ‚ú® NOVO: Sincronizar ap√≥s editar filho
    await sincronizarAposAcao('editar filho');
    
    mostrarNotificacao(`‚úÖ ${filho.nome} foi editado com sucesso!`, 'success');
}

// Remover filho - VERS√ÉO CORRIGIDA
async function removerFilho(id) {
    console.log(`üîç === INICIANDO REMO√á√ÉO DE FILHO ===`);
    console.log(`üîç ID recebido: ${id} (tipo: ${typeof id})`);
    
    const filho = encontrarFilho(id);
    if (!filho) {
        console.error('‚ùå Filho n√£o encontrado para remo√ß√£o com ID:', id);
        console.log('üîç Filhos dispon√≠veis:', filhos.map(f => ({ id: f.id, nome: f.nome })));
        mostrarNotificacao('‚ùå Filho n√£o encontrado para remover.', 'error');
        return;
    }
    
    console.log(`üîç Filho encontrado:`, filho);
    
    // ‚ú® CORRE√á√ÉO: Usar modal de confirma√ß√£o padr√£o do app
    confirmarAcao(`Tem certeza que deseja remover ${filho.nome}? Esta a√ß√£o n√£o pode ser desfeita.`, async (confirmado) => {
        if (!confirmado) {
            console.log('‚ùå Remo√ß√£o cancelada pelo usu√°rio');
            return;
        }
        
        try {
            console.log(`üóëÔ∏è Iniciando remo√ß√£o de ${filho.nome} (ID: ${filho.id})`);
            
            // ‚ú® NOVA: Bloquear sincroniza√ß√£o durante remo√ß√£o
            bloquearSincronizacaoComTimeout();
            
            // ‚ú® CORRE√á√ÉO: Tentar m√∫ltiplas estrat√©gias de remo√ß√£o
            let removidoComSucesso = false;
            let erroRemocao = null;
            
            // Estrat√©gia 1: Remo√ß√£o via API com ID num√©rico
            try {
                console.log(`üì° Tentativa 1: API com ID ${filho.id}`);
                const response = await ApiService.delete(`/api/criancas/${filho.id}`);
                
                if (response.success) {
                    console.log(`‚úÖ Remo√ß√£o via API bem-sucedida`);
                    removidoComSucesso = true;
                } else {
                    console.log(`‚ö†Ô∏è API retornou erro:`, response.error);
                    erroRemocao = response.error;
                }
            } catch (apiError) {
                console.log(`‚ö†Ô∏è Erro na API:`, apiError);
                erroRemocao = apiError.message;
            }
            
            // Estrat√©gia 2: Se API falhou, tentar remo√ß√£o for√ßada por nome
            if (!removidoComSucesso) {
                try {
                    console.log(`üì° Tentativa 2: Remo√ß√£o for√ßada por nome "${filho.nome}"`);
                    
                    // Buscar dados atualizados do servidor
                    const syncResponse = await ApiService.get('/api/sincronizar-criancas');
                    
                    if (syncResponse.success && syncResponse.data && syncResponse.data.criancas) {
                        const criancaServidor = syncResponse.data.criancas.find(c => 
                            c.nome.toLowerCase() === filho.nome.toLowerCase()
                        );
                        
                        if (criancaServidor && criancaServidor.id) {
                            console.log(`üîç Crian√ßa encontrada no servidor:`, criancaServidor);
                            
                            const deleteResponse = await ApiService.delete(`/api/criancas/${criancaServidor.id}`);
                            
                            if (deleteResponse.success) {
                                console.log(`‚úÖ Remo√ß√£o for√ßada bem-sucedida`);
                                removidoComSucesso = true;
                            } else {
                                console.log(`‚ö†Ô∏è Remo√ß√£o for√ßada falhou:`, deleteResponse.error);
                                erroRemocao = deleteResponse.error;
                            }
                        } else {
                            console.log(`‚ö†Ô∏è Crian√ßa n√£o encontrada no servidor`);
                            erroRemocao = 'Crian√ßa n√£o encontrada no servidor';
                        }
                    } else {
                        console.log(`‚ö†Ô∏è Erro ao sincronizar com servidor`);
                        erroRemocao = 'Erro de sincroniza√ß√£o';
                    }
                } catch (syncError) {
                    console.log(`‚ö†Ô∏è Erro na sincroniza√ß√£o:`, syncError);
                    erroRemocao = syncError.message;
                }
            }
            
            // Estrat√©gia 3: Se tudo falhou, remover apenas localmente
            if (!removidoComSucesso) {
                console.log(`üì± Tentativa 3: Remo√ß√£o apenas local (fallback)`);
                
                // Adicionar log da tentativa de remo√ß√£o local
                adicionarLog('remover_filho_local', {
                    filho: filho.nome,
                    pontos_finais: filho.pontos,
                    cor: filho.cor,
                    erro_servidor: erroRemocao
                });
                
                // Remover filho da lista local
                filhos = filhos.filter(f => f.id !== filho.id);
                
                // Remover do hist√≥rico tamb√©m
                historico = historico.filter(h => h.nome !== filho.nome);
                
                // Salvar dados locais
                await salvarDados();
                
                // Atualizar interface
                renderizarListaFilhos();
                atualizarInterface();
                
                mostrarNotificacao(`‚ö†Ô∏è ${filho.nome} removido localmente (erro no servidor)`, 'warning');
                
                // ‚ú® NOVO: Desbloquear sincroniza√ß√£o
                desbloquearSincronizacao();
                return;
            }
            
            // Se chegou aqui, a remo√ß√£o foi bem-sucedida
            console.log(`‚úÖ Crian√ßa ${filho.nome} removida com sucesso`);
            
            // Adicionar log da remo√ß√£o
            adicionarLog('remover_filho', {
                filho: filho.nome,
                pontos_finais: filho.pontos,
                cor: filho.cor,
                estrategia_usada: removidoComSucesso ? 'api' : 'local'
            });
            
            // Remover filho da lista local
            filhos = filhos.filter(f => f.id !== filho.id);
            
            // Remover do hist√≥rico tamb√©m
            historico = historico.filter(h => h.nome !== filho.nome);
            
            // Salvar dados locais
            await salvarDados();
            
            // Atualizar interface
            renderizarListaFilhos();
            atualizarInterface();
            
            // Sincronizar ap√≥s remover filho
            await sincronizarAposAcao('remover filho');
            
            // ‚ú® NOVO: Desbloquear sincroniza√ß√£o
            desbloquearSincronizacao();
            
            mostrarNotificacao(`üóëÔ∏è ${filho.nome} foi removido do sistema`, 'success');
            
        } catch (error) {
            console.error('‚ùå Erro geral ao remover crian√ßa:', error);
            
            // ‚ú® NOVO: Desbloquear sincroniza√ß√£o em caso de erro
            desbloquearSincronizacao();
            
            mostrarNotificacao(`‚ùå Erro ao remover ${filho.nome}: ${error.message}`, 'error');
        }
    });
}



// Configurar eventos
function configurarEventos() {
    console.log('‚öôÔ∏è Configurando eventos...');
    
    // Bot√£o configura√ß√µes
    EventManager.addClickHandler('btn-configuracoes', function(e) {
        console.log('‚öôÔ∏è Bot√£o de configura√ß√µes clicado!');
        e.preventDefault();
        
        // Verificar se o usu√°rio √© do tipo 'guest' (visitante)
        const currentUser = JSON.parse(localStorage.getItem('userSession') || '{}');
        const userType = currentUser.type || 'guest';
        
        // Bloquear acesso para visitantes
        if (userType === 'guest') {
            console.log('üö´ Acesso √† p√°gina de configura√ß√µes bloqueado para visitantes');
            mostrarNotificacao('üö´ Acesso n√£o permitido no modo visitante', 'error');
            return;
        }
        
        try {
            // Redirecionar para a p√°gina de configura√ß√µes
            window.location.href = 'configuracoes.html';
        } catch (error) {
            console.error('‚ùå Erro ao redirecionar para configura√ß√µes:', error);
        }
    }, 'Configurar bot√£o de configura√ß√µes');
    
    // ‚ú® NOVO: Bot√£o de atualiza√ß√£o manual
    EventManager.addClickHandler('btn-atualizar', async function(e) {
        console.log('üîÑ Sincroniza√ß√£o manual iniciada!');
        e.preventDefault();
        
        // ‚ú® DEBUG: Verificar se o elemento existe no momento do clique
        const elementoTeste = DomUtils.getElement('btn-atualizar');
        console.log('üîç DEBUG - Elemento no momento do clique:', elementoTeste);
        console.log('üîç DEBUG - DomUtils.getElement:', DomUtils.getElement('btn-atualizar'));
        
        await sincronizarManualmente();
    }, 'Configurar bot√£o de atualiza√ß√£o manual');
    
    // ‚ú® NOVO: Bot√£o de sincroniza√ß√£o manual de atividades
    EventManager.addClickHandler('btn-sync-atividades', async function(e) {
        console.log('üîÑ Sincroniza√ß√£o manual de atividades iniciada!');
        e.preventDefault();
        
        // Mostrar loading no bot√£o
        const btn = e.target;
        const textoOriginal = btn.textContent;
        btn.textContent = 'Sincronizando...';
        btn.disabled = true;
        
        try {
            // Executar sincroniza√ß√£o completa das atividades
            console.log('üì§ Iniciando sincroniza√ß√£o das atividades...');
            const sucesso = await salvarAtividades();
            
            if (sucesso) {
                // Mostrar notifica√ß√£o de sucesso
                mostrarNotificacao('‚úÖ Atividades sincronizadas com sucesso!', 'success');
                console.log('‚úÖ Sincroniza√ß√£o manual das atividades conclu√≠da com sucesso!');
                
                // Atualizar a tela
                carregarAtividades();
            } else {
                // Mostrar notifica√ß√£o de erro
                mostrarNotificacao('‚ùå Erro na sincroniza√ß√£o das atividades. Tente novamente.', 'error');
                console.log('‚ùå Erro na sincroniza√ß√£o manual das atividades');
            }
        } catch (error) {
            console.error('‚ùå Erro durante sincroniza√ß√£o manual das atividades:', error);
            
            // Mostrar notifica√ß√£o de erro com detalhes
            mostrarNotificacao('‚ùå Erro na sincroniza√ß√£o: ' + error.message, 'error');
        } finally {
            // Restaurar bot√£o
            btn.textContent = textoOriginal;
            btn.disabled = false;
        }
    }, 'Configurar bot√£o de sincroniza√ß√£o manual de atividades');
    
    // ‚ú® NOVO: Fun√ß√£o para limpar dados √≥rf√£os
    window.limparDadosOrfaos = async function() {
        console.log('üßπ Iniciando limpeza de dados √≥rf√£os...');
        
        try {
            // Buscar dados do servidor
            const response = await ApiService.get('/api/sincronizar-criancas');
            
            if (response.success && response.data.criancas) {
                const criancasServidor = response.data.criancas;
                console.log('üìä Crian√ßas no servidor:', criancasServidor);
                
                // Usar todas as crian√ßas do servidor (j√° n√£o h√° inativas)
                const criancasAtivas = criancasServidor;
                console.log('‚úÖ Crian√ßas do servidor:', criancasAtivas);
                
                // Atualizar dados locais apenas com crian√ßas ativas
                filhos = criancasAtivas.map(c => ({
                    id: c.id,
                    nome: c.nome,
                    emoji: c.emoji,
                    cor: c.cor,
                    pontos: 0 // Ser√° atualizado pela sincroniza√ß√£o de pontos
                }));
                
                // Salvar dados limpos
                await salvarDados();
                
                // Atualizar interface
                renderizarListaFilhos();
                atualizarInterface();
                
                console.log('‚úÖ Limpeza conclu√≠da! Filhos atualizados:', filhos);
                mostrarNotificacao('üßπ Dados √≥rf√£os removidos com sucesso!', 'success');
            }
        } catch (error) {
            console.error('‚ùå Erro na limpeza:', error);
            mostrarNotificacao('‚ùå Erro ao limpar dados √≥rf√£os', 'error');
        }
    };
    
    // ‚ú® NOVO: Fun√ß√£o para for√ßar remo√ß√£o de filho espec√≠fico
    window.forcarRemocaoFilho = async function(nomeFilho) {
        console.log(`üóëÔ∏è For√ßando remo√ß√£o do filho: ${nomeFilho}`);
        
        try {
            // Buscar dados do servidor
            const response = await ApiService.get('/api/sincronizar-criancas');
            
            if (response.success && response.data.criancas) {
                const criancaParaRemover = response.data.criancas.find(c => 
                    c.nome.toLowerCase() === nomeFilho.toLowerCase()
                );
                
                if (criancaParaRemover) {
                    console.log(`üîç Crian√ßa encontrada para remo√ß√£o:`, criancaParaRemover);
                    
                    // Usar o ID num√©rico j√° que _id est√° undefined
                    const idParaRemover = criancaParaRemover.id;
                    console.log(`üîç ID para remo√ß√£o:`, idParaRemover);
                    
                    if (!idParaRemover) {
                        console.error(`‚ùå ID n√£o encontrado para ${nomeFilho}:`, criancaParaRemover);
                        mostrarNotificacao(`‚ùå ID n√£o encontrado para ${nomeFilho}`, 'error');
                        return;
                    }
                    
                    const deleteResponse = await ApiService.delete(`/api/criancas/${idParaRemover}`);
                    
                    if (deleteResponse.success) {
                        console.log(`‚úÖ Crian√ßa ${nomeFilho} removida com sucesso!`);
                        mostrarNotificacao(`‚úÖ ${nomeFilho} removido com sucesso!`, 'success');
                        
                        // Recarregar dados ap√≥s remo√ß√£o
                        await sincronizarManualmente();
                    } else {
                        console.error(`‚ùå Erro ao remover ${nomeFilho}:`, deleteResponse.error);
                        mostrarNotificacao(`‚ùå Erro ao remover ${nomeFilho}`, 'error');
                    }
                } else {
                    console.log(`‚ùå Crian√ßa ${nomeFilho} n√£o encontrada no servidor`);
                    mostrarNotificacao(`‚ùå ${nomeFilho} n√£o encontrado no servidor`, 'error');
                }
            }
        } catch (error) {
            console.error('‚ùå Erro na remo√ß√£o for√ßada:', error);
            mostrarNotificacao('‚ùå Erro na remo√ß√£o for√ßada', 'error');
        }
    };
    
    // ‚ú® NOVA: Fun√ß√£o para diagnosticar problema de remo√ß√£o
    window.diagnosticarRemocao = async function() {
        console.log('üîç === DIAGN√ìSTICO DE REMO√á√ÉO ===');
        
        // 1. Verificar estado atual
        console.log('üìä Estado atual dos filhos:', filhos);
        console.log('üìä IDs dispon√≠veis:', filhos.map(f => f.id));
        
        // 2. Testar sincroniza√ß√£o
        try {
            const syncResponse = await ApiService.get('/api/sincronizar-criancas');
            console.log('üîÑ Resposta da sincroniza√ß√£o:', syncResponse);
            
            if (syncResponse.success && syncResponse.data && syncResponse.data.criancas) {
                console.log('üìä Crian√ßas no servidor:', syncResponse.data.criancas);
                console.log('üìä IDs no servidor:', syncResponse.data.criancas.map(c => c.id));
            }
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o:', error);
        }
        
        // 3. Testar API de remo√ß√£o se h√° filhos
        if (filhos.length > 0) {
            const primeiroFilho = filhos[0];
            console.log(`üß™ Testando API de remo√ß√£o para: ${primeiroFilho.nome} (ID: ${primeiroFilho.id})`);
            
            try {
                const testResponse = await fetch(`/api/criancas/${primeiroFilho.id}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const testData = await testResponse.json();
                console.log('üì° Teste da API:', { status: testResponse.status, data: testData });
            } catch (error) {
                console.error('‚ùå Erro no teste da API:', error);
            }
        }
        
        console.log('‚úÖ Diagn√≥stico conclu√≠do');
    };

    // ‚ú® NOVA: Fun√ß√£o para for√ßar sincroniza√ß√£o completa
    window.forcarSincronizacaoCompleta = async function() {
        console.log('üîÑ For√ßando sincroniza√ß√£o completa...');
        
        try {
            // Limpar dados locais
            filhos = [];
            historico = [];
            
            // For√ßar sincroniza√ß√£o do servidor
            await sincronizarDados();
            
            // Atualizar interface
            atualizarInterface();
            
            console.log('‚úÖ Sincroniza√ß√£o completa for√ßada');
            mostrarNotificacao('‚úÖ Sincroniza√ß√£o completa realizada!', 'success');
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o completa:', error);
            mostrarNotificacao('‚ùå Erro na sincroniza√ß√£o: ' + error.message, 'error');
        }
    };
    
    // ‚ú® NOVA: Fun√ß√£o para migrar crian√ßas para MongoDB
    window.migrarCriancasParaMongoDB = async function() {
        console.log('üîÑ Iniciando migra√ß√£o de crian√ßas para MongoDB...');
        
        try {
            const response = await ApiService.post('/api/migrar-criancas');
            
            if (response.success) {
                console.log('‚úÖ Migra√ß√£o conclu√≠da:', response.message);
                mostrarNotificacao(`‚úÖ ${response.message}`, 'success');
                
                // Recarregar dados ap√≥s migra√ß√£o
                await sincronizarManualmente();
                
                return true;
            } else {
                console.error('‚ùå Erro na migra√ß√£o:', response.error);
                mostrarNotificacao(`‚ùå Erro na migra√ß√£o: ${response.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Erro na migra√ß√£o:', error);
            mostrarNotificacao('‚ùå Erro na migra√ß√£o', 'error');
            return false;
        }
    };
    
    // ‚ú® NOVA: Fun√ß√£o para limpar dados corrompidos
    window.limparDadosCorrompidos = async function() {
        console.log('üßπ === LIMPEZA DE DADOS CORROMPIDOS ===');
        
        try {
            // 1. Buscar dados do servidor
            const syncResponse = await ApiService.get('/api/sincronizar-criancas');
            
            if (syncResponse.success && syncResponse.data && syncResponse.data.criancas) {
                const criancasServidor = syncResponse.data.criancas;
                console.log('üìä Crian√ßas no servidor:', criancasServidor);
                
                // 2. Filtrar apenas crian√ßas v√°lidas (com ID e nome)
                const criancasValidas = criancasServidor.filter(c => 
                    c.id && c.nome && c.ativo !== false
                );
                console.log('‚úÖ Crian√ßas v√°lidas:', criancasValidas);
                
                // 3. Atualizar dados locais
                filhos = criancasValidas.map(c => ({
                    id: c.id,
                    nome: c.nome,
                    emoji: c.emoji || 'üë∂',
                    cor: c.cor || coresDisponiveis[0],
                    pontos: 0
                }));
                
                // 4. Salvar no localStorage
                // N√£o salvar filhos no localStorage - apenas MongoDB
                
                // 5. Atualizar interface
                renderizarListaFilhos();
                atualizarInterface();
                
                console.log('‚úÖ Limpeza conclu√≠da! Filhos atualizados:', filhos);
                mostrarNotificacao('üßπ Dados corrompidos removidos com sucesso!', 'success');
            } else {
                console.error('‚ùå Erro ao buscar dados do servidor');
                mostrarNotificacao('‚ùå Erro ao buscar dados do servidor', 'error');
            }
        } catch (error) {
            console.error('‚ùå Erro na limpeza:', error);
            mostrarNotificacao('‚ùå Erro na limpeza de dados', 'error');
        }
    };
    
    // ‚ú® NOVO: Fun√ß√£o para remover filho teste e Chico
    window.removerFilhoTesteEChico = async function() {
        console.log('üóëÔ∏è Removendo filho teste e Chico...');
        
        try {
            // Buscar dados do servidor
            const response = await ApiService.get('/api/sincronizar-criancas');
            
            if (response.success && response.data.criancas) {
                const criancasParaRemover = response.data.criancas.filter(c => 
                    c.nome.toLowerCase() === 'filho teste' || 
                    c.nome.toLowerCase() === 'chico'
                );
                
                console.log(`üóëÔ∏è Crian√ßas encontradas para remo√ß√£o:`, criancasParaRemover);
                
                if (criancasParaRemover.length === 0) {
                    console.log('‚úÖ Nenhuma crian√ßa para remover encontrada');
                    mostrarNotificacao('‚úÖ Nenhuma crian√ßa para remover encontrada', 'success');
                    return;
                }
                
                // Remover cada crian√ßa
                for (const crianca of criancasParaRemover) {
                    console.log(`üóëÔ∏è Removendo: ${crianca.nome} (${crianca._id})`);
                    
                    const deleteResponse = await ApiService.delete(`/api/criancas/${crianca._id}`);
                    
                    if (deleteResponse.success) {
                        console.log(`‚úÖ ${crianca.nome} removido com sucesso!`);
                    } else {
                        console.error(`‚ùå Erro ao remover ${crianca.nome}:`, deleteResponse.error);
                    }
                }
                
                // Recarregar dados
                await sincronizarManualmente();
                
                console.log('‚úÖ Remo√ß√£o de filho teste e Chico conclu√≠da!');
                mostrarNotificacao('‚úÖ filho teste e Chico removidos com sucesso!', 'success');
            }
        } catch (error) {
            console.error('‚ùå Erro na remo√ß√£o:', error);
            mostrarNotificacao('‚ùå Erro na remo√ß√£o', 'error');
        }
    };
    
    // ‚ú® NOVO: Fun√ß√£o para limpar tudo (filhos e atividades)
    window.limparTudo = async function() {
        console.log('üßπ LIMPANDO TUDO - Filhos e Atividades...');
        
        try {
            // 1. Remover todas as crian√ßas
            console.log('üóëÔ∏è Removendo todas as crian√ßas...');
            const responseCriancas = await ApiService.get('/api/sincronizar-criancas');
            
            if (responseCriancas.success && responseCriancas.data.criancas) {
                const criancas = responseCriancas.data.criancas;
                console.log(`üóëÔ∏è Encontradas ${criancas.length} crian√ßas para remover`);
                
                for (const crianca of criancas) {
                    console.log(`üóëÔ∏è Removendo: ${crianca.nome} (ID: ${crianca.id})`);
                    await ApiService.delete(`/api/criancas/${crianca.id}`);
                }
            }
            
            // 2. Remover todas as atividades
            console.log('üóëÔ∏è Removendo todas as atividades...');
            const responseAtividades = await ApiService.get('/api/atividades');
            
            if (responseAtividades.success && responseAtividades.data.atividades) {
                const atividades = responseAtividades.data.atividades;
                console.log(`üóëÔ∏è Encontradas ${atividades.length} atividades para remover`);
                
                for (const atividade of atividades) {
                    console.log(`üóëÔ∏è Removendo atividade: ${atividade.nome} (ID: ${atividade.id})`);
                    await ApiService.delete(`/api/atividades/${atividade.id}`);
                }
            }
            
            // 3. Limpar dados locais
            console.log('üßπ Limpando dados locais...');
            filhos = [];
            atividadesPositivas = [];
            atividadesNegativas = [];
            historico = [];
            
            // N√£o remover filhos do localStorage - apenas MongoDB
            localStorage.removeItem('atividadesPositivas');
            localStorage.removeItem('atividadesNegativas');
            localStorage.removeItem('historico');
            localStorage.removeItem('pontos');
            
            // 4. Recarregar interface
            console.log('üîÑ Recarregando interface...');
            renderizarListaFilhos();
            atualizarInterface();
            
            console.log('‚úÖ Limpeza completa conclu√≠da!');
            mostrarNotificacao('üßπ Tudo foi limpo! Agora voc√™ pode adicionar novos filhos e atividades.', 'success');
            
        } catch (error) {
            console.error('‚ùå Erro na limpeza completa:', error);
            mostrarNotificacao('‚ùå Erro na limpeza completa', 'error');
        }
    };
    
    // ‚ú® NOVO: Bot√£o de sair do sistema
    EventManager.addClickHandler('btn-sair', function(e) {
        console.log('üö™ Saindo do sistema...');
        e.preventDefault();
        
        // Usar modal de confirma√ß√£o moderno
        confirmarAcao('ü§î Deseja realmente sair do sistema?', function(confirmado) {
            if (confirmado) {
                window.AuthUtils.logout();
            }
        });
    }, 'Configurar bot√£o de sair');
    
    // Modal de configura√ß√µes - event listeners
    console.log('üîß Registrando event listener para fechar-modal');
    EventManager.addClickHandler('fechar-modal', function(e) {
        console.log('üéØ Bot√£o fechar-modal clicado!', e);
        fecharModalConfiguracoes();
    }, 'Fechar modal - X');
    EventManager.addClickHandler('btn-cancelar-config', fecharModalConfiguracoes, 'Cancelar configura√ß√µes');
    
         EventManager.addClickHandler('btn-baixar-log', baixarLog, 'Baixar log completo');
     EventManager.addClickHandler('btn-baixar-log-resumido', baixarLogResumido, 'Baixar log resumido');
     EventManager.addClickHandler('btn-resetar-pontos', resetarPontos, 'Resetar pontos');
    EventManager.addClickHandler('btn-limpar-historico', limparHistorico, 'Limpar hist√≥rico');
    
    // Fechar modal clicando fora
    EventManager.addEventListener('#modal-configuracoes', 'click', function(e) {
        if (e.target.id === 'modal-configuracoes') {
            fecharModalConfiguracoes();
        }
    }, 'Fechar modal clicando fora');
    
    // Tabs do modal
    EventManager.delegateEvent('body', '.tab-btn', 'click', function(e) {
        console.log('üéØ Tab clicada:', e.target);
        const tabId = e.target.dataset.tab;
        console.log('üìë Tab ID:', tabId);
        ativarTab(tabId);
    }, 'Tabs do modal');
    
    // Bot√µes principais
    EventManager.addClickHandler('btn-adicionar', handleAdicionarPontos, 'Adicionar pontos');
    EventManager.addClickHandler('btn-remover', handleRemoverPontos, 'Remover pontos');
    
    // ‚ú® REFATORADO: Migrar para EventManager (eliminar addEventListener duplicados)
    EventManager.addClickHandler('btn-avulso-add', handleAvulsoAdd, 'Adicionar pontos avulsos');
    EventManager.addClickHandler('btn-avulso-remove', handleAvulsoRemove, 'Remover pontos avulsos');
    EventManager.addClickHandler('btn-compartilhar', handleCompartilharHistorico, 'Compartilhar hist√≥rico');
    
    // Filtros e controles adicionais
    EventManager.addChangeHandler('filtro-filho', handleFiltroHistorico, 'Filtro por filho');
    EventManager.addChangeHandler('filtro-periodo', handleFiltroPeriodo, 'Filtro por per√≠odo');
    EventManager.addChangeHandler('data-inicio', handleFiltroHistorico, 'Data in√≠cio personalizada');
    EventManager.addChangeHandler('data-fim', handleFiltroHistorico, 'Data fim personalizada');
    
    // ‚ú® NOVA: Configurar eventos dos dropdowns customizados
    configurarEventosDropdown();
    
    console.log('‚úÖ Configura√ß√£o de eventos conclu√≠da');
}

// Configurar event listeners
// ‚ú® REMOVIDO: Carregar nomes do localStorage - tudo na nuvem agora
function carregarNomes() {
    console.log('‚òÅÔ∏è Nomes carregados da nuvem (MongoDB)');
}

// ‚ú® REFATORADO: Carregar atividades apenas da nuvem
async function carregarAtividades() {
    console.log('‚òÅÔ∏è Carregando atividades da nuvem (MongoDB)...');
    
    try {
        // Carregar atividades do MongoDB
        const response = await fetch('/api/atividades');
        console.log('üì° Resposta do servidor:', response.status, response.statusText);
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìä Dados recebidos:', data);
            
            atividadesPositivas = data.positivas || [];
            atividadesNegativas = data.negativas || [];
            
            console.log('‚úÖ Atividades carregadas da nuvem:', {
                positivas: atividadesPositivas.length,
                negativas: atividadesNegativas.length,
                total: data.total || 0
            });
            
            // Log detalhado das atividades
            if (atividadesPositivas.length > 0) {
                console.log('‚ûï Atividades positivas:', atividadesPositivas.map(a => `${a.nome} (${a.pontos} pts)`));
            }
            if (atividadesNegativas.length > 0) {
                console.log('‚ûñ Atividades negativas:', atividadesNegativas.map(a => `${a.nome} (${a.pontos} pts)`));
            }
        } else {
            console.error('‚ùå Erro ao carregar atividades da nuvem:', response.status, response.statusText);
            mostrarAvisoOffline('N√£o foi poss√≠vel carregar as atividades do servidor. Verifique sua conex√£o com a internet.');
            atividadesPositivas = [];
            atividadesNegativas = [];
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar atividades da nuvem:', error);
        mostrarAvisoOffline('Erro de conex√£o com o servidor. Verifique sua internet e tente novamente.');
        atividadesPositivas = [];
        atividadesNegativas = [];
    }
}

// ‚ú® REMOVIDO: Migra√ß√£o de dados antigos - tudo na nuvem agora
function migrarDadosAntigos() {
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - sem migra√ß√£o necess√°ria');
}

// ‚ú® REMOVIDO: Verifica√ß√£o de dados corrompidos - tudo na nuvem agora
function verificarELimparDadosCorrompidos() {
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - sem verifica√ß√£o local necess√°ria');
}

// ‚ú® REMOVIDO: Salvar nomes no localStorage - tudo na nuvem agora
function salvarNomes() {
    console.log('‚òÅÔ∏è Nomes salvos na nuvem (MongoDB)');
}

// ‚ú® ATUALIZADO: Salvar atividades no localStorage E MongoDB
async function salvarAtividades() {
    // ‚ú® NOVA: Validar dados antes de salvar
    console.log('üîÑ Salvando atividades...', {
        positivas: atividadesPositivas.length,
        negativas: atividadesNegativas.length
    });
    
    // Validar e limpar atividades antes de salvar
    atividadesPositivas = atividadesPositivas.filter(atividade => 
        atividade && atividade.nome && atividade.pontos !== undefined
    ).map(atividade => ({
        ...atividade,
        tipo: atividade.tipo || 'positiva'
    }));
    
    atividadesNegativas = atividadesNegativas.filter(atividade => 
        atividade && atividade.nome && atividade.pontos !== undefined
    ).map(atividade => ({
        ...atividade,
        tipo: atividade.tipo || 'negativa'
    }));
    
    // Salvar no localStorage (backup local)
    localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
    localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
    
    // Salvar no MongoDB (sincroniza√ß√£o entre dispositivos)
    if (socket && socket.connected) {
        try {
            const todasAtividades = [...atividadesPositivas, ...atividadesNegativas];
            
            console.log('‚òÅÔ∏è Enviando para MongoDB:', todasAtividades.length, 'atividades');
            
            const response = await fetch('/api/salvar-atividades', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ atividades: todasAtividades })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const resultado = await response.json();
            if (resultado.success) {
                console.log('‚úÖ Atividades sincronizadas com MongoDB:', {
                    positivas: atividadesPositivas.length,
                    negativas: atividadesNegativas.length,
                    total: todasAtividades.length
                });
                return true; // ‚ú® NOVO: Retornar sucesso
            } else {
                console.error('‚ùå Erro ao sincronizar atividades:', resultado.error);
                throw new Error(resultado.error);
            }
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o de atividades:', error);
            // Mostrar notifica√ß√£o de erro
            mostrarNotificacao('‚ö†Ô∏è Erro ao sincronizar atividades com servidor', 'error');
            return false; // ‚ú® NOVO: Retornar erro
        }
    } else {
        console.log('üì± Sem conex√£o - atividades salvas apenas localmente');
        mostrarNotificacao('üì± Atividades salvas localmente (sem conex√£o)', 'warning');
        return true; // ‚ú® NOVO: Considerar sucesso local
    }
    
    console.log('üíæ Atividades salvas localmente:', {
        positivas: atividadesPositivas.length,
        negativas: atividadesNegativas.length
    });
    
    return true; // ‚ú® NOVO: Retornar sucesso por padr√£o
}

// ‚ú® NOVA: Sincronizar atividades do MongoDB
async function sincronizarAtividades() {
    console.log('ÔøΩ sincronizarAtividades() chamada');
    
    try {
        console.log('üîÑ Sincronizando atividades do MongoDB...');
        const response = await fetch('/api/sincronizar-atividades');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const resultado = await response.json();
        console.log('üìä Resposta do servidor:', resultado);
        
        if (resultado.success && resultado.atividades) {
            console.log('üìä DEBUG: Atividades recebidas do servidor:', resultado.atividades);
            
            // ‚ú® CORRE√á√ÉO: Garantir que todas as atividades tenham ID v√°lido
            const atividadesComId = resultado.atividades.map(atividade => ({
                ...atividade,
                id: atividade.id || atividade._id || Date.now() + Math.random()
            }));
            
            console.log('üìä DEBUG: Atividades ap√≥s normaliza√ß√£o de ID:', atividadesComId);
            
            // Separar atividades por tipo
            console.log('üîç DEBUG: Separando atividades por tipo...');
            
            atividadesPositivas = atividadesComId
                .filter(atividade => {
                    const isPositiva = atividade.tipo === 'positiva';
                    console.log(`üìä Atividade "${atividade.nome}" - tipo: "${atividade.tipo}" - √© positiva: ${isPositiva}`);
                    return isPositiva;
                })
                .sort((a, b) => a.nome.localeCompare(b.nome));
            
            atividadesNegativas = atividadesComId
                .filter(atividade => {
                    const isNegativa = atividade.tipo === 'negativa';
                    console.log(`üìä Atividade "${atividade.nome}" - tipo: "${atividade.tipo}" - √© negativa: ${isNegativa}`);
                    return isNegativa;
                })
                .sort((a, b) => a.nome.localeCompare(b.nome));
            
            console.log('üìä DEBUG: Resultados da separa√ß√£o:', {
                totalRecebidas: atividadesComId.length,
                positivasEncontradas: atividadesPositivas.length,
                negativasEncontradas: atividadesNegativas.length,
                listaPositivas: atividadesPositivas,
                listaNegativas: atividadesNegativas
            });
            
            // Salvar no localStorage como backup
            localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
            localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
            
            // Atualizar interface
            console.log('üîÑ DEBUG: For√ßando atualiza√ß√£o da interface...');
            console.log('üìã DEBUG: Atividades carregadas:', {
                positivas: atividadesPositivas,
                negativas: atividadesNegativas
            });
            
            atualizarSelectsAtividades();
            
            // ‚ú® NOVA: For√ßar atualiza√ß√£o da lista com delay
            setTimeout(() => {
                console.log('üîÑ DEBUG: For√ßando atualiza√ß√£o da lista de atividades...');
                atualizarListaAtividades();
            }, 100);
            
            console.log('‚òÅÔ∏è Atividades sincronizadas do MongoDB:', {
                positivas: atividadesPositivas.length,
                negativas: atividadesNegativas.length,
                total: resultado.atividades.length
            });
        } else {
            console.log('üì± Nenhuma atividade no MongoDB');
            mostrarAvisoOffline('Nenhuma atividade encontrada no servidor.');
            atividadesPositivas = [];
            atividadesNegativas = [];
        }
    } catch (error) {
        console.error('‚ùå Erro ao sincronizar atividades do MongoDB:', error);
        mostrarAvisoOffline('Erro ao sincronizar atividades com o servidor. Verifique sua conex√£o.');
        atividadesPositivas = [];
        atividadesNegativas = [];
    }
}

// ‚ú® REMOVIDO: Sistema agora funciona 100% online sem fallbacks

// ‚ú® NOVA: Fun√ß√£o para mostrar aviso quando offline
function mostrarAvisoOffline(mensagem) {
    console.error('üåê AVISO OFFLINE:', mensagem);
    
    // Mostrar toast de erro
    if (typeof mostrarToast === 'function') {
        mostrarToast(mensagem, 'error');
    }
    
    // Mostrar alerta nativo como backup
    setTimeout(() => {
        alert(`‚ö†Ô∏è ERRO DE CONEX√ÉO\n\n${mensagem}\n\nO sistema precisa de conex√£o com a internet para funcionar.`);
    }, 1000);
    
    // Adicionar indicador visual na interface
    const statusIndicator = document.getElementById('status-indicator');
    if (statusIndicator) {
        statusIndicator.innerHTML = 'üåê Offline';
        statusIndicator.className = 'status-offline';
    }
}

// ‚ú® NOVA: Fun√ß√£o para verificar status da conex√£o
async function verificarStatusConexao() {
    try {
        const response = await fetch('/api/status', { 
            method: 'GET',
            cache: 'no-cache',
            timeout: 5000
        });
        
        if (response.ok) {
            const statusIndicator = document.getElementById('status-indicator');
            if (statusIndicator) {
                statusIndicator.innerHTML = 'üåê Online';
                statusIndicator.className = 'status-online';
            }
            return true;
        } else {
            throw new Error('Servidor n√£o respondeu corretamente');
        }
    } catch (error) {
        console.error('‚ùå Erro de conex√£o:', error);
        const statusIndicator = document.getElementById('status-indicator');
        if (statusIndicator) {
            statusIndicator.innerHTML = 'üåê Offline';
            statusIndicator.className = 'status-offline';
        }
        return false;
    }
}

// ‚ú® NOVA: Iniciar verifica√ß√£o peri√≥dica de status
function iniciarVerificacaoStatus() {
    // Verificar a cada 30 segundos
    setInterval(verificarStatusConexao, 30000);
    
    // Verificar imediatamente
    verificarStatusConexao();
}

// ‚ú® DEBUG: Fun√ß√£o global para testar atividades
window.debugAtividades = function() {
    console.log('üîç === DEBUG ATIVIDADES ===');
    console.log('üìä Arrays atuais:', {
        atividadesPositivas: atividadesPositivas,
        atividadesNegativas: atividadesNegativas,
        positivasLength: atividadesPositivas.length,
        negativasLength: atividadesNegativas.length
    });
    
    console.log('üì± localStorage:', {
        positivas: localStorage.getItem('atividadesPositivas'),
        negativas: localStorage.getItem('atividadesNegativas')
    });
    
    console.log('üéØ Elementos DOM:', {
        listaPositivas: DomUtils.getElementById('lista-atividades-positivas'),
        listaNegativas: DomUtils.getElementById('lista-atividades-negativas')
    });
    
    console.log('üîÑ For√ßando atualiza√ß√£o...');
    atualizarListaAtividades();
}

// ‚ú® NOVA: Fun√ß√£o para for√ßar carregamento do MongoDB
window.forcarCarregamentoMongoDB = async function() {
    console.log('üîÑ === FOR√áANDO CARREGAMENTO DO MONGODB ===');
    
    try {
        console.log('üì° Fazendo requisi√ß√£o para /api/atividades...');
        const response = await fetch('/api/atividades');
        console.log('üì° Status da resposta:', response.status, response.statusText);
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìä Dados recebidos:', data);
            
            // Atualizar arrays globais
            atividadesPositivas = data.positivas || [];
            atividadesNegativas = data.negativas || [];
            
            console.log('‚úÖ Arrays atualizados:', {
                positivas: atividadesPositivas.length,
                negativas: atividadesNegativas.length,
                total: data.total
            });
            
            // Salvar no localStorage como backup
            localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
            localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
            
            // For√ßar atualiza√ß√£o da interface
            console.log('üé® Atualizando interface...');
            atualizarListaAtividades();
            
            return true;
        } else {
            console.error('‚ùå Erro na resposta:', response.status, response.statusText);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o:', error);
        return false;
    }
}

// ‚ú® TESTE DIRETO: Fun√ß√£o para for√ßar carregamento das atividades do MongoDB
window.forcarCarregamentoMongoDB = async function() {
    console.log('üîÑ === FOR√áANDO CARREGAMENTO DO MONGODB ===');
    
    try {
        const response = await fetch('/api/sincronizar-atividades');
        const resultado = await response.json();
        
        console.log('üìä Dados recebidos:', resultado);
        
        if (resultado.success && resultado.atividades) {
            // Limpar arrays primeiro
            atividadesPositivas = [];
            atividadesNegativas = [];
            
            // Processar atividades
            resultado.atividades.forEach(atividade => {
                console.log('üìù Processando:', atividade);
                if (atividade.tipo === 'positiva') {
                    atividadesPositivas.push(atividade);
                } else if (atividade.tipo === 'negativa') {
                    atividadesNegativas.push(atividade);
                }
            });
            
            // Ordenar
            atividadesPositivas.sort((a, b) => a.nome.localeCompare(b.nome));
            atividadesNegativas.sort((a, b) => a.nome.localeCompare(b.nome));
            
            console.log('‚úÖ Arrays atualizados:', {
                positivas: atividadesPositivas,
                negativas: atividadesNegativas
            });
            
            // Salvar no localStorage
            localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
            localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
            
            // For√ßar atualiza√ß√£o da interface
            atualizarListaAtividades();
            
            return true;
        }
    } catch (error) {
        console.error('‚ùå Erro:', error);
        return false;
    }
};

// ‚ú® DESABILITADO: Fun√ß√£o que adicionava atividades padr√£o automaticamente
// Esta fun√ß√£o estava causando problema de atividades voltando ap√≥s F5
/*
function garantirAtividadesPadrao() {
    console.log('üîÑ Verificando atividades padr√£o...');
    
    // Verificar se as atividades mencionadas existem
    const temGuardouLouca = atividadesPositivas.some(a => a.nome.toLowerCase().includes('guardou a lou√ßa'));
    const temLavouLouca = atividadesPositivas.some(a => a.nome.toLowerCase().includes('lavou a lou√ßa'));
    
    if (!temGuardouLouca) {
        console.log('‚ûï Adicionando "guardou a lou√ßa"');
        const novaAtividade = {
            id: Date.now() + Math.random(),
            nome: 'guardou a lou√ßa',
            pontos: 10,
            tipo: 'positiva'
        };
        atividadesPositivas.push(novaAtividade);
    }
    
    if (!temLavouLouca) {
        console.log('‚ûï Adicionando "lavou a lou√ßa"');
        const novaAtividade = {
            id: Date.now() + Math.random(),
            nome: 'lavou a lou√ßa',
            pontos: 15,
            tipo: 'positiva'
        };
        atividadesPositivas.push(novaAtividade);
    }
    
    // Salvar no localStorage
    localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
    localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
    
    console.log('‚úÖ Atividades padr√£o verificadas e salvas');
}
*/

// ‚ú® TESTE: Fun√ß√£o para adicionar atividades de teste
window.adicionarAtividadesTeste = function() {
    console.log('üß™ Adicionando atividades de teste...');
    
    const atividadesTestePositivas = [
        { id: Date.now() + 1, nome: 'guardou a lou√ßa', pontos: 10, tipo: 'positiva' },
        { id: Date.now() + 2, nome: 'lavou a lou√ßa', pontos: 15, tipo: 'positiva' },
        { id: Date.now() + 3, nome: 'arrumou o quarto', pontos: 20, tipo: 'positiva' }
    ];
    
    const atividadesTesteNegativas = [
        { id: Date.now() + 4, nome: 'n√£o guardou a lou√ßa', pontos: 5, tipo: 'negativa' },
        { id: Date.now() + 5, nome: 'brigou com irm√£o', pontos: 10, tipo: 'negativa' }
    ];
    
    // Salvar no localStorage
    localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesTestePositivas));
    localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesTesteNegativas));
    
    // Atualizar vari√°veis globais
    atividadesPositivas = atividadesTestePositivas;
    atividadesNegativas = atividadesTesteNegativas;
    
    console.log('‚úÖ Atividades de teste adicionadas');
    console.log('üîÑ For√ßando atualiza√ß√£o da interface...');
    
    atualizarSelectsAtividades();
    atualizarListaAtividades();
    
    return { positivas: atividadesTestePositivas, negativas: atividadesTesteNegativas };
};









// ‚ú® NOVA: Sincronizar logs do MongoDB
async function sincronizarLogs() {
    try {
        console.log('üîÑ Sincronizando logs do MongoDB...');
        const response = await fetch('/api/sincronizar-logs');
        const resultado = await response.json();
        
        if (resultado.success && resultado.logs) {
            // Atualizar logs globais
            logs = resultado.logs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            // Salvar no localStorage como backup
            localStorage.setItem('logs', JSON.stringify(logs));
            
            console.log('‚òÅÔ∏è Logs sincronizados do MongoDB:', {
                total: logs.length
            });
        } else {
            console.log('üì± Nenhum log no MongoDB - carregando do localStorage');
            carregarLogsLocal();
        }
    } catch (error) {
        console.error('‚ùå Erro ao sincronizar logs do MongoDB:', error);
        console.log('üì± Fallback: carregando logs do localStorage');
        carregarLogsLocal();
    }
}

// ‚ú® REMOVIDO: Carregar logs do localStorage - tudo na nuvem agora
function carregarLogsLocal() {
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - logs carregados do MongoDB');
}

// ‚ú® REFATORADO: Salvar logs apenas na nuvem
async function salvarLogs() {
    // Salvar apenas no MongoDB
    if (logs.length > 0) {
        try {
            const response = await fetch('/api/salvar-logs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ logs })
            });
            
            const resultado = await response.json();
            if (resultado.success) {
                console.log('‚òÅÔ∏è Logs salvos na nuvem (MongoDB):', {
                    total: logs.length
                });
            } else {
                console.error('‚ùå Erro ao salvar logs na nuvem:', resultado.error);
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar logs na nuvem:', error);
        }
    }
}

// ‚ú® REMOVIDO: Limpar cache local - tudo na nuvem agora
function limparCacheAtividades() {
    console.log('‚òÅÔ∏è Sistema funcionando apenas na nuvem - sem cache local');
}

// Renderizar dashboard de pontos din√¢mico
function renderizarDashboard() {
    console.log('üéØ RENDERIZAR DASHBOARD CHAMADO');
    console.log('üìä Array filhos:', filhos);
    console.log('üìä Quantidade de filhos:', filhos.length);
    
    const container = DomUtils.getElement('.pontos-display');
    console.log('üì¶ Container encontrado:', container);
    
    if (!container) {
        console.log('‚ÑπÔ∏è Container .pontos-display n√£o encontrado - provavelmente na p√°gina de configura√ß√µes');
        return;
    }
    
    container.innerHTML = '';
    console.log('üßπ Container limpo');
    
    if (filhos.length === 0) {
        console.warn('‚ö†Ô∏è Array filhos est√° vazio!');
        container.innerHTML = '<p>Nenhuma crian√ßa encontrada. Verifique a sincroniza√ß√£o.</p>';
        return;
    }
    
    filhos.forEach((filho, index) => {
        console.log(`üë∂ Renderizando filho ${index}:`, filho);
        
        const filhoElement = document.createElement('div');
        filhoElement.className = 'filho-pontos';
        
        // Verificar se a cor existe e tem gradiente
        let background = '#ccc'; // cor padr√£o
        if (filho.cor && filho.cor.gradiente) {
            background = filho.cor.gradiente;
        } else if (filho.cor && typeof filho.cor === 'string') {
            background = filho.cor;
        }
        
        filhoElement.style.background = background;
        filhoElement.innerHTML = `
            <h3><span>${filho.emoji || 'üë∂'} ${filho.nome || 'Sem nome'}</span></h3>
            <span class="pontos">${filho.pontos || 0}</span>
        `;
        
        container.appendChild(filhoElement);
        console.log(`‚úÖ Filho ${filho.nome} adicionado ao container`);
    });
    
    console.log('üéØ DASHBOARD RENDERIZADO COM SUCESSO');
}

// Renderizar selects de filhos
function renderizarSelects() {
    console.log('üîÑ Renderizando selects de filhos...');
    
    const selects = [
        'filho-adicionar',
        'filho-remover', 
        'filho-avulso-add',
        'filho-avulso-remove',
        'filtro-filho'
    ];
    
    let selectsEncontrados = 0;
    
    selects.forEach(selectId => {
        // Tentar diferentes m√©todos para encontrar o elemento
        let select = DomUtils.getElementById(selectId);
        
        // Se n√£o encontrou com DomUtils, tentar diretamente
        if (!select) {
            select = document.getElementById(selectId);
        }
        
        console.log(`üîç Select ${selectId}:`, select);
        
        if (select) {
            selectsEncontrados++;
            // Salvar valor atual
            const valorAtual = select.value;
            
            // Limpar op√ß√µes
            select.innerHTML = '';
            
            // Adicionar op√ß√£o padr√£o
            if (selectId === 'filtro-filho') {
                select.innerHTML = '<option value="">Todos os filhos</option>';
            } else {
                select.innerHTML = '<option value="">Selecione o filho</option>';
            }
            
            // Adicionar filhos
            filhos.forEach(filho => {
                const option = document.createElement('option');
                option.value = filho.id;
                option.textContent = `${filho.emoji} ${filho.nome}`;
                select.appendChild(option);
            });
            
            // Restaurar valor se ainda existir
            if (valorAtual && select.querySelector(`option[value="${valorAtual}"]`)) {
                select.value = valorAtual;
            }
            
            console.log(`‚úÖ Select ${selectId} atualizado com ${filhos.length} filhos`);
        } else {
            console.log(`‚ÑπÔ∏è Select ${selectId} n√£o encontrado - provavelmente na p√°gina de configura√ß√µes`);
        }
    });
    
    console.log(`üìä Resumo: ${selectsEncontrados} selects encontrados de ${selects.length} esperados`);
    
    if (selectsEncontrados === 0) {
        console.log('‚ÑπÔ∏è Nenhum select encontrado - provavelmente na p√°gina de configura√ß√µes');
    }
}

// Atualizar toda a interface
function atualizarInterface() {
    console.log('üé® Atualizando interface com', filhos.length, 'filhos');
    renderizarDashboard();
    renderizarSelects();
    
    // ‚ú® CORRE√á√ÉO: S√≥ renderizar lista de filhos se o modal estiver aberto
    const modalConfiguracao = DomUtils.getElementById('modal-configuracoes');
    if (modalConfiguracao && modalConfiguracao.classList.contains('active')) {
        renderizarListaFilhos();
    }
    
    // Atualizar hist√≥rico tamb√©m
    const filtroAtual = DomUtils.getElement('filtro-filho')?.value || 'todos';
    atualizarHistorico(filtroAtual);
    
    // ‚ú® NOVO: Atualizar select de crian√ßas para lembretes
    if (typeof carregarSelectCriancas === 'function') {
        carregarSelectCriancas();
    }
    
    console.log('‚úÖ Interface atualizada (incluindo hist√≥rico e lembretes)');
}

// Encontrar filho por ID
function encontrarFilho(id) {
    console.log('üîç DEBUG: encontrarFilho() chamada com ID:', id, 'tipo:', typeof id);
    console.log('üîç DEBUG: Filhos dispon√≠veis:', filhos);
    
    // Converter para n√∫mero se for string
    const idNum = typeof id === 'string' ? parseInt(id) : id;
    console.log('üîç DEBUG: ID convertido:', idNum);
    
    const filho = filhos.find(filho => filho.id == idNum);
    console.log('üîç DEBUG: Filho encontrado:', filho);
    
    return filho;
}

// Gerar ID √∫nico para novo filho
function gerarNovoId() {
    return filhos.length > 0 ? Math.max(...filhos.map(f => f.id)) + 1 : 1;
}

// Atualizar listas de atividades
function atualizarListaAtividades() {
    console.log('üîÑ atualizarListaAtividades() chamada');
    
    // 1. Buscar elementos DOM
    const listaPositivas = DomUtils.getElementById('lista-atividades-positivas');
    const listaNegativas = DomUtils.getElementById('lista-atividades-negativas');
    
    console.log('üîç Elementos DOM encontrados:', {
        listaPositivas: !!listaPositivas,
        listaNegativas: !!listaNegativas
    });
    
    // 2. Se elementos n√£o existem, tentar novamente com retry
    if (!listaPositivas || !listaNegativas) {
        console.log('üìã Listas de atividades n√£o encontradas - tentando novamente...');
        
        // Retry com m√∫ltiplas tentativas
        let tentativas = 0;
        const maxTentativas = 3;
        
        const tentarNovamente = () => {
            tentativas++;
            console.log(`üîÑ Tentativa ${tentativas} de carregar lista de atividades...`);
            
            const listaPositivas2 = DomUtils.getElementById('lista-atividades-positivas');
            const listaNegativas2 = DomUtils.getElementById('lista-atividades-negativas');
            
            if (listaPositivas2 && listaNegativas2) {
                console.log('‚úÖ Elementos encontrados na tentativa', tentativas);
                renderizarAtividades(listaPositivas2, listaNegativas2);
            } else if (tentativas < maxTentativas) {
                setTimeout(tentarNovamente, 500);
            } else {
                console.log('‚ö†Ô∏è Elementos n√£o dispon√≠veis ap√≥s', maxTentativas, 'tentativas');
                console.log('üí° Modal de configura√ß√µes pode n√£o estar aberto');
            }
        };
        
        setTimeout(tentarNovamente, 500);
        return;
    }
    
    // 3. Renderizar atividades
    renderizarAtividades(listaPositivas, listaNegativas);
}

// ‚ú® NOVA: Fun√ß√£o auxiliar para renderizar atividades
function renderizarAtividades(listaPositivas, listaNegativas) {
    console.log('üé® DEBUG: renderizarAtividades() chamada');
    console.log('üìã DEBUG: Arrays de atividades:', {
        atividadesPositivas: atividadesPositivas,
        atividadesNegativas: atividadesNegativas,
        positivasLength: atividadesPositivas.length,
        negativasLength: atividadesNegativas.length
    });
    
    // Limpar listas
    listaPositivas.innerHTML = '';
    listaNegativas.innerHTML = '';
    
    // ‚ú® NOVO: Ordenar atividades alfabeticamente antes de exibir
    const positivasOrdenadas = [...atividadesPositivas].sort((a, b) => a.nome.localeCompare(b.nome));
    const negativasOrdenadas = [...atividadesNegativas].sort((a, b) => a.nome.localeCompare(b.nome));
    
    console.log('üìä DEBUG: Atividades ordenadas:', {
        positivasOrdenadas: positivasOrdenadas,
        negativasOrdenadas: negativasOrdenadas,
        positivasLength: positivasOrdenadas.length,
        negativasLength: negativasOrdenadas.length
    });
    
    // Verificar se h√° atividades para mostrar
    if (positivasOrdenadas.length === 0) {
        console.log('‚ö†Ô∏è DEBUG: Nenhuma atividade positiva encontrada - mostrando mensagem vazia');
        listaPositivas.innerHTML = '<p class="no-activities">üìù Nenhuma atividade positiva cadastrada ainda.</p>';
    } else {
        console.log(`‚úÖ DEBUG: ${positivasOrdenadas.length} atividades positivas encontradas - criando elementos`);
        // Adicionar atividades positivas em ordem alfab√©tica
        positivasOrdenadas.forEach(atividade => {
            console.log('‚ûï DEBUG: Criando item para atividade positiva:', atividade);
            const item = criarItemAtividade(atividade, 'positiva');
            console.log('‚ûï DEBUG: Item criado:', item);
            listaPositivas.appendChild(item);
            console.log('‚ûï DEBUG: Item adicionado √† lista');
        });
    }
    
    if (negativasOrdenadas.length === 0) {
        listaNegativas.innerHTML = '<p class="no-activities">üìù Nenhuma atividade negativa cadastrada ainda.</p>';
    } else {
        // Adicionar atividades negativas em ordem alfab√©tica
        negativasOrdenadas.forEach(atividade => {
            console.log('‚ûñ Criando item para atividade negativa:', atividade.nome);
            const item = criarItemAtividade(atividade, 'negativa');
            listaNegativas.appendChild(item);
        });
    }
    
    console.log('üìã Listas de atividades atualizadas:', {
        positivas: positivasOrdenadas.length,
        negativas: negativasOrdenadas.length
    });
}

// Criar item de atividade
function criarItemAtividade(atividade, tipo) {
    const item = document.createElement('div');
    item.className = `atividade-item atividade-${tipo}`;
    item.dataset.id = atividade.id;
    
    // ‚ú® MELHORADO: Visual mais claro com √≠cones e cores
    const icone = tipo === 'positiva' ? '‚úÖ' : '‚ùå';
    const sinal = tipo === 'positiva' ? '+' : '-';
    const corClasse = tipo === 'positiva' ? 'text-success' : 'text-danger';
    
    item.innerHTML = `
        <div class="atividade-info">
            <div class="atividade-header">
                <span class="atividade-icone">${icone}</span>
                <div class="atividade-nome">${atividade.nome}</div>
            </div>
            <div class="atividade-pontos ${corClasse}">
                <strong>${sinal}${atividade.pontos}</strong> pontos
            </div>
        </div>
        <div class="atividade-acoes">
            <button class="btn-edit btn btn-sm btn-primary" onclick="editarAtividade(${atividade.id}, '${tipo}')" title="Editar atividade">
                ‚úèÔ∏è
            </button>
            <button class="btn-delete btn btn-sm btn-danger" onclick="deletarAtividade(${atividade.id}, '${tipo}')" title="Deletar atividade">
                üóëÔ∏è
            </button>
        </div>
    `;
    
    return item;
}

// Editar atividade
async function editarAtividade(id, tipo) {
    const atividades = tipo === 'positiva' ? atividadesPositivas : atividadesNegativas;
    const atividade = atividades.find(a => a.id === id);
    
    if (!atividade) return;
    
    const novoNome = prompt('Novo nome da atividade:', atividade.nome);
    if (!novoNome) return;
    
    const novosPontos = parseInt(prompt('Novos pontos:', atividade.pontos));
    if (isNaN(novosPontos) || novosPontos < 1) return;
    
    atividade.nome = novoNome;
    atividade.pontos = novosPontos;
    
    await salvarAtividades();
    atualizarSelectsAtividades();
    atualizarListaAtividades();
    
    // ‚ú® NOVO: Sincronizar ap√≥s editar atividade
    await sincronizarAposAcao('editar atividade');
    
    mostrarNotificacao('‚úÖ Atividade editada com sucesso!', 'success');
}

// Deletar atividade
// Deletar atividade
async function deletarAtividade(id, tipo) {
    // ‚ú® CORRE√á√ÉO: Usar modal de confirma√ß√£o padr√£o do app
    confirmarAcao('Tem certeza que quer deletar esta atividade?', async (confirmado) => {
        if (!confirmado) return;
        
        if (tipo === 'positiva') {
            atividadesPositivas = atividadesPositivas.filter(a => a.id !== id);
        } else {
            atividadesNegativas = atividadesNegativas.filter(a => a.id !== id);
        }
        
        await salvarAtividades();
        atualizarSelectsAtividades();
        atualizarListaAtividades();
        
        // ‚ú® NOVO: Sincronizar ap√≥s deletar atividade
        await sincronizarAposAcao('deletar atividade');
        
        mostrarNotificacao('üóëÔ∏è Atividade deletada!', 'warning');
    });
}

// Nova atividade positiva
// Nova atividade positiva
async function handleNovaAtividadePositiva(e) {
    e.preventDefault();
    
    const nome = DomUtils.getValue('nova-atividade-positiva');
    const pontos = parseInt(DomUtils.getValue('pontos-atividade-positiva'));
    
    if (!nome || isNaN(pontos) || pontos < 1) {
        alert('Por favor, preencha todos os campos corretamente!');
        return;
    }
    
    const novaAtividade = {
        id: Date.now(),
        nome: nome,
        pontos: pontos,
        tipo: 'positiva'
    };
    
    atividadesPositivas.push(novaAtividade);
    
    // ‚ú® NOVO: Adicionar log do cadastro de atividade
    adicionarLog('cadastrar_atividade_positiva', {
        nome_atividade: nome,
        pontos: pontos,
        total_atividades_positivas: atividadesPositivas.length
    });
    
    await salvarAtividades();
    atualizarSelectsAtividades();
    atualizarListaAtividades();
    
    // ‚ú® NOVO: Sincronizar ap√≥s adicionar atividade
    await sincronizarAposAcao('adicionar atividade positiva');
    
    // Limpar formul√°rio
    e.target.reset();
    DomUtils.setValue('pontos-atividade-positiva', '10');
    
    mostrarNotificacao('‚úÖ Atividade positiva adicionada!', 'success');
}

// Nova atividade negativa
async function handleNovaAtividadeNegativa(e) {
    e.preventDefault();
    
    const nome = DomUtils.getValue('nova-atividade-negativa');
    const pontos = parseInt(DomUtils.getValue('pontos-atividade-negativa'));
    
    if (!nome || isNaN(pontos) || pontos < 1) {
        alert('Por favor, preencha todos os campos corretamente!');
        return;
    }
    
    const novaAtividade = {
        id: Date.now(),
        nome: nome,
        pontos: pontos,
        tipo: 'negativa'
    };
    
    atividadesNegativas.push(novaAtividade);
    
    // ‚ú® NOVO: Adicionar log do cadastro de atividade
    adicionarLog('cadastrar_atividade_negativa', {
        nome_atividade: nome,
        pontos: pontos,
        total_atividades_negativas: atividadesNegativas.length
    });
    
    await salvarAtividades();
    atualizarSelectsAtividades();
    atualizarListaAtividades();
    
    // ‚ú® NOVO: Sincronizar ap√≥s adicionar atividade
    await sincronizarAposAcao('adicionar atividade negativa');
    
    // Limpar formul√°rio
    e.target.reset();
    DomUtils.setValue('pontos-atividade-negativa', '5');
    
    mostrarNotificacao('‚úÖ Atividade negativa adicionada!', 'success');
}

// Atividade selecionada para adicionar
function handleAtividadeAdicionar(e) {
    const atividadeId = e.target.value;
    
    if (atividadeId === 'personalizada') {
        DomUtils.getElement('motivo-adicionar').focus();
        return;
    }
    
    const atividade = atividadesPositivas.find(a => a.id === parseInt(atividadeId));
    if (atividade) {
        DomUtils.setValue('pontos-adicionar', atividade.pontos);
        DomUtils.setValue('motivo-adicionar', atividade.nome);
    }
}

// Atividade selecionada para remover
function handleAtividadeRemover(e) {
    const atividadeId = e.target.value;
    
    if (atividadeId === 'personalizada') {
        DomUtils.getElement('motivo-remover').focus();
        return;
    }
    
    const atividade = atividadesNegativas.find(a => a.id === parseInt(atividadeId));
    if (atividade) {
        DomUtils.setValue('pontos-remover', atividade.pontos);
        DomUtils.setValue('motivo-remover', atividade.nome);
    }
}

// Salvar nomes
function handleSalvarNomes(e) {
    e.preventDefault();
    
    nomes.filho1 = DomUtils.getValue('nome1');
    nomes.filho2 = DomUtils.getValue('nome2');
    nomes.filho3 = DomUtils.getValue('nome3');
    
    salvarNomes();
    atualizarNomes();
    
    mostrarNotificacao('‚úÖ Nomes salvos com sucesso!', 'success');
}

// Adicionar pontos
async function handleAdicionarPontos(e) {
    e.preventDefault();
    console.log('üéØ handleAdicionarPontos chamado');
    
    // ‚ú® ATUALIZADO: Usar dropdown customizado
    const filhoSelect = DomUtils.getElementById('filho-adicionar');
    const hiddenSelect = DomUtils.getElementById('atividade-adicionar');
    
    console.log('üîç Elementos encontrados:', {
        filhoSelect,
        hiddenSelect,
        filhoValue: filhoSelect?.value,
        atividadeValue: hiddenSelect?.value
    });
    
    if (!filhoSelect || !hiddenSelect) {
        console.error('‚ùå Elementos do formul√°rio n√£o encontrados');
        mostrarNotificacao('‚ùå Erro: Elementos do formul√°rio n√£o encontrados!', 'error');
        return;
    }
    
    const filhoId = filhoSelect.value;
    const atividadeValue = hiddenSelect.value;
    
    console.log('üîç DEBUG handleAdicionarPontos:', { filhoId, atividadeValue });
    
    if (!filhoId || !atividadeValue) {
        mostrarNotificacao('‚ùå Por favor, selecione um filho e uma atividade!', 'error');
        return;
    }
    
    // ‚ú® NOVA L√ìGICA: Parsear atividade do JSON
    let atividade;
    try {
        atividade = JSON.parse(atividadeValue);
        console.log('üîç DEBUG atividade encontrada:', atividade);
    } catch (error) {
        console.error('‚ùå Erro ao parsear atividade:', error);
        mostrarNotificacao('‚ùå Erro na atividade selecionada!', 'error');
        return;
    }
    
    const filho = encontrarFilho(filhoId);
    
    if (!filho) {
        mostrarNotificacao('‚ùå Filho n√£o encontrado!', 'error');
        return;
    }
    
    // ‚ú® REFATORADO: Usar ApiService para chamada de API
    const result = await ApiService.pontosOperation('adicionar', {
        nome: filho.nome,
        pontos: atividade.pontos,
        atividade: atividade.nome,
        tipo: 'adicionar'
    });
    
    if (result.success) {
        // Atualizar pontos localmente
        const pontosAntes = filho.pontos;
        filho.pontos += atividade.pontos;
        
        // Adicionar log da a√ß√£o
        adicionarLog('adicionar_pontos', {
            filho: filho.nome,
            atividade: atividade.nome,
            pontos: atividade.pontos,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'positiva'
        });
        
        // Notificar outros dispositivos via WebSocket
        // ‚ú® REFATORADO: Usar WebSocketSync em vez de notificarAlteracaoWebSocket
        WebSocketSync.sincronizarPontos({
            tipo: 'adicionar',
            nome: filho.nome,
            pontos: filho.pontos,
            atividade: atividade.nome,
            timestamp: new Date().toISOString()
        });
        
        // ‚ú® REFATORADO: Limpar dropdown customizado
        limparDropdown('adicionar');
        
        // Atualizar interface
        atualizarInterface();
        await salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o
        await sincronizarAposAcao('adicionar pontos');
        
        mostrarNotificacao(`‚úÖ +${atividade.pontos} pontos para ${filho.nome}!`, 'success');
    } else if (result.fallbackOffline) {
        // Fallback offline - continuar opera√ß√£o localmente
        const pontosAntes = filho.pontos;
        filho.pontos += atividade.pontos;
        
        // ‚ú® NOVO: Adicionar opera√ß√£o pendente para sincroniza√ß√£o futura
        adicionarOperacaoPendente({
            nome: filho.nome,
            pontos: atividade.pontos,
            atividade: atividade.nome,
            tipo: 'adicionar'
        });
        
        adicionarLog('adicionar_pontos_offline', {
            filho: filho.nome,
            atividade: atividade.nome,
            pontos: atividade.pontos,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'positiva'
        });
        
        DomUtils.setValue('atividade-adicionar', '');
        atualizarInterface();
        await salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o offline
        await sincronizarAposAcao('adicionar pontos (offline)');
        
        // Notifica√ß√£o mais simples para opera√ß√µes offline
        mostrarNotificacao(`‚úÖ +${atividade.pontos} pontos para ${filho.nome}! (Offline)`, 'success');
    }
}

// Remover pontos
async function handleRemoverPontos(e) {
    e.preventDefault();
    console.log('üéØ handleRemoverPontos chamado');
    
    // ‚ú® ATUALIZADO: Usar dropdown customizado
    const filhoSelect = DomUtils.getElementById('filho-remover');
    const hiddenSelect = DomUtils.getElementById('atividade-remover');
    
    console.log('üîç Elementos encontrados:', {
        filhoSelect,
        hiddenSelect,
        filhoValue: filhoSelect?.value,
        atividadeValue: hiddenSelect?.value
    });
    
    if (!filhoSelect || !hiddenSelect) {
        console.error('‚ùå Elementos do formul√°rio n√£o encontrados');
        mostrarNotificacao('‚ùå Erro: Elementos do formul√°rio n√£o encontrados!', 'error');
        return;
    }
    
    const filhoId = filhoSelect.value;
    const atividadeValue = hiddenSelect.value;
    
    if (!filhoId || !atividadeValue) {
        mostrarNotificacao('‚ùå Por favor, selecione um filho e uma atividade!', 'error');
        return;
    }
    
    // ‚ú® NOVA L√ìGICA: Parsear atividade do JSON
    let atividade;
    try {
        atividade = JSON.parse(atividadeValue);
        console.log('üîç DEBUG atividade encontrada:', atividade);
    } catch (error) {
        console.error('‚ùå Erro ao parsear atividade:', error);
        mostrarNotificacao('‚ùå Erro na atividade selecionada!', 'error');
        return;
    }
    const filho = encontrarFilho(filhoId);
    
    if (!filho) {
        mostrarNotificacao('‚ùå Filho n√£o encontrado!', 'error');
        return;
    }
    
    // ‚ú® REFATORADO: Usar ApiService para chamada de API
    const result = await ApiService.pontosOperation('remover', {
        nome: filho.nome,
        pontos: atividade.pontos,
        atividade: atividade.nome,
        tipo: 'remover'
    });
    
    if (result.success) {
        // Atualizar pontos localmente (permitir pontos negativos)
        const pontosAntes = filho.pontos;
        filho.pontos -= atividade.pontos;
        
        // Adicionar log da a√ß√£o
        adicionarLog('remover_pontos', {
            filho: filho.nome,
            atividade: atividade.nome,
            pontos: atividade.pontos,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'negativa'
        });
        
        // Notificar outros dispositivos via WebSocket
        // ‚ú® REFATORADO: Usar WebSocketSync em vez de notificarAlteracaoWebSocket
        WebSocketSync.sincronizarPontos({
            tipo: 'remover',
            nome: filho.nome,
            pontos: filho.pontos,
            atividade: atividade.nome,
            timestamp: new Date().toISOString()
        });
        
        // ‚ú® REFATORADO: Limpar dropdown customizado
        limparDropdown('remover');
        
        // Atualizar interface
        atualizarInterface();
        await salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o
        await sincronizarAposAcao('remover pontos');
        
        mostrarNotificacao(`‚úÖ -${atividade.pontos} pontos para ${filho.nome}!`, 'success');
    } else if (result.fallbackOffline) {
        // Fallback offline - continuar opera√ß√£o localmente
        const pontosAntes = filho.pontos;
        filho.pontos -= atividade.pontos;
        
        // ‚ú® NOVO: Adicionar opera√ß√£o pendente para sincroniza√ß√£o futura
        adicionarOperacaoPendente({
            nome: filho.nome,
            pontos: atividade.pontos,
            atividade: atividade.nome,
            tipo: 'remover'
        });
        
        adicionarLog('remover_pontos_offline', {
            filho: filho.nome,
            atividade: atividade.nome,
            pontos: atividade.pontos,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'negativa'
        });
        
        limparDropdown('remover');
        atualizarInterface();
        await salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o offline
        await sincronizarAposAcao('remover pontos (offline)');
        
        // Notifica√ß√£o mais simples para opera√ß√µes offline
        mostrarNotificacao(`‚úÖ -${atividade.pontos} pontos para ${filho.nome}! (Offline)`, 'success');
    }
}

// Resetar pontos
            
            // Atualizar hist√≥rico
// Resetar pontos

// Atualizar exibi√ß√£o do hist√≥rico
function atualizarHistorico(filtro = 'todos') {
    // ‚ú® REFATORADO: Usar DomUtils.getElementById para acessar container do hist√≥rico
    let historicoContainer = DomUtils.getElementById('historico');
    
    // ‚ú® FALLBACK: Tentar encontrar por querySelector se DomUtils falhar
    if (!historicoContainer) {
        historicoContainer = DomUtils.getElement('historico');
    }
    
    if (!historicoContainer) {
        console.log('üìã Container de hist√≥rico n√£o encontrado - tentando novamente em 500ms...');
        setTimeout(() => {
            console.log('ÔøΩ Segunda tentativa de carregar hist√≥rico...');
            const historicoContainer2 = DomUtils.getElement('historico');
            
            if (historicoContainer2) {
                console.log('‚úÖ Container de hist√≥rico encontrado na segunda tentativa');
                renderizarHistorico(historicoContainer2, filtro);
            } else {
                console.log('‚ö†Ô∏è Container de hist√≥rico ainda n√£o dispon√≠vel - aba pode n√£o estar aberta');
            }
        }, 500);
        return;
    }
    
    console.log('‚úÖ Container de hist√≥rico encontrado:', historicoContainer);
    renderizarHistorico(historicoContainer, filtro);
}

// ‚ú® NOVA: Fun√ß√£o auxiliar para renderizar hist√≥rico
function renderizarHistorico(historicoContainer, filtro = 'todos') {
    // ‚ú® CORRE√á√ÉO: Usar logs ao inv√©s de historico
    // Filtrar APENAS logs de pontos (excluindo TODOS os logs de sistema)
    const nomesCriancasAtivas = filhos.map(f => f.nome.toLowerCase());
    
    const logsDeHistorico = logs.filter(log => {
        // APENAS logs de pontos com crian√ßas que ainda existem
        if ((log.acao === 'adicionar_pontos' || log.acao === 'remover_pontos' || 
             log.acao === 'adicionar_pontos_avulsos' || log.acao === 'remover_pontos_avulsos') && 
            log.detalhes && log.detalhes.filho && log.detalhes.atividade) {
            return nomesCriancasAtivas.includes(log.detalhes.filho.toLowerCase());
        }
        
        // Excluir TODOS os outros logs (sistema, login, logout, cadastrar_filho, etc.)
        return false;
    });
    
    // Filtrar logs baseado no filtro selecionado
    let historicoFiltrado = logsDeHistorico;
    
    if (filtro !== 'todos') {
        const filho = encontrarFilho(filtro);
        if (filho) {
            historicoFiltrado = logsDeHistorico.filter(log => 
                log.detalhes.filho === filho.nome
            );
        }
    }
    
    console.log('üìä Hist√≥rico filtrado:', historicoFiltrado.length, 'itens');
    console.log('üìã Logs de pontos encontrados:', logsDeHistorico.map(log => ({
        acao: log.acao,
        filho: log.detalhes?.filho,
        atividade: log.detalhes?.atividade
    })));
    
    // ‚ú® CORRE√á√ÉO: Usar a fun√ß√£o de atualiza√ß√£o de lista corrigida
    atualizarListaHistoricoComContainer(historicoContainer, historicoFiltrado);
}

// Fun√ß√£o para lidar com o filtro do hist√≥rico
function handleFiltroHistorico() {
    aplicarFiltrosHistorico();
}

// Fun√ß√£o para lidar com o filtro de per√≠odo
function handleFiltroPeriodo() {
    // ‚ú® REFATORADO: Usar DomUtils para filtros
    const periodo = DomUtils.getValue('filtro-periodo');
    const datasPersonalizadas = DomUtils.getElement('filtro-datas-personalizadas');
    
    if (periodo === 'personalizado') {
        datasPersonalizadas.style.display = 'block';
        // Definir data padr√£o (√∫ltimos 30 dias)
        const hoje = new Date();
        const umMesAtras = new Date();
        umMesAtras.setDate(hoje.getDate() - 30);
        
        // ‚ú® REFATORADO: Usar DomUtils para definir datas
        DomUtils.setValue('data-fim', hoje.toISOString().split('T')[0]);
        DomUtils.setValue('data-inicio', umMesAtras.toISOString().split('T')[0]);
    } else {
        datasPersonalizadas.style.display = 'none';
    }
    
    aplicarFiltrosHistorico();
}

// Fun√ß√£o principal para aplicar todos os filtros
function aplicarFiltrosHistorico() {
    // ‚ú® REFATORADO: Usar DomUtils para obter valores de filtros
    const filtroFilho = DomUtils.getValue('filtro-filho');
    const filtroPeriodo = DomUtils.getValue('filtro-periodo');
    
    console.log('üîç Aplicando filtros:', { filtroFilho, filtroPeriodo });
    
    // ‚ú® CORRE√á√ÉO: Usar logs ao inv√©s de historico
    if (!logs || logs.length === 0) {
        atualizarListaHistorico([]);
        return;
    }
    
    // ‚ú® CORRE√á√ÉO: Filtrar APENAS logs de pontos (excluindo TODOS os logs de sistema)
    const nomesCriancasAtivas = filhos.map(f => f.nome.toLowerCase());
    
    let historicoFiltrado = logs.filter(log => {
        // APENAS logs de pontos com crian√ßas que ainda existem
        if ((log.acao === 'adicionar_pontos' || log.acao === 'remover_pontos') && 
            log.detalhes && log.detalhes.filho && log.detalhes.atividade) {
            return nomesCriancasAtivas.includes(log.detalhes.filho.toLowerCase());
        }
        
        // Excluir TODOS os outros logs (sistema, login, logout, cadastrar_filho, etc.)
        return false;
    });
    
    // Filtrar por filho
    if (filtroFilho !== 'todos') {
        const filhoId = parseInt(filtroFilho);
        const filhoSelecionado = filhos.find(f => f.id === filhoId);
        if (filhoSelecionado) {
            historicoFiltrado = historicoFiltrado.filter(item => 
                item.detalhes && (
                    item.detalhes.filho === filhoSelecionado.nome || 
                    item.acao.includes(filhoSelecionado.nome)
                )
            );
        }
    }
    
    // Filtrar por per√≠odo
    if (filtroPeriodo !== 'todos') {
        const hoje = new Date();
        
        console.log('üóìÔ∏è Filtrando por per√≠odo:', filtroPeriodo);
        console.log('üìÖ Data atual:', hoje);
        
        switch (filtroPeriodo) {
            case 'hoje':
                const inicioHoje = new Date();
                inicioHoje.setHours(0, 0, 0, 0);
                const fimHoje = new Date();
                fimHoje.setHours(23, 59, 59, 999);
                
                console.log('üåÖ In√≠cio do dia:', inicioHoje);
                console.log('üåá Fim do dia:', fimHoje);
                
                historicoFiltrado = historicoFiltrado.filter(item => {
                    const dataItem = new Date(item.data || item.timestamp);
                    console.log('‚è∞ Item data:', item.data || item.timestamp, '‚Üí Data:', dataItem);
                    const dentroDoIntervalo = dataItem >= inicioHoje && dataItem <= fimHoje;
                    console.log('‚úÖ Dentro do intervalo?', dentroDoIntervalo);
                    return dentroDoIntervalo;
                });
                break;
                
            case 'ontem':
                const inicioOntem = new Date();
                inicioOntem.setDate(hoje.getDate() - 1);
                inicioOntem.setHours(0, 0, 0, 0);
                const fimOntem = new Date();
                fimOntem.setDate(hoje.getDate() - 1);
                fimOntem.setHours(23, 59, 59, 999);
                
                console.log('üåÖ In√≠cio de ontem:', inicioOntem);
                console.log('üåá Fim de ontem:', fimOntem);
                
                historicoFiltrado = historicoFiltrado.filter(item => {
                    const dataItem = new Date(item.data || item.timestamp);
                    return dataItem >= inicioOntem && dataItem <= fimOntem;
                });
                break;
                
            case 'semana':
                const inicioSemana = new Date();
                inicioSemana.setDate(hoje.getDate() - 7);
                inicioSemana.setHours(0, 0, 0, 0);
                
                console.log('üìÖ In√≠cio da semana:', inicioSemana);
                
                historicoFiltrado = historicoFiltrado.filter(item => {
                    const dataItem = new Date(item.data || item.timestamp);
                    return dataItem >= inicioSemana;
                });
                break;
                
            case 'mes':
                const inicioMes = new Date();
                inicioMes.setDate(hoje.getDate() - 30);
                inicioMes.setHours(0, 0, 0, 0);
                
                console.log('üìÖ In√≠cio do m√™s:', inicioMes);
                
                historicoFiltrado = historicoFiltrado.filter(item => {
                    const dataItem = new Date(item.data || item.timestamp);
                    return dataItem >= inicioMes;
                });
                break;
                
            case 'personalizado':
                // ‚ú® REFATORADO: Usar DomUtils para obter datas personalizadas
                const dataInicio = DomUtils.getValue('data-inicio');
                const dataFim = DomUtils.getValue('data-fim');
                
                console.log('üìÖ Per√≠odo personalizado:', dataInicio, 'at√©', dataFim);
                
                if (dataInicio && dataFim) {
                    const inicio = new Date(dataInicio);
                    inicio.setHours(0, 0, 0, 0);
                    const fim = new Date(dataFim);
                    fim.setHours(23, 59, 59, 999);
                    
                    console.log('üìÖ Data in√≠cio:', inicio);
                    console.log('üìÖ Data fim:', fim);
                    
                    historicoFiltrado = historicoFiltrado.filter(item => {
                        const dataItem = new Date(item.data || item.timestamp);
                        const dentroDoIntervalo = dataItem >= inicio && dataItem <= fim;
                        console.log('‚è∞ Item:', dataItem, '‚Üí Dentro?', dentroDoIntervalo);
                        return dentroDoIntervalo;
                    });
                }
                break;
        }
    }
    
    console.log('üìä Hist√≥rico filtrado:', historicoFiltrado.length, 'itens');
    atualizarListaHistorico(historicoFiltrado);
}

// ‚ú® NOVA: Fun√ß√£o para atualizar lista de hist√≥rico com container espec√≠fico
function atualizarListaHistoricoComContainer(container, historicoFiltrado) {
    container.innerHTML = '';
    
    if (historicoFiltrado.length === 0) {
        container.innerHTML = `
            <div class="historico-vazio">
                <p>üìù Nenhum registro encontrado para os filtros selecionados</p>
                <small>Tente ajustar os filtros ou adicionar novas atividades</small>
            </div>
        `;
        return;
    }
    
    // Ordenar por data (mais recente primeiro)
    historicoFiltrado.sort((a, b) => {
        const dataA = new Date(a.timestamp);
        const dataB = new Date(b.timestamp);
        return dataB - dataA;
    });
    
    historicoFiltrado.forEach(item => {
        console.log('üìÑ Processando item do log:', item);
        
        // ‚ú® CORRE√á√ÉO: Usar timestamp dos logs
        const data = new Date(item.timestamp);
        
        console.log('üìÖ Data timestamp:', item.timestamp, '‚Üí Data objeto:', data);
        
        // Verificar se a data √© v√°lida
        if (isNaN(data.getTime())) {
            console.warn('‚ö†Ô∏è Data inv√°lida encontrada:', item.timestamp);
            return; // Pular este item
        }
        
        const dataFormatada = data.toLocaleDateString('pt-BR');
        const horaFormatada = data.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // ‚ú® CORRE√á√ÉO: Criar a√ß√£o formatada baseada no tipo de log
        let icone = 'üìù';
        let acaoTexto = item.acao;
        
        if (item.acao.includes('adicionar_pontos')) {
            icone = '‚ûï';
            if (item.detalhes && item.detalhes.filho) {
                acaoTexto = `${item.detalhes.filho} ganhou ${item.detalhes.pontos} pontos`;
            }
        } else if (item.acao.includes('remover_pontos')) {
            icone = '‚ûñ';
            if (item.detalhes && item.detalhes.filho) {
                acaoTexto = `${item.detalhes.filho} perdeu ${item.detalhes.pontos} pontos`;
            }
        }
        
        const motivo = item.detalhes && item.detalhes.atividade ? item.detalhes.atividade : '';
        
        const historicoItem = document.createElement('div');
        historicoItem.className = 'historico-item';
        historicoItem.innerHTML = `
            <span class="data">${dataFormatada} ${horaFormatada}</span>
            <span class="acao">${icone} ${acaoTexto}</span>
            <span class="motivo">${motivo}</span>
        `;
        container.appendChild(historicoItem);
    });
}

// Fun√ß√£o para atualizar a lista visual do hist√≥rico (vers√£o original)
function atualizarListaHistorico(historicoFiltrado) {
    // ‚ú® REFATORADO: Usar DomUtils.getElementById para container do hist√≥rico
    const container = DomUtils.getElementById('historico');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (historicoFiltrado.length === 0) {
        container.innerHTML = `
            <div class="historico-vazio">
                <p>üìù Nenhum registro encontrado para os filtros selecionados</p>
                <small>Tente ajustar os filtros ou adicionar novas atividades</small>
            </div>
        `;
        return;
    }
    
    // Ordenar por data (mais recente primeiro)
    historicoFiltrado.sort((a, b) => {
        const dataA = new Date(a.timestamp);
        const dataB = new Date(b.timestamp);
        return dataB - dataA;
    });
    
    historicoFiltrado.forEach(item => {
        console.log('üìÑ Processando item do log:', item);
        
        // ‚ú® CORRE√á√ÉO: Usar timestamp dos logs
        const data = new Date(item.timestamp);
        
        console.log('üìÖ Data timestamp:', item.timestamp, '‚Üí Data objeto:', data);
        
        // Verificar se a data √© v√°lida
        if (isNaN(data.getTime())) {
            console.warn('‚ö†Ô∏è Data inv√°lida encontrada:', item.timestamp);
            return; // Pular este item
        }
        
        const dataFormatada = data.toLocaleDateString('pt-BR');
        const horaFormatada = data.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        // ‚ú® CORRE√á√ÉO: Criar a√ß√£o formatada baseada no tipo de log
        let icone = 'üìù';
        let acaoTexto = item.acao;
        
        if (item.acao.includes('adicionar_pontos')) {
            icone = '‚ûï';
            if (item.detalhes && item.detalhes.filho) {
                acaoTexto = `${item.detalhes.filho} ganhou ${item.detalhes.pontos} pontos`;
            }
        } else if (item.acao.includes('remover_pontos')) {
            icone = '‚ûñ';
            if (item.detalhes && item.detalhes.filho) {
                acaoTexto = `${item.detalhes.filho} perdeu ${item.detalhes.pontos} pontos`;
            }
        }
        
        const motivo = item.detalhes && item.detalhes.atividade ? item.detalhes.atividade : '';
        
        const historicoItem = document.createElement('div');
        historicoItem.className = 'historico-item';
        historicoItem.innerHTML = `
            <span class="data">${dataFormatada} ${horaFormatada}</span>
            <span class="acao">${icone} ${acaoTexto}</span>
            <span class="motivo">${motivo}</span>
        `;
        container.appendChild(historicoItem);
    });
}

// Fun√ß√£o para compartilhar hist√≥rico - Mostra modal com op√ß√µes
async function handleCompartilharHistorico() {
    try {
        // Buscar hist√≥rico completo do servidor
        await carregarHistoricoServidor();
        
        if (!historico || historico.length === 0) {
            mostrarNotificacao('üìù Nenhum hist√≥rico para compartilhar!', 'warning');
            return;
        }
        
        // Mostrar modal com op√ß√µes de compartilhamento
        mostrarModalCompartilhamento();
        
    } catch (error) {
        console.error('Erro ao compartilhar hist√≥rico:', error);
        mostrarNotificacao('‚ùå Erro ao compartilhar hist√≥rico!', 'error');
    }
}

// Mostrar modal com op√ß√µes de compartilhamento
function mostrarModalCompartilhamento() {
    // ‚ú® REFATORADO: Usar DomUtils para verificar modal existente
    let modal = DomUtils.getElement('modal-compartilhamento');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'modal-compartilhamento';
        modal.className = 'modal-confirmacao';
        modal.innerHTML = `
            <div class="modal-confirmacao-content">
                <div class="modal-confirmacao-header">
                    <h3>üì§ Compartilhar Hist√≥rico</h3>
                    <button class="modal-confirmacao-close" onclick="fecharModalCompartilhamento()">&times;</button>
                </div>
                <div class="modal-confirmacao-body">
                    <p>Escolha o formato para compartilhar o hist√≥rico:</p>
                    <div class="opcoes-compartilhamento">
                        <button class="btn-opcao-compartilhamento" onclick="compartilharWhatsApp()">
                            <span class="icone">üì±</span>
                            <span class="texto">WhatsApp</span>
                        </button>
                        <button class="btn-opcao-compartilhamento" onclick="compartilharTexto()">
                            <span class="icone">üìã</span>
                            <span class="texto">Texto</span>
                        </button>
                        <button class="btn-opcao-compartilhamento" onclick="compartilharPDF()">
                            <span class="icone">üìÑ</span>
                            <span class="texto">PDF</span>
                        </button>
                        <button class="btn-opcao-compartilhamento" onclick="compartilharJSON()">
                            <span class="icone">üíæ</span>
                            <span class="texto">JSON</span>
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }
    
    modal.classList.add('show');
}

// Fechar modal de compartilhamento
function fecharModalCompartilhamento() {
    // ‚ú® REFATORADO: Usar DomUtils para acessar modal
    const modal = DomUtils.getElement('modal-compartilhamento');
    if (modal) {
        modal.classList.remove('show');
    }
}

// Compartilhar via WhatsApp
async function compartilharWhatsApp() {
    try {
        const relatorio = criarRelatorioHistorico(historico);
        const texto = encodeURIComponent(relatorio.texto);
        const url = `https://wa.me/?text=${texto}`;
        window.open(url, '_blank');
        fecharModalCompartilhamento();
        mostrarNotificacao('üì± Compartilhando via WhatsApp!', 'success');
    } catch (error) {
        mostrarNotificacao('‚ùå Erro ao compartilhar via WhatsApp', 'error');
    }
}

// Compartilhar como texto
async function compartilharTexto() {
    try {
        const relatorio = criarRelatorioHistorico(historico);
        
        if (navigator.share) {
            await navigator.share({
                title: 'üìä Relat√≥rio de Pontos - Meus Filhos',
                text: relatorio.texto
            });
        } else {
            await FileUtils.copyToClipboard(relatorio.texto);
            mostrarNotificacao('üìã Texto copiado para √°rea de transfer√™ncia!', 'success');
        }
        
        fecharModalCompartilhamento();
    } catch (error) {
        mostrarNotificacao('‚ùå Erro ao compartilhar texto', 'error');
    }
}

// Compartilhar como PDF
async function compartilharPDF() {
    try {
        console.log('üîç Iniciando gera√ß√£o de PDF...');
        console.log('üìä Filhos:', filhos);
        console.log('üìù Hist√≥rico:', historico);
        
        // Verificar se temos dados b√°sicos
        if (!filhos || filhos.length === 0) {
            console.log('‚ö†Ô∏è Nenhum filho encontrado');
            mostrarNotificacao('ÔøΩ Nenhum filho cadastrado para gerar PDF!', 'warning');
            return;
        }
        
        console.log('‚úÖ Dados encontrados, gerando PDF...');
        gerarPDFSimples();
        fecharModalCompartilhamento();
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar PDF:', error);
        mostrarNotificacao('‚ùå Erro ao gerar PDF: ' + error.message, 'error');
    }
}

// Fun√ß√£o simplificada para gerar PDF
function gerarPDFSimples() {
    try {
        const hoje = new Date();
        const dataFormatada = hoje.toLocaleDateString('pt-BR');
        const horaFormatada = hoje.toLocaleTimeString('pt-BR');
        
        // Criar conte√∫do HTML simplificado
        let htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Relat√≥rio de Pontos - ${dataFormatada}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            color: #333;
            line-height: 1.6;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #4299e1;
            padding-bottom: 20px;
        }
        .header h1 {
            color: #4299e1;
            margin: 0;
            font-size: 24px;
        }
        .pontos-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 25px;
        }
        .pontos-section h2 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 18px;
        }
        .filho-linha {
            padding: 8px 12px;
            margin: 5px 0;
            background: white;
            border-radius: 6px;
            border-left: 4px solid #4299e1;
            display: flex;
            justify-content: space-between;
        }
        .historico-section h2 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 18px;
        }
        .historico-linha {
            padding: 8px 12px;
            margin: 5px 0;
            background: #f8f9fa;
            border-radius: 6px;
            border-left: 3px solid #28a745;
            font-size: 14px;
        }
        .historico-linha.negativo {
            border-left-color: #dc3545;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #6c757d;
            font-size: 12px;
            border-top: 1px solid #dee2e6;
            padding-top: 15px;
        }
        @media print {
            body { margin: 0; font-size: 12px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèÜ Relat√≥rio de Pontos dos Filhos</h1>
        <p><strong>Data:</strong> ${dataFormatada} √†s ${horaFormatada}</p>
    </div>
    
    <div class="pontos-section">
        <h2>üìä Pontos Atuais</h2>`;
        
        // Adicionar pontos atuais
        if (filhos && filhos.length > 0) {
            filhos.forEach(filho => {
                htmlContent += `
        <div class="filho-linha">
            <span><strong>${filho.emoji || 'üë§'} ${filho.nome || 'Sem nome'}</strong></span>
            <span><strong>${filho.pontos || 0} pontos</strong></span>
        </div>`;
            });
        } else {
            htmlContent += '<p>Nenhum filho cadastrado</p>';
        }
        
        htmlContent += `
    </div>
    
    <div class="historico-section">
        <h2>üìù Hist√≥rico de Atividades (√öltimas 20)</h2>`;
        
        // Adicionar hist√≥rico
        if (historico && historico.length > 0) {
            const ultimosRegistros = historico.slice(0, 20);
            ultimosRegistros.forEach(item => {
                try {
                    const data = item.timestamp ? new Date(item.timestamp) : new Date();
                    const dataStr = data.toLocaleDateString('pt-BR');
                    const horaStr = data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
                    const acao = item.acao || 'A√ß√£o n√£o especificada';
                    const isNegativo = acao.includes('perdeu') || acao.includes('removeu') || acao.includes('Remove');
                    
                    htmlContent += `
        <div class="historico-linha ${isNegativo ? 'negativo' : ''}">
            <strong>${dataStr} ${horaStr}</strong> - ${acao}
            ${item.motivo ? '<br><em>' + item.motivo + '</em>' : ''}
        </div>`;
                } catch (e) {
                    console.warn('Erro ao processar item do hist√≥rico:', e);
                }
            });
        } else {
            htmlContent += '<p>Nenhum hist√≥rico dispon√≠vel</p>';
        }
        
        htmlContent += `
    </div>
    
    <div class="footer">
        <p>Relat√≥rio gerado pelo Sistema de Pontos</p>
        <p>${filhos.length} filhos cadastrados ‚Ä¢ ${historico.length} atividades registradas</p>
    </div>
</body>
</html>`;
        
        // Abrir nova janela para impress√£o
        const printWindow = window.open('', '_blank', 'width=800,height=600');
        if (printWindow) {
            printWindow.document.write(htmlContent);
            printWindow.document.close();
            
            // Aguardar carregamento e imprimir
            printWindow.onload = function() {
                setTimeout(() => {
                    printWindow.print();
                    // N√£o fechar automaticamente para permitir salvar como PDF
                }, 500);
            };
            
            mostrarNotificacao('üìÑ PDF aberto para impress√£o/salvamento!', 'success');
        } else {
            throw new Error('N√£o foi poss√≠vel abrir janela de impress√£o');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar PDF:', error);
        mostrarNotificacao('‚ùå Erro ao gerar PDF: ' + error.message, 'error');
    }
}

// Compartilhar como JSON
async function compartilharJSON() {
    try {
        FileUtils.saveAsJSON(historico);
        fecharModalCompartilhamento();
        mostrarNotificacao('üíæ Arquivo JSON baixado!', 'success');
    } catch (error) {
        mostrarNotificacao('‚ùå Erro ao gerar JSON', 'error');
    }
}

// Criar relat√≥rio formatado do hist√≥rico
function criarRelatorioHistorico(historico) {
    const hoje = new Date();
    const dataFormatada = hoje.toLocaleDateString('pt-BR');
    
    let texto = `üìä RELAT√ìRIO DE PONTOS - ${dataFormatada}\n\n`;
    texto += `üèÜ PONTOS ATUAIS:\n`;
    
    filhos.forEach(filho => {
        texto += `${filho.emoji} ${filho.nome}: ${filho.pontos} pontos\n`;
    });
    
    texto += `\nüìù HIST√ìRICO RECENTE:\n`;
    
    // Mostrar √∫ltimos 10 registros
    const ultimosRegistros = historico.slice(0, 10);
    ultimosRegistros.forEach(registro => {
        const data = new Date(registro.data);
        const dataFormatada = data.toLocaleDateString('pt-BR');
        const hora = data.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        const icone = registro.tipo === 'adicionar' ? '‚ûï' : '‚ûñ';
        
        texto += `${dataFormatada} ${hora} - ${icone} ${registro.nome}: ${registro.pontos} pontos\n`;
        texto += `   Motivo: ${registro.motivo}\n\n`;
    });
    
    return { texto };
}

// ‚ú® REFATORADO: Fun√ß√µes movidas para FileUtils
// copiarParaAreaTransferencia() -> FileUtils.copyToClipboard()
// salvarArquivoJSON() -> FileUtils.saveAsJSON()

// Fun√ß√£o para gerar e baixar PDF do hist√≥rico
async function handleCompartilharPDF() {
    try {
        await carregarHistoricoServidor();
        
        if (!historico || historico.length === 0) {
            mostrarNotificacao('üìù Nenhum hist√≥rico para gerar PDF!', 'warning');
            return;
        }
        
        gerarPDFSimples(historico);
    } catch (error) {
        console.error('Erro ao obter hist√≥rico:', error);
        mostrarNotificacao('‚ùå Erro ao gerar PDF', 'error');
    }
}

// Carregar pontos do servidor
async function carregarPontos() {
    try {
        const response = await fetch('/api/pontos');
        const data = await response.json();
        
        pontosFilho1 = data.joao || 0;
        pontosFilho2 = data.maria || 0;
        pontosFilho3 = data.pedro || 0;
        
        // ‚ú® REFATORADO: Usar DomUtils para atualizar pontos dos filhos
        DomUtils.setText('pontos-filho1', pontosFilho1);
        DomUtils.setText('pontos-filho2', pontosFilho2);
        DomUtils.setText('pontos-filho3', pontosFilho3);
        
        // Salvar no localStorage como backup
        localStorage.setItem('pontosFilho1', pontosFilho1.toString());
        localStorage.setItem('pontosFilho2', pontosFilho2.toString());
        localStorage.setItem('pontosFilho3', pontosFilho3.toString());
    } catch (error) {
        console.error('Erro ao carregar pontos:', error);
        // Fallback para localStorage
        const pontosFilho1Salvo = localStorage.getItem('pontosFilho1');
        const pontosFilho2Salvo = localStorage.getItem('pontosFilho2');
        const pontosFilho3Salvo = localStorage.getItem('pontosFilho3');
        
        if (pontosFilho1Salvo) {
            pontosFilho1 = parseInt(pontosFilho1Salvo);
            // ‚ú® REFATORADO: Usar DomUtils para fallback de pontos
            DomUtils.setText('pontos-filho1', pontosFilho1);
        }
        
        if (pontosFilho2Salvo) {
            pontosFilho2 = parseInt(pontosFilho2Salvo);
            // ‚ú® REFATORADO: Usar DomUtils para fallback de pontos
            DomUtils.setText('pontos-filho2', pontosFilho2);
        }
        
        if (pontosFilho3Salvo) {
            pontosFilho3 = parseInt(pontosFilho3Salvo);
            // ‚ú® REFATORADO: Usar DomUtils para fallback de pontos
            DomUtils.setText('pontos-filho3', pontosFilho3);
        }
    }
}

// Salvar pontos no localStorage
function salvarPontos() {
    localStorage.setItem('pontosFilho1', pontosFilho1.toString());
    localStorage.setItem('pontosFilho2', pontosFilho2.toString());
    localStorage.setItem('pontosFilho3', pontosFilho3.toString());
}

// Sistema de fila para notifica√ß√µes
let filaNotificacoes = [];
let notificacaoAtiva = null;

// Mostrar notifica√ß√£o com sistema de fila
function mostrarNotificacao(mensagem, tipo) {
    // Adicionar √† fila
    filaNotificacoes.push({ mensagem, tipo });
    
    // Processar fila se n√£o h√° notifica√ß√£o ativa
    if (!notificacaoAtiva) {
        processarFilaNotificacoes();
    }
}

// Processar fila de notifica√ß√µes
function processarFilaNotificacoes() {
    if (filaNotificacoes.length === 0) {
        notificacaoAtiva = null;
        return;
    }
    
    const { mensagem, tipo } = filaNotificacoes.shift();
    notificacaoAtiva = true;
    
    // Criar elemento de notifica√ß√£o
    const notificacao = document.createElement('div');
    notificacao.className = `notificacao notificacao-${tipo}`;
    notificacao.textContent = mensagem;
    
    // Calcular posi√ß√£o baseada no n√∫mero de notifica√ß√µes ativas
    const notificacoesAtivas = document.querySelectorAll('.notificacao');
    const topOffset = 20 + (notificacoesAtivas.length * 80);
    
    // Estilos da notifica√ß√£o
    notificacao.style.cssText = `
        position: fixed;
        top: ${topOffset}px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 10px;
        color: white;
        font-weight: 600;
        z-index: 1000;
        animation: slideIn 0.3s ease;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        max-width: 350px;
        word-wrap: break-word;
    `;
    
    // Cores baseadas no tipo
    if (tipo === 'success') {
        notificacao.style.background = 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)';
    } else if (tipo === 'warning') {
        notificacao.style.background = 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)';
    } else if (tipo === 'info') {
        notificacao.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
    } else {
        notificacao.style.background = 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)';
    }
    
    document.body.appendChild(notificacao);
    
    // Remover ap√≥s 3 segundos e processar pr√≥xima
    setTimeout(() => {
        notificacao.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (notificacao.parentNode) {
                notificacao.parentNode.removeChild(notificacao);
            }
            // Processar pr√≥xima notifica√ß√£o na fila
            processarFilaNotificacoes();
            }, 300);
}, 3000);
}

// Fun√ß√£o para limpar todas as notifica√ß√µes
function limparTodasNotificacoes() {
    // Limpar fila
    filaNotificacoes = [];
    notificacaoAtiva = null;
    
    // Remover todas as notifica√ß√µes vis√≠veis
    const notificacoes = document.querySelectorAll('.notificacao');
    notificacoes.forEach(notificacao => {
        notificacao.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (notificacao.parentNode) {
                notificacao.parentNode.removeChild(notificacao);
            }
        }, 300);
    });
}

// ‚ú® NOVO: Sistema de Modal de Confirma√ß√£o Moderno
let confirmacaoCallback = null;

// Fun√ß√£o para mostrar modal de confirma√ß√£o
function mostrarConfirmacao(titulo, mensagem, callback) {
    const modal = document.getElementById('modal-confirmacao');
    const tituloElement = document.getElementById('modal-confirmacao-titulo');
    const mensagemElement = document.getElementById('modal-confirmacao-mensagem');
    
    // Configurar conte√∫do
    tituloElement.textContent = titulo;
    mensagemElement.textContent = mensagem;
    
    // Armazenar callback
    confirmacaoCallback = callback;
    
    // Mostrar modal
    modal.classList.add('show');
    
    // Adicionar event listeners
    const btnConfirmar = document.getElementById('modal-confirmacao-confirmar');
    const btnCancelar = document.getElementById('modal-confirmacao-cancelar');
    const btnClose = document.getElementById('modal-confirmacao-close');
    
    // Fun√ß√£o para fechar modal
    const fecharModal = () => {
        modal.classList.remove('show');
        confirmacaoCallback = null;
    };
    
    // Event listeners
    btnConfirmar.onclick = () => {
        if (confirmacaoCallback) {
            confirmacaoCallback(true);
        }
        fecharModal();
    };
    
    btnCancelar.onclick = () => {
        if (confirmacaoCallback) {
            confirmacaoCallback(false);
        }
        fecharModal();
    };
    
    btnClose.onclick = fecharModal;
    
    // Fechar ao clicar fora do modal
    modal.onclick = (e) => {
        if (e.target === modal) {
            fecharModal();
        }
    };
    
    // Fechar com ESC
    const handleEsc = (e) => {
        if (e.key === 'Escape') {
            fecharModal();
            document.removeEventListener('keydown', handleEsc);
        }
    };
    document.addEventListener('keydown', handleEsc);
}

// Fun√ß√£o para substituir o confirm() nativo
function confirmarAcao(mensagem, callback) {
    mostrarConfirmacao('‚ö†Ô∏è Confirma√ß√£o', mensagem, callback);
}

// ‚ú® EXEMPLO: Como usar o modal de confirma√ß√£o em outras a√ß√µes
function exemploConfirmacao() {
    // Exemplo 1: Confirma√ß√£o simples
    confirmarAcao('Deseja realmente excluir este item?', function(confirmado) {
        if (confirmado) {
            console.log('‚úÖ Usu√°rio confirmou a a√ß√£o');
            // Executar a√ß√£o aqui
        } else {
            console.log('‚ùå Usu√°rio cancelou a a√ß√£o');
        }
    });
    
    // Exemplo 2: Confirma√ß√£o com t√≠tulo personalizado
    mostrarConfirmacao('üóëÔ∏è Excluir Item', 'Esta a√ß√£o n√£o pode ser desfeita. Continuar?', function(confirmado) {
        if (confirmado) {
            console.log('‚úÖ Item exclu√≠do');
        }
    });
}

// Adicionar estilos CSS para anima√ß√µes melhoradas
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { 
            transform: translateX(100%); 
            opacity: 0; 
        }
        to { 
            transform: translateX(0); 
            opacity: 1; 
        }
    }
    
    @keyframes slideOut {
        from { 
            transform: translateX(0); 
            opacity: 1; 
        }
        to { 
            transform: translateX(100%); 
            opacity: 0; 
        }
    }
    
    .notificacao {
        transition: all 0.3s ease;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        line-height: 1.4;
    }
    
    .notificacao:hover {
        transform: translateX(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }
`;
document.head.appendChild(style);

// Fun√ß√£o para lidar com o filtro do hist√≥rico
// Criar relat√≥rio formatado do hist√≥rico
// ‚ú® REFATORADO: Fun√ß√µes movidas para FileUtils
// copiarParaAreaTransferencia() -> FileUtils.copyToClipboard()
// salvarArquivoJSON() -> FileUtils.saveAsJSON()

// Fun√ß√£o para lidar com pontos avulsos - adicionar
async function handleAvulsoAdd() {
    console.log('üîç DEBUG: handleAvulsoAdd() chamada - iniciando');
    
    // ‚ú® REFATORADO: Usar ValidationUtils para valida√ß√µes
    let filhoSelect = DomUtils.getElement('filho-avulso-add');
    let pontosInput = DomUtils.getElement('pontos-avulso-add');
    let motivoInput = DomUtils.getElement('motivo-avulso-add');
    
    // Fallback se DomUtils n√£o encontrar
    if (!filhoSelect) filhoSelect = document.getElementById('filho-avulso-add');
    if (!pontosInput) pontosInput = document.getElementById('pontos-avulso-add');
    if (!motivoInput) motivoInput = document.getElementById('motivo-avulso-add');
    
    // Validar elementos DOM
    const elementValidation = ValidationUtils.validateForm({
        filhoSelect,
        pontosInput,
        motivoInput
    }, {
        filhoSelect: { type: 'element', label: 'Seletor de filho' },
        pontosInput: { type: 'element', label: 'Input de pontos' },
        motivoInput: { type: 'element', label: 'Input de motivo' }
    });
    
    if (!elementValidation.isValid) {
        ValidationUtils.showValidationError(elementValidation.firstError);
        return;
    }
    
    const filhoId = filhoSelect.value;
    const pontosValor = parseInt(pontosInput.value);
    const motivo = motivoInput.value.trim();
    
    console.log('üîç DEBUG: Dados coletados:', { filhoId, pontosValor, motivo });
    console.log('üîç DEBUG: Lista de filhos dispon√≠vel:', filhos);

    // ‚ú® REFATORADO: Valida√ß√£o usando ValidationUtils
    const formData = { filhoId, pontos: pontosValor, atividade: motivo };
    const formValidation = ValidationUtils.validatePontosForm(formData);
    
    if (!formValidation.isValid) {
        ValidationUtils.showValidationError(formValidation.firstError);
        return;
    }

    console.log('üîç DEBUG: Buscando filho com ID:', filhoId);
    const filho = encontrarFilho(filhoId);
    console.log('üîç DEBUG: Filho encontrado:', filho);
    
    // ‚ú® CORRE√á√ÉO: Usar == em vez de === para permitir convers√£o de tipos
    const filhoValidation = ValidationUtils.validateExists(filhoId, filhos, 'Filho', (id, list) => list.some(f => f.id == id));
    
    if (!filhoValidation.isValid) {
        ValidationUtils.showValidationError(filhoValidation);
        return;
    }

    console.log('üîç DEBUG: Enviando requisi√ß√£o para servidor...');
    
    // ‚ú® REFATORADO: Usar ApiService para chamada de API
    const result = await ApiService.pontosOperation('adicionar', {
        nome: filho.nome,
        pontos: pontosValor,
        atividade: motivo
    });
    
    if (result.success) {
        // Atualizar pontos localmente
        const pontosAntes = filho.pontos;
        filho.pontos += pontosValor;
        
        // ‚ú® NOVO: Adicionar log da a√ß√£o avulsa
        adicionarLog('adicionar_pontos_avulsos', {
            filho: filho.nome,
            atividade: motivo,
            pontos: pontosValor,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'positiva'
        });
        
        // ‚ú® CORRIGIDO: Limpar campos individualmente
        pontosInput.value = '1'; // Resetar para valor padr√£o
        motivoInput.value = '';  // Limpar motivo
        // Manter filhoSelect selecionado para facilitar uso repetido
        
        // Atualizar interface (inclui hist√≥rico)
        atualizarInterface();
        salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o avulsa
        await sincronizarAposAcao('adicionar pontos avulsos');
        
        // Notifica√ß√£o j√° √© exibida automaticamente pelo ApiService
        // Removida notifica√ß√£o duplicada para modo offline
    } else if (result.fallbackOffline) {
        // Fallback offline - continuar opera√ß√£o localmente
        const pontosAntes = filho.pontos;
        filho.pontos += pontosValor;
        
        // ‚ú® NOVO: Adicionar log da a√ß√£o avulsa offline
        adicionarLog('adicionar_pontos_avulsos_offline', {
            filho: filho.nome,
            atividade: motivo,
            pontos: pontosValor,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'positiva'
        });
        
        DomUtils.clearForm('avulso-add');
        atualizarInterface();
        salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o offline
        await sincronizarAposAcao('adicionar pontos avulsos (offline)');
        
        // Notifica√ß√£o simples para opera√ß√µes offline
        mostrarNotificacao(`‚úÖ ${pontosValor} pontos adicionados para ${filho.nome}!`, 'success');
    }
}

// Fun√ß√£o para lidar com pontos avulsos - remover
async function handleAvulsoRemove() {
    // ‚ú® REFATORADO: Usar ValidationUtils para valida√ß√µes
    let filhoSelect = DomUtils.getElement('filho-avulso-remove');
    let pontosInput = DomUtils.getElement('pontos-avulso-remove');
    let motivoInput = DomUtils.getElement('motivo-avulso-remove');
    
    // Fallback se DomUtils n√£o encontrar
    if (!filhoSelect) filhoSelect = document.getElementById('filho-avulso-remove');
    if (!pontosInput) pontosInput = document.getElementById('pontos-avulso-remove');
    if (!motivoInput) motivoInput = document.getElementById('motivo-avulso-remove');
    
    // Validar elementos DOM
    const elementValidation = ValidationUtils.validateForm({
        filhoSelect,
        pontosInput,
        motivoInput
    }, {
        filhoSelect: { type: 'element', label: 'Seletor de filho' },
        pontosInput: { type: 'element', label: 'Input de pontos' },
        motivoInput: { type: 'element', label: 'Input de motivo' }
    });
    
    if (!elementValidation.isValid) {
        ValidationUtils.showValidationError(elementValidation.firstError);
        return;
    }
    
    const filhoId = filhoSelect.value;
    const pontosValor = parseInt(pontosInput.value);
    const motivo = motivoInput.value.trim();
    
    // ‚ú® REFATORADO: Valida√ß√£o usando ValidationUtils
    const formData = { filhoId, pontos: pontosValor, atividade: motivo };
    const formValidation = ValidationUtils.validatePontosForm(formData);
    
    if (!formValidation.isValid) {
        ValidationUtils.showValidationError(formValidation.firstError);
        return;
    }

    const filho = encontrarFilho(filhoId);
    
    // ‚ú® CORRE√á√ÉO: Usar == em vez de === para permitir convers√£o de tipos
    const filhoValidation = ValidationUtils.validateExists(filhoId, filhos, 'Filho', (id, list) => list.some(f => f.id == id));
    
    if (!filhoValidation.isValid) {
        ValidationUtils.showValidationError(filhoValidation);
        return;
    }
    
    // ‚ú® REFATORADO: Usar ApiService para chamada de API
    const result = await ApiService.pontosOperation('remover', {
        nome: filho.nome,
        pontos: pontosValor,
        atividade: motivo
    });
    
    if (result.success) {
        // Atualizar pontos localmente (permitir pontos negativos)
        const pontosAntes = filho.pontos;
        filho.pontos -= pontosValor;
        
        // ‚ú® NOVO: Adicionar log da a√ß√£o avulsa
        adicionarLog('remover_pontos_avulsos', {
            filho: filho.nome,
            atividade: motivo,
            pontos: pontosValor,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'negativa'
        });
        
        // ‚ú® CORRIGIDO: Limpar campos individualmente
        pontosInput.value = '1'; // Resetar para valor padr√£o
        motivoInput.value = '';  // Limpar motivo
        // Manter filhoSelect selecionado para facilitar uso repetido
        
        // Atualizar interface (inclui hist√≥rico)
        atualizarInterface();
        salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o avulsa
        await sincronizarAposAcao('remover pontos avulsos');
        
        // Notifica√ß√£o customizada para remo√ß√£o
        mostrarNotificacao(`‚ûñ ${pontosValor} pontos removidos de ${filho.nome}!`, 'warning');
    } else if (result.fallbackOffline) {
        // Fallback offline - continuar opera√ß√£o localmente (permitir pontos negativos)
        const pontosAntes = filho.pontos;
        filho.pontos -= pontosValor;
        
        // ‚ú® NOVO: Adicionar log da a√ß√£o avulsa offline
        adicionarLog('remover_pontos_avulsos_offline', {
            filho: filho.nome,
            atividade: motivo,
            pontos: pontosValor,
            pontos_antes: pontosAntes,
            pontos_depois: filho.pontos,
            tipo: 'negativa'
        });
        
        // ‚ú® CORRIGIDO: Limpar campos individualmente
        pontosInput.value = '1'; // Resetar para valor padr√£o
        motivoInput.value = '';  // Limpar motivo
        atualizarInterface();
        salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s a√ß√£o offline
        await sincronizarAposAcao('remover pontos avulsos (offline)');
        
        // Notifica√ß√£o simples para opera√ß√µes offline
        mostrarNotificacao(`‚ûñ ${pontosValor} pontos removidos de ${filho.nome}!`, 'warning');
    }
}

// ‚ú® REFATORADO: Fun√ß√£o duplicada removida - usar handleCompartilharPDF() da linha 3744

// Fun√ß√£o para gerar PDF
function gerarPDF(historico) {
    try {
        // Criar conte√∫do do relat√≥rio usando a mesma fun√ß√£o que funciona
        const relatorio = criarRelatorioHistorico(historico);
        
        // Como jsPDF pode n√£o estar dispon√≠vel, vamos criar um PDF simples em HTML
        const pdfContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Relat√≥rio de Pontos</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            line-height: 1.6;
        }
        .header { 
            text-align: center; 
            margin-bottom: 30px; 
            border-bottom: 2px solid #333;
            padding-bottom: 10px;
        }
        .pontos-atuais { 
            background: #f5f5f5; 
            padding: 15px; 
            border-radius: 8px; 
            margin-bottom: 20px;
        }
        .historico { 
            margin-top: 20px;
        }
        .historico-item { 
            margin-bottom: 10px; 
            padding: 8px; 
            border-left: 3px solid #007bff;
            background: #f8f9fa;
        }
        h1 { color: #333; margin: 0; }
        h2 { color: #666; }
        .data { font-size: 0.9em; color: #666; }
        @media print {
            button { display: none; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä RELAT√ìRIO DE PONTOS</h1>
        <p class="data">Gerado em: ${new Date().toLocaleString('pt-BR')}</p>
    </div>
    
    <div class="pontos-atuais">
        <h2>üèÜ PONTOS ATUAIS:</h2>
        ${filhos.map(filho => 
            `<p><strong>${filho.emoji} ${filho.nome}:</strong> ${filho.pontos} pontos</p>`
        ).join('')}
    </div>
    
    <div class="historico">
        <h2>üìù HIST√ìRICO RECENTE:</h2>
        ${historico.slice(0, 15).map(registro => {
            const data = new Date(registro.data);
            const dataFormatada = data.toLocaleDateString('pt-BR');
            const hora = data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
            const icone = registro.tipo === 'adicionar' ? '‚ûï' : '‚ûñ';
            
            return `
                <div class="historico-item">
                    <strong>${dataFormatada} ${hora}</strong> - ${icone} ${registro.nome}: ${registro.pontos} pontos<br>
                    <em>Motivo: ${registro.motivo}</em>
                </div>
            `;
        }).join('')}
    </div>
    
    <div style="margin-top: 30px; text-align: center;">
        <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
            üñ®Ô∏è Imprimir PDF
        </button>
        <button onclick="window.close()" style="padding: 10px 20px; font-size: 16px; background: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px;">
            ‚ùå Fechar
        </button>
    </div>
</body>
</html>
        `;
        
        // Criar uma nova janela para o PDF
        const pdfWindow = window.open('', '_blank');
        pdfWindow.document.write(pdfContent);
        pdfWindow.document.close();
        
        mostrarNotificacao('üìÑ PDF aberto em nova aba! Use Ctrl+P para imprimir.', 'success');
        
    } catch (error) {
        console.error('Erro ao gerar PDF:', error);
        mostrarNotificacao('‚ùå Erro ao gerar PDF', 'error');
    }
}

// ‚ú® REMOVIDO: setInterval autom√°tico de salvamento (causava loops infinitos)
// O salvamento agora ocorre apenas quando necess√°rio, atrav√©s de eventos espec√≠ficos

// ‚ú® ATUALIZADA: Adicionar atividade com sincroniza√ß√£o MongoDB
async function adicionarAtividade(tipo) {
    console.log('üéØ Iniciando cadastro de atividade:', tipo);
    
    // 1. Captura dos elementos do formul√°rio
    const nomeInput = DomUtils.getElementById(tipo === 'positiva' ? 'nova-atividade-positiva' : 'nova-atividade-negativa');
    const pontosInput = DomUtils.getElementById(tipo === 'positiva' ? 'pontos-atividade-positiva' : 'pontos-atividade-negativa');
    
    if (!nomeInput || !pontosInput) {
        console.error('‚ùå Elementos do formul√°rio n√£o encontrados');
        mostrarNotificacao('‚ùå Erro: Formul√°rio n√£o encontrado', 'error');
        return;
    }
    
    const nome = nomeInput.value.trim();
    const pontos = parseInt(pontosInput.value);
    
    // 2. Valida√ß√µes
    if (!nome) {
        mostrarNotificacao('‚ùå Por favor, insira um nome para a atividade', 'error');
        return;
    }
    
    if (isNaN(pontos) || pontos <= 0) {
        mostrarNotificacao('‚ùå Por favor, insira pontos v√°lidos', 'error');
        return;
    }
    
    const array = tipo === 'positiva' ? atividadesPositivas : atividadesNegativas;
    
    // 3. Verificar duplica√ß√£o local
    const atividadeExistente = array.find(atividade => 
        atividade.nome.toLowerCase().trim() === nome.toLowerCase().trim()
    );
    
    if (atividadeExistente) {
        mostrarNotificacao(`‚ùå J√° existe uma atividade "${nome}" na lista!`, 'error');
        return;
    }
    
    // 4. Bloquear sincroniza√ß√£o durante opera√ß√£o
    bloquearSincronizacaoComTimeout();
    
    try {
        // 5. Criar atividade no servidor PRIMEIRO
        if (socket && socket.connected) {
            console.log('‚òÅÔ∏è Criando atividade no servidor...');
            const response = await fetch('/api/atividades', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ nome, pontos, tipo })
            });
            
            const resultado = await response.json();
            
            if (!resultado.success) {
                if (resultado.error.includes('j√° existe')) {
                    mostrarNotificacao(`‚ùå Atividade "${nome}" j√° existe no sistema!`, 'error');
                    desbloquearSincronizacao();
                    return;
                } else {
                    throw new Error(resultado.error);
                }
            }
            
            // 6. Usar dados do servidor
            const novaAtividade = {
                id: resultado.atividade.id,
                nome: resultado.atividade.nome,
                pontos: resultado.atividade.pontos,
                tipo: tipo
            };
            
            array.push(novaAtividade);
            console.log('‚úÖ Atividade criada no servidor:', novaAtividade);
            
        } else {
            // 7. Modo offline - criar localmente
            const novaAtividade = {
                id: Date.now() + Math.random(),
                nome: nome,
                pontos: pontos,
                tipo: tipo
            };
            
            array.push(novaAtividade);
            console.log('üì± Atividade criada localmente:', novaAtividade);
        }
        
        // 8. Limpar campos
        nomeInput.value = '';
        pontosInput.value = tipo === 'positiva' ? '10' : '5';
        
        // 9. Atualizar interface
        atualizarListaAtividades();
        atualizarSelectsAtividades();
        
        // 10. Salvar atividades
        await salvarAtividades();
        
        // 11. Mostrar sucesso
        mostrarNotificacao(`‚úÖ Atividade "${nome}" adicionada com sucesso!`, 'success');
        
    } catch (error) {
        console.error('‚ùå Erro ao criar atividade:', error);
        mostrarNotificacao(`‚ùå Erro ao criar atividade: ${error.message}`, 'error');
    }
    
    // 12. Desbloquear sincroniza√ß√£o
    desbloquearSincronizacao();
    
    console.log('üéØ Cadastro de atividade conclu√≠do:', nome);
}

// ‚ú® ATUALIZADA: Remover atividade com sincroniza√ß√£o MongoDB
async function removerAtividade(tipo, id) {
    const array = tipo === 'positiva' ? atividadesPositivas : atividadesNegativas;
    const index = array.findIndex(atividade => atividade.id === id);
    
    if (index === -1) {
        mostrarNotificacao('‚ùå Atividade n√£o encontrada', 'error');
        return;
    }
    
    const atividade = array[index];
    
    // ‚ú® NOVA: Remover do MongoDB se conectado
    if (socket && socket.connected) {
        try {
            const response = await fetch(`/api/atividades/${id}`, {
                method: 'DELETE'
            });
            
            const resultado = await response.json();
            
            if (!resultado.success) {
                console.error('‚ùå Erro ao remover atividade do MongoDB:', resultado.error);
                // Continuar com remo√ß√£o local mesmo se falhar no MongoDB
            } else {
                console.log('‚òÅÔ∏è Atividade removida do MongoDB:', atividade.nome);
            }
        } catch (error) {
            console.error('‚ùå Erro na API de remo√ß√£o:', error);
            // Continuar com remo√ß√£o local mesmo se falhar no MongoDB
        }
    }
    
    // Remover localmente
    array.splice(index, 1);
    atualizarListaAtividades();
    atualizarSelectsAtividades();
    await salvarAtividades();
    mostrarNotificacao(`‚úÖ Atividade ${tipo} "${atividade.nome}" removida`, 'success');
}

// Fun√ß√£o para atualizar os selects de atividades
// ============== CUSTOM DROPDOWN FUNCTIONS ==============

function atualizarSelectsAtividades() {
    console.log('üîÑ Atualizando dropdowns de atividades...');
    console.log('üìù Atividades positivas:', atividadesPositivas);
    console.log('üìù Atividades negativas:', atividadesNegativas);
    
    // Verificar se estamos na p√°gina correta
    const isConfigPage = window.location.pathname.includes('configuracoes.html');
    console.log('üìç P√°gina atual:', window.location.pathname, '√â p√°gina de configura√ß√µes:', isConfigPage);
    
    // S√≥ atualizar dropdowns se estivermos na p√°gina de configura√ß√µes
    if (isConfigPage) {
        // Atualizar dropdown de atividades positivas (adicionar pontos)
        atualizarDropdownAtividades('adicionar', atividadesPositivas, 'positive');
        
        // Atualizar dropdown de atividades negativas (remover pontos)
        atualizarDropdownAtividades('remover', atividadesNegativas, 'negative');
        
        console.log('‚úÖ Atualiza√ß√£o de dropdowns conclu√≠da');
    } else {
        console.log('‚ÑπÔ∏è N√£o estamos na p√°gina de configura√ß√µes, pulando atualiza√ß√£o de dropdowns');
    }
    
    console.log(`üìä Resumo: ${atividadesPositivas.length} positivas, ${atividadesNegativas.length} negativas`);
}

function atualizarDropdownAtividades(tipo, atividades, classePontos) {
    console.log(`üîç Verificando elementos do dropdown ${tipo}...`);
    
    const dropdownHeader = DomUtils.getElementById(`dropdown-header-${tipo}`);
    const dropdownContent = DomUtils.getElementById(`dropdown-content-${tipo}`);
    const dropdownOptions = DomUtils.getElementById(`options-${tipo}`);
    const hiddenSelect = DomUtils.getElementById(`atividade-${tipo}`);
    const searchInput = DomUtils.getElementById(`search-${tipo}`);
    
    // Log detalhado dos elementos encontrados
    console.log(`üìã Elementos do dropdown ${tipo}:`, {
        header: !!dropdownHeader,
        content: !!dropdownContent,
        options: !!dropdownOptions,
        select: !!hiddenSelect,
        search: !!searchInput
    });
    
    if (!dropdownHeader || !dropdownContent || !dropdownOptions || !hiddenSelect) {
        console.error(`‚ùå Elementos do dropdown ${tipo} n√£o encontrados`);
        console.error(`üîç IDs procurados:`, [
            `dropdown-header-${tipo}`,
            `dropdown-content-${tipo}`,
            `options-${tipo}`,
            `atividade-${tipo}`
        ]);
        console.error(`üìç P√°gina atual:`, window.location.pathname);
        return;
    }
    
    // Limpar op√ß√µes existentes
    dropdownOptions.innerHTML = '';
    hiddenSelect.innerHTML = '';
    
    // Ordenar atividades alfabeticamente
    const atividadesOrdenadas = [...atividades].sort((a, b) => 
        a.nome.toLowerCase().localeCompare(b.nome.toLowerCase())
    );
    
    // Adicionar op√ß√£o padr√£o
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Selecione uma atividade...';
    hiddenSelect.appendChild(defaultOption);
    
    // Criar op√ß√µes do dropdown
    atividadesOrdenadas.forEach(atividade => {
        // Op√ß√£o para o select hidden
        const option = document.createElement('option');
        option.value = JSON.stringify(atividade);
        option.textContent = `${atividade.nome} (${classePontos === 'positive' ? '+' : '-'}${atividade.pontos} pts)`;
        hiddenSelect.appendChild(option);
        
        // Op√ß√£o para o dropdown visual
        const dropdownOption = document.createElement('div');
        dropdownOption.className = 'dropdown-option';
        dropdownOption.dataset.value = JSON.stringify(atividade);
        dropdownOption.innerHTML = `
            <span class="option-text">${atividade.nome}</span>
            <span class="option-points ${classePontos}">${classePontos === 'positive' ? '+' : '-'}${atividade.pontos}</span>
        `;
        
        // Event listener para sele√ß√£o
        dropdownOption.addEventListener('click', () => {
            selecionarOpcaoDropdown(tipo, atividade, dropdownOption);
        });
        
        dropdownOptions.appendChild(dropdownOption);
    });
    
    // Configurar busca
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            filtrarOpcoesDropdown(tipo, e.target.value);
        });
    }
    
    console.log(`‚úÖ Dropdown ${tipo} atualizado com ${atividadesOrdenadas.length} op√ß√µes`);
}

function selecionarOpcaoDropdown(tipo, atividade, elementoOpcao) {
    const dropdownHeader = DomUtils.getElementById(`dropdown-header-${tipo}`);
    const dropdownContent = DomUtils.getElementById(`dropdown-content-${tipo}`);
    const hiddenSelect = DomUtils.getElementById(`atividade-${tipo}`);
    const placeholder = dropdownHeader.querySelector('.dropdown-placeholder');
    
    // Atualizar placeholder
    placeholder.textContent = atividade.nome;
    placeholder.classList.add('selected');
    
    // Atualizar select hidden
    hiddenSelect.value = JSON.stringify(atividade);
    
    // Remover sele√ß√£o anterior
    const opcoesAnteriores = dropdownContent.querySelectorAll('.dropdown-option.selected');
    opcoesAnteriores.forEach(opcao => opcao.classList.remove('selected'));
    
    // Marcar op√ß√£o como selecionada
    elementoOpcao.classList.add('selected');
    
    // Fechar dropdown
    fecharDropdown(tipo);
    
    console.log(`‚úÖ Atividade selecionada no dropdown ${tipo}:`, atividade.nome);
}

function filtrarOpcoesDropdown(tipo, termoBusca) {
    const dropdownOptions = DomUtils.getElementById(`options-${tipo}`);
    const opcoes = dropdownOptions.querySelectorAll('.dropdown-option');
    
    opcoes.forEach(opcao => {
        const texto = opcao.querySelector('.option-text').textContent.toLowerCase();
        const termo = termoBusca.toLowerCase();
        
        if (texto.includes(termo)) {
            opcao.style.display = 'flex';
        } else {
            opcao.style.display = 'none';
        }
    });
}

function abrirDropdown(tipo) {
    const dropdownHeader = DomUtils.getElementById(`dropdown-header-${tipo}`);
    const dropdownContent = DomUtils.getElementById(`dropdown-content-${tipo}`);
    
    if (dropdownHeader && dropdownContent) {
        dropdownHeader.classList.add('active');
        dropdownContent.classList.add('show');
        
        // Focar no campo de busca
        const searchInput = DomUtils.getElementById(`search-${tipo}`);
        if (searchInput) {
            setTimeout(() => searchInput.focus(), 100);
        }
    }
}

function fecharDropdown(tipo) {
    const dropdownHeader = DomUtils.getElementById(`dropdown-header-${tipo}`);
    const dropdownContent = DomUtils.getElementById(`dropdown-content-${tipo}`);
    
    if (dropdownHeader && dropdownContent) {
        dropdownHeader.classList.remove('active');
        dropdownContent.classList.remove('show');
    }
}

function limparDropdown(tipo) {
    const dropdownHeader = DomUtils.getElementById(`dropdown-header-${tipo}`);
    const hiddenSelect = DomUtils.getElementById(`atividade-${tipo}`);
    const placeholder = dropdownHeader?.querySelector('.dropdown-placeholder');
    
    if (dropdownHeader && hiddenSelect && placeholder) {
        // Limpar placeholder
        placeholder.textContent = 'üîç Selecione uma atividade...';
        placeholder.classList.remove('selected');
        
        // Limpar select hidden
        hiddenSelect.value = '';
        
        // Remover sele√ß√£o visual
        const dropdownContent = DomUtils.getElementById(`dropdown-content-${tipo}`);
        if (dropdownContent) {
            const opcoesSelecionadas = dropdownContent.querySelectorAll('.dropdown-option.selected');
            opcoesSelecionadas.forEach(opcao => opcao.classList.remove('selected'));
        }
        
        // Fechar dropdown
        fecharDropdown(tipo);
    }
}

function configurarEventosDropdown() {
    // Configurar dropdown de adicionar pontos
    const dropdownHeaderAdicionar = DomUtils.getElementById('dropdown-header-adicionar');
    if (dropdownHeaderAdicionar) {
        dropdownHeaderAdicionar.addEventListener('click', () => {
            const dropdownContent = DomUtils.getElementById('dropdown-content-adicionar');
            if (dropdownContent.classList.contains('show')) {
                fecharDropdown('adicionar');
            } else {
                // Fechar outros dropdowns
                fecharDropdown('remover');
                abrirDropdown('adicionar');
            }
        });
    }
    
    // Configurar dropdown de remover pontos
    const dropdownHeaderRemover = DomUtils.getElementById('dropdown-header-remover');
    if (dropdownHeaderRemover) {
        dropdownHeaderRemover.addEventListener('click', () => {
            const dropdownContent = DomUtils.getElementById('dropdown-content-remover');
            if (dropdownContent.classList.contains('show')) {
                fecharDropdown('remover');
            } else {
                // Fechar outros dropdowns
                fecharDropdown('adicionar');
                abrirDropdown('remover');
            }
        });
    }
    
    // Fechar dropdowns ao clicar fora
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.custom-dropdown')) {
            fecharDropdown('adicionar');
            fecharDropdown('remover');
        }
    });
    
    console.log('‚úÖ Eventos dos dropdowns configurados');
}

// Removido - event listener duplicado
    
// Fun√ß√µes de atividades
function mostrarToast(message, type = 'success') {
    if (window.ToastUtils) {
        window.ToastUtils.showToast('Sistema', message, type);
    } else {
        // Fallback para console se ToastUtils n√£o estiver dispon√≠vel
        console.log(`${type.toUpperCase()}: ${message}`);
    }
}

// ============== SISTEMA DE LOG E UTILIT√ÅRIOS ==============

// ‚ú® ATUALIZADA: Fun√ß√£o para baixar log objetivo e simplificado
// 
// EXEMPLO DO LOG SIMPLIFICADO:
// Data,Hora,Usu√°rio,A√ß√£o,Filho,Atividade,Pontos,Total
// 27/01/2025,14:30:25,"Jo√£o","Adicionou","Maria","Lavar lou√ßa",5,15
// 27/01/2025,14:35:10,"Jo√£o","Removeu","Pedro","N√£o fez li√ß√£o",-3,7
// 27/01/2025,15:00:00,"Admin","Criou filho","","",,
// 27/01/2025,15:05:30,"Admin","Criou atividade","","Arrumar quarto",10,
//
async function baixarLog() {
    try {
        // Primeiro, sincronizar logs do MongoDB se conectado
        if (socket && socket.connected) {
            await sincronizarLogs();
        }
        
        if (logs.length === 0) {
            mostrarNotificacao('üìã Nenhum log dispon√≠vel para download!', 'warning');
            return;
        }
        
        // Criar cabe√ßalho simplificado do CSV
        const cabecalho = [
            'Data', 'Hora', 'Usu√°rio', 'A√ß√£o', 'Filho', 'Atividade', 'Pontos', 'Total'
        ];
        
        // Converter logs para CSV simplificado
        const csvContent = [
            cabecalho.join(','),
            ...logs.map(log => {
                // Simplificar a a√ß√£o
                let acaoSimples = log.acao || '';
                if (acaoSimples.includes('adicionar_pontos')) acaoSimples = 'Adicionou';
                else if (acaoSimples.includes('remover_pontos')) acaoSimples = 'Removeu';
                else if (acaoSimples.includes('adicionar_filho')) acaoSimples = 'Criou filho';
                else if (acaoSimples.includes('editar_filho')) acaoSimples = 'Editou filho';
                else if (acaoSimples.includes('remover_filho')) acaoSimples = 'Removeu filho';
                else if (acaoSimples.includes('adicionar_atividade')) acaoSimples = 'Criou atividade';
                else if (acaoSimples.includes('editar_atividade')) acaoSimples = 'Editou atividade';
                else if (acaoSimples.includes('remover_atividade')) acaoSimples = 'Removeu atividade';
                else if (acaoSimples.includes('resetar_pontos')) acaoSimples = 'Resetou pontos';
                else if (acaoSimples.includes('limpar_historico')) acaoSimples = 'Limpou hist√≥rico';
                else if (acaoSimples.includes('download_log')) acaoSimples = 'Baixou log';
                else acaoSimples = acaoSimples.replace('_', ' ').toUpperCase();
                
                // Formatar data e hora
                const data = log.data || '';
                const hora = log.horario || '';
                
                // Simplificar usu√°rio
                const usuario = log.responsavel || log.perfil || 'Sistema';
                
                // Informa√ß√µes da crian√ßa e atividade
                const filho = log.detalhes.filho || '';
                const atividade = log.detalhes.atividade || '';
                
                // Pontos (s√≥ mostrar se for a√ß√£o de pontos)
                let pontos = '';
                let total = '';
                if (log.detalhes.pontos) {
                    pontos = log.detalhes.pontos;
                    total = log.detalhes.pontos_depois || '';
                }
                
                return [
                    data,
                    hora,
                    `"${usuario}"`,
                    `"${acaoSimples}"`,
                    `"${filho}"`,
                    `"${atividade}"`,
                    pontos,
                    total
                ].join(',');
            })
        ].join('\n');
        
        // Criar arquivo para download
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        
        const dataAtual = new Date().toISOString().split('T')[0];
        const horaAtual = new Date().toTimeString().split(' ')[0].replace(/:/g, '-');
        
        link.setAttribute('href', url);
        link.setAttribute('download', `log_pontos_${dataAtual}_${horaAtual}.csv`);
        link.style.visibility = 'hidden';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        adicionarLog('download_log', {
            total_registros: logs.length,
            formato: 'CSV_SIMPLIFICADO',
            arquivo: `log_pontos_${dataAtual}_${horaAtual}.csv`,
            fonte: socket && socket.connected ? 'MongoDB + Local' : 'Local apenas'
        });
        
        mostrarNotificacao(`üìã Log simplificado baixado com ${logs.length} registros!`, 'success');
        
    } catch (error) {
        console.error('‚ùå Erro ao baixar log:', error);
        mostrarNotificacao('‚ùå Erro ao baixar log!', 'error');
    }
}

// ‚ú® NOVA: Fun√ß√£o para baixar log super resumido (apenas pontos)
//
// EXEMPLO DO LOG RESUMIDO (APENAS PONTOS):
// Data,Hora,Filho,Atividade,Pontos,Total
// 27/01/2025,14:30:25,"Maria","Lavar lou√ßa",5,15
// 27/01/2025,14:35:10,"Pedro","N√£o fez li√ß√£o",-3,7
// 27/01/2025,16:20:15,"Maria","Fez li√ß√£o",10,25
//
async function baixarLogResumido() {
    try {
        // Primeiro, sincronizar logs do MongoDB se conectado
        if (socket && socket.connected) {
            await sincronizarLogs();
        }
        
        if (logs.length === 0) {
            mostrarNotificacao('üìã Nenhum log dispon√≠vel para download!', 'warning');
            return;
        }
        
        // Filtrar apenas logs de pontos
        const logsPontos = logs.filter(log => 
            log.acao && (log.acao.includes('adicionar_pontos') || log.acao.includes('remover_pontos'))
        );
        
        if (logsPontos.length === 0) {
            mostrarNotificacao('üìã Nenhum registro de pontos encontrado!', 'warning');
            return;
        }
        
        // Criar cabe√ßalho super simplificado
        const cabecalho = ['Data', 'Hora', 'Filho', 'Atividade', 'Pontos', 'Total'];
        
        // Converter logs para CSV super simplificado
        const csvContent = [
            cabecalho.join(','),
            ...logsPontos.map(log => {
                const data = log.data || '';
                const hora = log.horario || '';
                const filho = log.detalhes.filho || '';
                const atividade = log.detalhes.atividade || '';
                const pontos = log.detalhes.pontos || '';
                const total = log.detalhes.pontos_depois || '';
                
                return [
                    data,
                    hora,
                    `"${filho}"`,
                    `"${atividade}"`,
                    pontos,
                    total
                ].join(',');
            })
        ].join('\n');
        
        // Criar arquivo para download
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        
        const dataAtual = new Date().toISOString().split('T')[0];
        const horaAtual = new Date().toTimeString().split(' ')[0].replace(/:/g, '-');
        
        link.setAttribute('href', url);
        link.setAttribute('download', `pontos_${dataAtual}_${horaAtual}.csv`);
        link.style.visibility = 'hidden';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        adicionarLog('download_log_resumido', {
            total_registros: logsPontos.length,
            formato: 'CSV_PONTOS_ONLY',
            arquivo: `pontos_${dataAtual}_${horaAtual}.csv`,
            fonte: socket && socket.connected ? 'MongoDB + Local' : 'Local apenas'
        });
        
        mostrarNotificacao(`üìã Log de pontos baixado com ${logsPontos.length} registros!`, 'success');
        
    } catch (error) {
        console.error('‚ùå Erro ao baixar log resumido:', error);
        mostrarNotificacao('‚ùå Erro ao baixar log resumido!', 'error');
    }
}

// ‚ú® NOVA FUN√á√ÉO: Mostrar resumo dos logs na console
function mostrarResumoLogs() {
    console.log('üìã === RESUMO DOS LOGS ===');
    console.log(`üìä Total de registros: ${logs.length}`);
    
    if (logs.length === 0) {
        console.log('üì≠ Nenhum log encontrado');
        return;
    }
    
    // Agrupar por perfil
    const porPerfil = logs.reduce((acc, log) => {
        const perfil = log.perfil || 'N√£o informado';
        acc[perfil] = (acc[perfil] || 0) + 1;
        return acc;
    }, {});
    
    console.log('üë• Logs por perfil:');
    Object.entries(porPerfil).forEach(([perfil, count]) => {
        console.log(`   ${perfil}: ${count} a√ß√µes`);
    });
    
    // Agrupar por a√ß√£o
    const porAcao = logs.reduce((acc, log) => {
        const acao = log.acao || 'N√£o informado';
        acc[acao] = (acc[acao] || 0) + 1;
        return acc;
    }, {});
    
    console.log('üéØ Logs por a√ß√£o:');
    Object.entries(porAcao).forEach(([acao, count]) => {
        console.log(`   ${acao.replace('_', ' ')}: ${count}x`);
    });
    
    // Mostrar √∫ltimas 5 a√ß√µes
    console.log('üïí √öltimas 5 a√ß√µes:');
    logs.slice(-5).forEach(log => {
        console.log(`   ${log.data} ${log.horario} - ${log.perfil} (${log.responsavel}): ${log.acao}`);
    });
    
    console.log('üìã === FIM DO RESUMO ===');
}

// ‚ú® NOVA FUN√á√ÉO: Verificar logs de um usu√°rio espec√≠fico
function verificarLogsUsuario(nomeUsuario) {
    const logsUsuario = logs.filter(log => 
        log.responsavel?.toLowerCase().includes(nomeUsuario.toLowerCase())
    );
    
    console.log(`üìã Logs do usu√°rio "${nomeUsuario}": ${logsUsuario.length} registros`);
    logsUsuario.forEach(log => {
        console.log(`   ${log.data_completa} - ${log.acao}: ${JSON.stringify(log.detalhes)}`);
    });
    
    return logsUsuario;
}

// Fun√ß√£o para resetar pontos
async function resetarPontos() {
    if (filhos.length === 0) {
        mostrarNotificacao('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Nenhuma crian√ßa cadastrada para resetar!', 'warning');
        return;
    }
    
    // ‚ú® CORRE√á√ÉO: Usar modal de confirma√ß√£o padr√£o do app
    confirmarAcao(`üîÑ Tem certeza que deseja resetar todos os pontos?\n\nIsto ir√°:\n‚Ä¢ Zerar os pontos de todas as crian√ßas\n‚Ä¢ Manter o hist√≥rico preservado\n‚Ä¢ Registrar esta a√ß√£o no log\n\nEsta a√ß√£o n√£o pode ser desfeita!`, async (confirmado) => {
        if (!confirmado) return;
        
        // Salvar pontos atuais antes do reset
        const pontosAnteriores = {};
        filhos.forEach(filho => {
            pontosAnteriores[filho.nome] = filho.pontos;
            filho.pontos = 0;
        });
        
        // Adicionar log do reset
        adicionarLog('resetar_pontos', {
            total_criancas: filhos.length,
            pontos_anteriores: pontosAnteriores,
            motivo: 'Reset mensal/manual'
        });
        
        // Atualizar interface e salvar
        atualizarInterface();
        await salvarDados();
        
        // ‚ú® NOVO: Sincronizar ap√≥s resetar pontos
        await sincronizarAposAcao('resetar pontos');
        
        mostrarNotificacao(`üîÑ Pontos resetados para ${filhos.length} crian√ßas!`, 'success');
    });
}

// ‚ú® NOVA: Fun√ß√£o auxiliar para fazer requisi√ß√µes com retry autom√°tico
async function requisicaoComRetry(url, options = {}, maxTentativas = 3, delay = 2000) {
    for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
        try {
            console.log(`üîÑ Tentativa ${tentativa}/${maxTentativas} para ${url}`);
            
            const response = await fetch(url, options);
            
            if (response.status === 429) {
                if (tentativa < maxTentativas) {
                    console.log(`‚è≥ Rate limit atingido. Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                    delay *= 2; // Dobrar o delay a cada tentativa
                    continue;
                } else {
                    throw new Error('Muitas requisi√ß√µes. Tente novamente em alguns minutos.');
                }
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return response;
            
        } catch (error) {
            if (tentativa === maxTentativas) {
                throw error;
            }
            
            console.log(`‚ùå Tentativa ${tentativa} falhou:`, error.message);
            console.log(`‚è≥ Aguardando ${delay}ms antes de tentar novamente...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            delay *= 2;
        }
    }
}

// Fun√ß√£o para limpar hist√≥rico (apenas admin)
async function limparHistorico() {
    // Verificar se √© admin
    const session = JSON.parse(localStorage.getItem('userSession') || '{}');
    if (session.type !== 'admin') {
        mostrarNotificacao('‚ùå Apenas administradores podem limpar o hist√≥rico!', 'error');
        return;
    }

    // ‚ú® CORRIGIDO: Verificar tanto logs quanto historico
    const totalRegistros = (logs?.length || 0) + (historico?.length || 0);
    if (totalRegistros === 0) {
        mostrarNotificacao('üìã O hist√≥rico j√° est√° vazio!', 'info');
        return;
    }
    
    // ‚ú® CORRE√á√ÉO: Usar modal de confirma√ß√£o padr√£o do app com confirma√ß√£o dupla
    confirmarAcao(`üóëÔ∏è Tem certeza que deseja limpar TODO o hist√≥rico?\n\nIsto ir√°:\n‚Ä¢ Apagar permanentemente ${totalRegistros} registros\n‚Ä¢ Manter os pontos atuais das crian√ßas\n‚Ä¢ Registrar esta a√ß√£o no log\n\n‚ö†Ô∏è ESTA A√á√ÉO N√ÉO PODE SER DESFEITA!`, async (confirmado) => {
        if (!confirmado) return;
        
        // Confirma√ß√£o dupla para a√ß√£o cr√≠tica
        confirmarAcao(`‚ö†Ô∏è CONFIRMA√á√ÉO FINAL\n\nVoc√™ est√° prestes a apagar ${totalRegistros} registros do hist√≥rico.\n\nClique Confirmar para prosseguir ou Cancelar para abortar:`, async (confirmadoFinal) => {
            if (!confirmadoFinal) return;
    
    try {
        // Salvar quantidade de registros para log
        const logsCount = logs?.length || 0;
        const historicoCount = historico?.length || 0;
        
        // ‚ú® NOVO: Usar requisi√ß√£o com retry para evitar erro 429
        const response = await requisicaoComRetry('/api/historico', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        }, 3, 3000); // 3 tentativas, come√ßando com 3 segundos de delay

        const result = await response.json();

        if (result.success) {
            // ‚ú® CORRIGIDO: Limpar tanto logs quanto historico PRIMEIRO
            if (logs && logs.length > 0) {
                logs.splice(0); // Remove todos os logs
                console.log('üóëÔ∏è Logs locais limpos');
            }
            
            if (historico && historico.length > 0) {
                historico.splice(0); // Remove todo o historico
                console.log('üóëÔ∏è Hist√≥rico local limpo');
            }
            
            // Limpar tamb√©m o localStorage
            localStorage.removeItem('logs');
            localStorage.removeItem('historico');
            
            // Atualizar interface
            atualizarInterface();
            await salvarDados();
            
            // ‚ú® CORRE√á√ÉO CR√çTICA: N√ÉO adicionar log nem salvar logs ap√≥s limpar
            // O log da limpeza seria re-adicionado ao hist√≥rico que acabamos de limpar!
            
            mostrarNotificacao(`üóëÔ∏è Hist√≥rico limpo! ${result.totalRemovidos || totalRegistros} registros foram removidos do banco de dados.`, 'success');
        } else {
            throw new Error(result.message || 'Erro ao limpar hist√≥rico no servidor');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar hist√≥rico:', error);
        
        // ‚ú® NOVO: Oferecer op√ß√µes baseadas no tipo de erro
        let mensagemErro = error.message;
        let opcaoAlternativa = '';
        
        if (error.message.includes('Muitas requisi√ß√µes') || error.message.includes('429')) {
            mensagemErro = 'Servidor sobrecarregado (muitas requisi√ß√µes).';
            opcaoAlternativa = '\n\nüí° ALTERNATIVAS:\n1. Aguarde alguns minutos e tente novamente\n2. Limpe apenas localmente (execute: limparHistoricoLocal())';
        }
        
        // ‚ú® CORRE√á√ÉO: Usar modal de confirma√ß√£o padr√£o do app para op√ß√£o alternativa
        confirmarAcao(`‚ùå ${mensagemErro}${opcaoAlternativa}\n\nDeseja limpar apenas o hist√≥rico local?`, (tentarLocal) => {
            if (tentarLocal) {
                return limparHistoricoLocal();
            } else {
                mostrarNotificacao('‚ùå Limpeza de hist√≥rico cancelada', 'warning');
            }
        });
    }
        });
    });
}

// ================================
// WebSocket j√° est√° sendo gerenciado pelo websocket-sync.js
// Removida implementa√ß√£o duplicada para evitar conflitos

// ‚ú® NOVA: Fun√ß√£o para verificar e corrigir inconsist√™ncias de dados
async function verificarIntegridadeDados() {
    console.log('üîç Verificando integridade dos dados...');
    
    try {
        // 1. Verificar se todas as crian√ßas t√™m pontos
        const pontosAtuais = JSON.parse(localStorage.getItem('pontos') || '{}');
        const criancasSemPontos = filhos.filter(filho => 
            !pontosAtuais[filho.nome.toLowerCase()]
        );
        
        if (criancasSemPontos.length > 0) {
            console.log('‚ö†Ô∏è Crian√ßas sem pontos encontradas:', criancasSemPontos);
            
            // Adicionar pontos zerados para crian√ßas sem pontos
            criancasSemPontos.forEach(filho => {
                pontosAtuais[filho.nome.toLowerCase()] = 0;
            });
            
            // Salvar pontos atualizados
            localStorage.setItem('pontos', JSON.stringify(pontosAtuais));
            console.log('‚úÖ Pontos zerados adicionados para crian√ßas sem pontos');
        }
        
        // 2. Verificar se h√° pontos √≥rf√£os (pontos sem crian√ßa correspondente)
        const pontosOrfaos = Object.keys(pontosAtuais).filter(nome => 
            !filhos.some(filho => filho.nome.toLowerCase() === nome)
        );
        
        if (pontosOrfaos.length > 0) {
            console.log('‚ö†Ô∏è Pontos √≥rf√£os encontrados:', pontosOrfaos);
            
            // Remover pontos √≥rf√£os
            pontosOrfaos.forEach(nome => {
                delete pontosAtuais[nome];
            });
            
            // Salvar pontos atualizados
            localStorage.setItem('pontos', JSON.stringify(pontosAtuais));
            console.log('‚úÖ Pontos √≥rf√£os removidos');
        }
        
        // 3. Verificar atividades duplicadas
        const atividadesPositivasUnicas = [...new Set(atividadesPositivas.map(a => a.nome))];
        const atividadesNegativasUnicas = [...new Set(atividadesNegativas.map(a => a.nome))];
        
        if (atividadesPositivasUnicas.length !== atividadesPositivas.length) {
            console.log('‚ö†Ô∏è Atividades positivas duplicadas encontradas');
            atividadesPositivas = atividadesPositivas.filter((atividade, index, array) => 
                array.findIndex(a => a.nome === atividade.nome) === index
            );
            localStorage.setItem('atividadesPositivas', JSON.stringify(atividadesPositivas));
            console.log('‚úÖ Atividades positivas duplicadas removidas');
        }
        
        if (atividadesNegativasUnicas.length !== atividadesNegativas.length) {
            console.log('‚ö†Ô∏è Atividades negativas duplicadas encontradas');
            atividadesNegativas = atividadesNegativas.filter((atividade, index, array) => 
                array.findIndex(a => a.nome === atividade.nome) === index
            );
            localStorage.setItem('atividadesNegativas', JSON.stringify(atividadesNegativas));
            console.log('‚úÖ Atividades negativas duplicadas removidas');
        }
        
        console.log('‚úÖ Verifica√ß√£o de integridade conclu√≠da');
    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o de integridade:', error);
    }
}

// ‚ú® NOVA: Fun√ß√£o global para debug dos filhos
window.debugFilhos = function() {
    console.log('üîç === DEBUG FILHOS ===');
    console.log('üìä Array filhos:', filhos);
    console.log('üìä Quantidade de filhos:', filhos.length);
    console.log('üì± localStorage filhos: n√£o usado (apenas MongoDB)');
    
    // Verificar se o container existe
    const container = document.getElementById('lista-filhos');
    console.log('üéØ Container lista-filhos:', container);
    
    // Verificar se estamos na p√°gina de configura√ß√µes
    const tabFilhos = document.getElementById('tab-filhos');
    console.log('üéØ Tab filhos:', tabFilhos);
    
    // For√ßar renderiza√ß√£o
    console.log('üîÑ For√ßando renderiza√ß√£o...');
    renderizarListaFilhos();
    
    // Verificar novamente ap√≥s renderiza√ß√£o
    setTimeout(() => {
        const containerApos = document.getElementById('lista-filhos');
        console.log('üéØ Container ap√≥s renderiza√ß√£o:', containerApos);
        console.log('üìù Conte√∫do do container:', containerApos?.innerHTML);
    }, 100);
};

// ‚ú® NOVA: Fun√ß√£o global para for√ßar carregamento dos filhos
window.forcarCarregamentoFilhos = async function() {
    console.log('üîÑ === FOR√áANDO CARREGAMENTO DOS FILHOS ===');
    
    try {
        // For√ßar sincroniza√ß√£o
        await sincronizarDados();
        
        // Carregar do localStorage como fallback
        carregarDoLocalStorage();
        
        // For√ßar renderiza√ß√£o
        renderizarListaFilhos();
        
        console.log('‚úÖ Carregamento for√ßado conclu√≠do');
        console.log('üìä Filhos carregados:', filhos.length);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro no carregamento for√ßado:', error);
        return false;
    }
};

// Fun√ß√£o utilit√°ria para bloquear a√ß√µes se offline
function bloquearSeOffline() {
    if (!navigator.onLine) {
        mostrarNotificacao('Voc√™ est√° offline. Conecte-se √† internet para usar o sistema.', 'error');
        throw new Error('A√ß√£o bloqueada: usu√°rio offline');
    }
}

// Exemplo de uso em uma a√ß√£o:
async function handleAdicionarPontos(e) {
    try {
        bloquearSeOffline();
        // ... restante da l√≥gica de adicionar pontos ...
    } catch (err) {
        console.warn(err.message);
    }
}

