/**
 * üöÄ APLICA√á√ÉO PRINCIPAL - FRONTEND
 * 
 * Arquivo principal que inicializa e coordena toda a aplica√ß√£o
 * 
 * @author Jailton Gomes
 * @version 2.0.0
 */

class App {
    constructor() {
        this.isInitialized = false;
        this.currentUser = null;
    }

    // Inicializar aplica√ß√£o
    async init() {
        try {
            console.log('üöÄ Inicializando aplica√ß√£o...');
            
            // Verificar autentica√ß√£o
            await this.verificarAutenticacao();
            
            // Carregar dados iniciais
            await this.carregarDadosIniciais();
            
            // Configurar interface
            this.configurarInterface();
            
            // Configurar eventos
            this.configurarEventos();
            
            this.isInitialized = true;
            console.log('‚úÖ Aplica√ß√£o inicializada com sucesso!');
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
            this.mostrarErroInicializacao(error);
        }
    }

    // Verificar autentica√ß√£o
    async verificarAutenticacao() {
        console.log('üîê Verificando autentica√ß√£o...');
        
        // Verificar se AuthUtils est√° dispon√≠vel
        if (typeof AuthUtils === 'undefined') {
            throw new Error('AuthUtils n√£o carregado');
        }
        
        // Verificar se usu√°rio est√° logado
        const isLoggedIn = AuthUtils.isLoggedIn();
        if (!isLoggedIn) {
            console.log('üîê Usu√°rio n√£o logado, redirecionando...');
            window.location.href = '/login.html';
            return;
        }
        
        this.currentUser = AuthUtils.getCurrentUser();
        console.log('üë§ Usu√°rio logado:', this.currentUser);
    }

    // Carregar dados iniciais
    async carregarDadosIniciais() {
        console.log('üìä Carregando dados iniciais...');
        
        // Carregar crian√ßas
        await criancasController.carregarCriancas();
        
        // Carregar pontos (se necess√°rio)
        // await pontosController.carregarPontos();
        
        // Carregar atividades (se necess√°rio)
        // await atividadesController.carregarAtividades();
        
        console.log('‚úÖ Dados iniciais carregados');
    }

    // Configurar interface baseada no usu√°rio
    configurarInterface() {
        console.log('üé® Configurando interface...');
        
        if (!this.currentUser) return;
        
        // Configurar cabe√ßalho
        this.configurarCabecalho();
        
        // Configurar permiss√µes
        this.configurarPermissoes();
        
        // Atualizar interface das crian√ßas
        criancasController.atualizarInterface();
        
        console.log('‚úÖ Interface configurada');
    }

    // Configurar cabe√ßalho
    configurarCabecalho() {
        const headerTitle = document.querySelector('.header-title p');
        if (headerTitle && this.currentUser) {
            const tipoTexto = this.currentUser.type === 'admin' ? 'üîß Administrador' : 
                             this.currentUser.type === 'pai' ? `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ${this.currentUser.nome}` : 
                             'üëÄ Visualiza√ß√£o';
            headerTitle.innerHTML = `${tipoTexto} - Gerenciando os pontos dos filhos`;
        }
    }

    // Configurar permiss√µes
    configurarPermissoes() {
        if (!this.currentUser) return;
        
        const { type, permissions } = this.currentUser;
        
        // Configurar bot√£o de configura√ß√µes
        const configBtn = document.getElementById('btn-configuracoes');
        if (configBtn) {
            if (type === 'guest') {
                configBtn.style.display = 'none';
            } else {
                configBtn.style.display = 'block';
            }
        }
        
        // Configurar elementos admin-only
        if (type === 'admin') {
            this.configurarElementosAdmin();
        }
    }

    // Configurar elementos admin-only
    configurarElementosAdmin() {
        const elementosAdmin = [
            { id: 'btn-baixar-log', permission: 'export_data' },
            { id: 'btn-resetar-pontos', permission: 'manage_children' },
            { id: 'btn-limpar-historico', permission: 'manage_activities' }
        ];
        
        elementosAdmin.forEach(elemento => {
            const el = document.getElementById(elemento.id);
            if (el && this.currentUser.permissions.includes(elemento.permission)) {
                el.style.display = 'block';
                console.log(`‚úÖ LIBERADO: ${elemento.id}`);
            }
        });
    }

    // Configurar eventos
    configurarEventos() {
        console.log('üé≠ Configurando eventos...');
        
        // Evento para adicionar crian√ßa
        const btnAddCrianca = document.getElementById('btn-add-crianca');
        if (btnAddCrianca) {
            btnAddCrianca.addEventListener('click', () => {
                criancasController.adicionarCriancaViaModal();
            });
        }
        
        // Evento para configura√ß√µes
        const btnConfig = document.getElementById('btn-configuracoes');
        if (btnConfig) {
            btnConfig.addEventListener('click', () => {
                this.abrirConfiguracoes();
            });
        }
        
        // Evento para logout
        const btnLogout = document.getElementById('btn-logout');
        if (btnLogout) {
            btnLogout.addEventListener('click', () => {
                this.fazerLogout();
            });
        }
        
        console.log('‚úÖ Eventos configurados');
    }

    // Abrir configura√ß√µes
    abrirConfiguracoes() {
        window.location.href = '/configuracoes.html';
    }

    // Fazer logout
    fazerLogout() {
        if (typeof AuthUtils !== 'undefined') {
            AuthUtils.logout();
        }
        window.location.href = '/login.html';
    }

    // Mostrar erro de inicializa√ß√£o
    mostrarErroInicializacao(error) {
        console.error('‚ùå Erro fatal na inicializa√ß√£o:', error);
        
        const container = document.querySelector('.main-content') || document.body;
        container.innerHTML = `
            <div class="error-container">
                <h2>‚ùå Erro ao carregar a aplica√ß√£o</h2>
                <p>${error.message}</p>
                <button onclick="location.reload()" class="btn-retry">
                    üîÑ Tentar Novamente
                </button>
            </div>
        `;
    }

    // Verificar se est√° inicializado
    isReady() {
        return this.isInitialized;
    }

    // Obter usu√°rio atual
    getCurrentUser() {
        return this.currentUser;
    }
}

// Inst√¢ncia global da aplica√ß√£o
window.app = new App();

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    app.init();
}); 